// prisma/schema.prisma
//
// Full replacement schema with multi-tenant auth (Users + Memberships + Audit),
// and the existing domain models (Org/Network/Practice/Keys/Patient/CareEpisode/Bundle/Submission).
// PostgreSQL target. Compatible with `prisma migrate dev`.

// ===== Generator & Datasource =====
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== Enums =====
enum OrgRole {
  ORG_OWNER
  ORG_MEMBER
  ORG_READONLY
}

enum NetworkRole {
  NETWORK_ADMIN
  NETWORK_MEMBER
  NETWORK_READONLY
}

// ===== Core Tenancy Models =====
model Org {
  id               String           @id @default(cuid())
  name             String           @unique
  createdAt        DateTime         @default(now())

  // Relations
  networks         Network[]
  orgMemberships   OrgMembership[]
  auditLogs        AuditLog[]       @relation("OrgAuditLogs")
}

model Network {
  id                 String              @id @default(cuid())
  name               String
  createdAt          DateTime            @default(now())

  // Tenancy
  orgId              String
  org                Org                 @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Active bundle pointer (optional)
  currentBundleId    String?
  currentBundle      Bundle?             @relation("NetworkCurrentBundle", fields: [currentBundleId], references: [id])

  // Relations
  practices          Practice[]
  bundles            Bundle[]
  networkMemberships NetworkMembership[]
  auditLogs          AuditLog[]          @relation("NetworkAuditLogs")

  @@index([orgId])
  @@index([currentBundleId])
}

model Practice {
  id           String         @id @default(cuid())
  name         String
  createdAt    DateTime       @default(now())

  // Tenancy
  networkId    String
  network      Network        @relation(fields: [networkId], references: [id], onDelete: Cascade)

  // Relations
  keys         PracticeKey[]
  careEpisodes CareEpisode[]

  @@index([networkId])
}

model PracticeKey {
  id           String    @id @default(cuid())
  practiceId   String
  practice     Practice  @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  publicKeyPem String    // PEM-encoded RSA/ECDSA public key
  isActive     Boolean   @default(false)
  createdAt    DateTime  @default(now())

  @@index([practiceId, isActive])
}

model Patient {
  id            String        @id
  createdAt     DateTime      @default(now())

  // Relations
  submissions   Submission[]
  careEpisodes  CareEpisode[]
}

model CareEpisode {
  id          String     @id @default(cuid())

  patientId   String
  patient     Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade)

  practiceId  String
  practice    Practice   @relation(fields: [practiceId], references: [id], onDelete: Cascade)

  startAt     DateTime   @default(now())
  endAt       DateTime?

  @@index([patientId])
  @@index([practiceId, endAt])
}

// An assessment bundle (questions + meta) published by a Network.
model Bundle {
  id        String    @id @default(cuid())

  networkId String
  network   Network   @relation(fields: [networkId], references: [id], onDelete: Cascade)

  // JSON payloads; validated at the API layer
  meta      Json?
  data      Json?

  createdAt DateTime  @default(now())

  // Reverse relations
  submissions Submission[]

  // If this bundle is referenced as Network.currentBundleId, that's via "NetworkCurrentBundle"
  networksAsCurrent Network[] @relation("NetworkCurrentBundle")

  @@index([networkId, createdAt])
}

// Encrypted submission produced by the Patient app.
// NOTE: ciphertext/iv/tag/wrappedDEK are stored as strings (CSV bytes in current PoC).
model Submission {
  id          String    @id @default(cuid())

  patientId   String
  patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  bundleId    String
  bundle      Bundle    @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  bundleHash  String

  // PoC storage format (CSV byte strings). Can be migrated to base64 later.
  ciphertext  String
  iv          String
  tag         String
  wrappedDEK  String

  createdAt   DateTime  @default(now())

  @@index([patientId, createdAt])
  @@index([bundleId, createdAt])
  @@index([bundleHash])
}

// ===== Auth & Membership Models =====
model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  passwordHash        String
  createdAt           DateTime             @default(now())

  orgMemberships      OrgMembership[]
  networkMemberships  NetworkMembership[]
  auditLogs           AuditLog[]           @relation("UserAuditLogs")
}

model OrgMembership {
  userId  String
  orgId   String
  role    OrgRole

  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  org     Org  @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@id([userId, orgId])
  @@index([orgId])
}

model NetworkMembership {
  userId    String
  networkId String
  role      NetworkRole

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  network   Network @relation(fields: [networkId], references: [id], onDelete: Cascade)

  @@id([userId, networkId])
  @@index([networkId])
}

// Write-once audit entries for important actions (publish bundle, assign bundle, rotate key, etc.)
model AuditLog {
  id              String    @id @default(cuid())
  at              DateTime  @default(now())

  actorUserId     String
  action          String    // e.g., "bundle.publish", "bundle.make_current", "practice.key.rotate"
  subjectType     String    // e.g., "Bundle", "PracticeKey", "Network"
  subjectId       String?
  details         Json?

  // Optional tenant scoping for quick queries
  actorOrgId      String?
  actorNetworkId  String?

  // Relations
  actor           User      @relation("UserAuditLogs", fields: [actorUserId], references: [id], onDelete: Cascade)
  org             Org?      @relation("OrgAuditLogs", fields: [actorOrgId], references: [id])
  network         Network?  @relation("NetworkAuditLogs", fields: [actorNetworkId], references: [id])

  @@index([actorUserId, at])
  @@index([actorOrgId, at])
  @@index([actorNetworkId, at])
}
