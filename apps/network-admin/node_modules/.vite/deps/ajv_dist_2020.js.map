{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/dynamic/dynamicAnchor.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/dynamic/dynamicRef.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/dynamic/recursiveAnchor.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/dynamic/recursiveRef.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/dynamic/index.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/validation/dependentRequired.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/applicator/dependentSchemas.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/validation/limitContains.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/next.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/unevaluated/unevaluatedProperties.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/unevaluated/unevaluatedItems.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/unevaluated/index.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/vocabularies/draft2020.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/dist/refs/json-schema-2020-12/schema.json", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/dist/refs/json-schema-2020-12/meta/applicator.json", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/dist/refs/json-schema-2020-12/meta/unevaluated.json", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/dist/refs/json-schema-2020-12/meta/content.json", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/dist/refs/json-schema-2020-12/meta/core.json", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/dist/refs/json-schema-2020-12/meta/format-annotation.json", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/dist/refs/json-schema-2020-12/meta/meta-data.json", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/dist/refs/json-schema-2020-12/meta/validation.json", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/refs/json-schema-2020-12/index.ts", "../../../../../node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/lib/2020.ts"],
  "sourcesContent": ["import type {CodeKeywordDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, getProperty, Code} from \"../../compile/codegen\"\nimport N from \"../../compile/names\"\nimport {SchemaEnv, compileSchema} from \"../../compile\"\nimport {getValidate} from \"../core/ref\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"$dynamicAnchor\",\n  schemaType: \"string\",\n  code: (cxt) => dynamicAnchor(cxt, cxt.schema),\n}\n\nexport function dynamicAnchor(cxt: KeywordCxt, anchor: string): void {\n  const {gen, it} = cxt\n  it.schemaEnv.root.dynamicAnchors[anchor] = true\n  const v = _`${N.dynamicAnchors}${getProperty(anchor)}`\n  const validate = it.errSchemaPath === \"#\" ? it.validateName : _getValidate(cxt)\n  gen.if(_`!${v}`, () => gen.assign(v, validate))\n}\n\nfunction _getValidate(cxt: KeywordCxt): Code {\n  const {schemaEnv, schema, self} = cxt.it\n  const {root, baseId, localRefs, meta} = schemaEnv.root\n  const {schemaId} = self.opts\n  const sch = new SchemaEnv({schema, schemaId, root, baseId, localRefs, meta})\n  compileSchema.call(self, sch)\n  return getValidate(cxt, sch)\n}\n\nexport default def\n", "import type {CodeKeywordDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, getProperty, Code, Name} from \"../../compile/codegen\"\nimport N from \"../../compile/names\"\nimport {callRef} from \"../core/ref\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"$dynamicRef\",\n  schemaType: \"string\",\n  code: (cxt) => dynamicRef(cxt, cxt.schema),\n}\n\nexport function dynamicRef(cxt: KeywordCxt, ref: string): void {\n  const {gen, keyword, it} = cxt\n  if (ref[0] !== \"#\") throw new Error(`\"${keyword}\" only supports hash fragment reference`)\n  const anchor = ref.slice(1)\n  if (it.allErrors) {\n    _dynamicRef()\n  } else {\n    const valid = gen.let(\"valid\", false)\n    _dynamicRef(valid)\n    cxt.ok(valid)\n  }\n\n  function _dynamicRef(valid?: Name): void {\n    // TODO the assumption here is that `recursiveRef: #` always points to the root\n    // of the schema object, which is not correct, because there may be $id that\n    // makes # point to it, and the target schema may not contain dynamic/recursiveAnchor.\n    // Because of that 2 tests in recursiveRef.json fail.\n    // This is a similar problem to #815 (`$id` doesn't alter resolution scope for `{ \"$ref\": \"#\" }`).\n    // (This problem is not tested in JSON-Schema-Test-Suite)\n    if (it.schemaEnv.root.dynamicAnchors[anchor]) {\n      const v = gen.let(\"_v\", _`${N.dynamicAnchors}${getProperty(anchor)}`)\n      gen.if(v, _callRef(v, valid), _callRef(it.validateName, valid))\n    } else {\n      _callRef(it.validateName, valid)()\n    }\n  }\n\n  function _callRef(validate: Code, valid?: Name): () => void {\n    return valid\n      ? () =>\n          gen.block(() => {\n            callRef(cxt, validate)\n            gen.let(valid, true)\n          })\n      : () => callRef(cxt, validate)\n  }\n}\n\nexport default def\n", "import type {CodeKeywordDefinition} from \"../../types\"\nimport {dynamicAnchor} from \"./dynamicAnchor\"\nimport {checkStrictMode} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"$recursiveAnchor\",\n  schemaType: \"boolean\",\n  code(cxt) {\n    if (cxt.schema) dynamicAnchor(cxt, \"\")\n    else checkStrictMode(cxt.it, \"$recursiveAnchor: false is ignored\")\n  },\n}\n\nexport default def\n", "import type {CodeKeywordDefinition} from \"../../types\"\nimport {dynamicRef} from \"./dynamicRef\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"$recursiveRef\",\n  schemaType: \"string\",\n  code: (cxt) => dynamicRef(cxt, cxt.schema),\n}\n\nexport default def\n", "import type {Vocabulary} from \"../../types\"\nimport dynamicAnchor from \"./dynamicAnchor\"\nimport dynamicRef from \"./dynamicRef\"\nimport recursiveAnchor from \"./recursiveAnchor\"\nimport recursiveRef from \"./recursiveRef\"\n\nconst dynamic: Vocabulary = [dynamicAnchor, dynamicRef, recursiveAnchor, recursiveRef]\n\nexport default dynamic\n", "import type {CodeKeywordDefinition, ErrorObject} from \"../../types\"\nimport {\n  validatePropertyDeps,\n  error,\n  DependenciesErrorParams,\n  PropertyDependencies,\n} from \"../applicator/dependencies\"\n\nexport type DependentRequiredError = ErrorObject<\n  \"dependentRequired\",\n  DependenciesErrorParams,\n  PropertyDependencies\n>\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"dependentRequired\",\n  type: \"object\",\n  schemaType: \"object\",\n  error,\n  code: (cxt) => validatePropertyDeps(cxt),\n}\n\nexport default def\n", "import type {CodeKeywordDefinition} from \"../../types\"\nimport {validateSchemaDeps} from \"./dependencies\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"dependentSchemas\",\n  type: \"object\",\n  schemaType: \"object\",\n  code: (cxt) => validateSchemaDeps(cxt),\n}\n\nexport default def\n", "import type {CodeKeywordDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {checkStrictMode} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"maxContains\", \"minContains\"],\n  type: \"array\",\n  schemaType: \"number\",\n  code({keyword, parentSchema, it}: KeywordCxt) {\n    if (parentSchema.contains === undefined) {\n      checkStrictMode(it, `\"${keyword}\" without \"contains\" is ignored`)\n    }\n  },\n}\n\nexport default def\n", "import type {Vocabulary} from \"../types\"\nimport dependentRequired from \"./validation/dependentRequired\"\nimport dependentSchemas from \"./applicator/dependentSchemas\"\nimport limitContains from \"./validation/limitContains\"\n\nconst next: Vocabulary = [dependentRequired, dependentSchemas, limitContains]\n\nexport default next\n", "import type {\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  ErrorObject,\n  AnySchema,\n} from \"../../types\"\nimport {_, not, and, Name, Code} from \"../../compile/codegen\"\nimport {alwaysValidSchema, Type} from \"../../compile/util\"\nimport N from \"../../compile/names\"\n\nexport type UnevaluatedPropertiesError = ErrorObject<\n  \"unevaluatedProperties\",\n  {unevaluatedProperty: string},\n  AnySchema\n>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must NOT have unevaluated properties\",\n  params: ({params}) => _`{unevaluatedProperty: ${params.unevaluatedProperty}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"unevaluatedProperties\",\n  type: \"object\",\n  schemaType: [\"boolean\", \"object\"],\n  trackErrors: true,\n  error,\n  code(cxt) {\n    const {gen, schema, data, errsCount, it} = cxt\n    /* istanbul ignore if */\n    if (!errsCount) throw new Error(\"ajv implementation error\")\n    const {allErrors, props} = it\n    if (props instanceof Name) {\n      gen.if(_`${props} !== true`, () =>\n        gen.forIn(\"key\", data, (key: Name) =>\n          gen.if(unevaluatedDynamic(props, key), () => unevaluatedPropCode(key))\n        )\n      )\n    } else if (props !== true) {\n      gen.forIn(\"key\", data, (key: Name) =>\n        props === undefined\n          ? unevaluatedPropCode(key)\n          : gen.if(unevaluatedStatic(props, key), () => unevaluatedPropCode(key))\n      )\n    }\n    it.props = true\n    cxt.ok(_`${errsCount} === ${N.errors}`)\n\n    function unevaluatedPropCode(key: Name): void {\n      if (schema === false) {\n        cxt.setParams({unevaluatedProperty: key})\n        cxt.error()\n        if (!allErrors) gen.break()\n        return\n      }\n\n      if (!alwaysValidSchema(it, schema)) {\n        const valid = gen.name(\"valid\")\n        cxt.subschema(\n          {\n            keyword: \"unevaluatedProperties\",\n            dataProp: key,\n            dataPropType: Type.Str,\n          },\n          valid\n        )\n        if (!allErrors) gen.if(not(valid), () => gen.break())\n      }\n    }\n\n    function unevaluatedDynamic(evaluatedProps: Name, key: Name): Code {\n      return _`!${evaluatedProps} || !${evaluatedProps}[${key}]`\n    }\n\n    function unevaluatedStatic(evaluatedProps: {[K in string]?: true}, key: Name): Code {\n      const ps: Code[] = []\n      for (const p in evaluatedProps) {\n        if (evaluatedProps[p] === true) ps.push(_`${key} !== ${p}`)\n      }\n      return and(...ps)\n    }\n  },\n}\n\nexport default def\n", "import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, not, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, Type} from \"../../compile/util\"\n\nexport type UnevaluatedItemsError = ErrorObject<\"unevaluatedItems\", {limit: number}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {len}}) => str`must NOT have more than ${len} items`,\n  params: ({params: {len}}) => _`{limit: ${len}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"unevaluatedItems\",\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, data, it} = cxt\n    const items = it.items || 0\n    if (items === true) return\n    const len = gen.const(\"len\", _`${data}.length`)\n    if (schema === false) {\n      cxt.setParams({len: items})\n      cxt.fail(_`${len} > ${items}`)\n    } else if (typeof schema == \"object\" && !alwaysValidSchema(it, schema)) {\n      const valid = gen.var(\"valid\", _`${len} <= ${items}`)\n      gen.if(not(valid), () => validateItems(valid, items))\n      cxt.ok(valid)\n    }\n    it.items = true\n\n    function validateItems(valid: Name, from: Name | number): void {\n      gen.forRange(\"i\", from, len, (i) => {\n        cxt.subschema({keyword: \"unevaluatedItems\", dataProp: i, dataPropType: Type.Num}, valid)\n        if (!it.allErrors) gen.if(not(valid), () => gen.break())\n      })\n    }\n  },\n}\n\nexport default def\n", "import type {Vocabulary} from \"../../types\"\nimport unevaluatedProperties from \"./unevaluatedProperties\"\nimport unevaluatedItems from \"./unevaluatedItems\"\n\nconst unevaluated: Vocabulary = [unevaluatedProperties, unevaluatedItems]\n\nexport default unevaluated\n", "import type {Vocabulary} from \"../types\"\nimport coreVocabulary from \"./core\"\nimport validationVocabulary from \"./validation\"\nimport getApplicatorVocabulary from \"./applicator\"\nimport dynamicVocabulary from \"./dynamic\"\nimport nextVocabulary from \"./next\"\nimport unevaluatedVocabulary from \"./unevaluated\"\nimport formatVocabulary from \"./format\"\nimport {metadataVocabulary, contentVocabulary} from \"./metadata\"\n\nconst draft2020Vocabularies: Vocabulary[] = [\n  dynamicVocabulary,\n  coreVocabulary,\n  validationVocabulary,\n  getApplicatorVocabulary(true),\n  formatVocabulary,\n  metadataVocabulary,\n  contentVocabulary,\n  nextVocabulary,\n  unevaluatedVocabulary,\n]\n\nexport default draft2020Vocabularies\n", "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$vocabulary\": {\n    \"https://json-schema.org/draft/2020-12/vocab/core\": true,\n    \"https://json-schema.org/draft/2020-12/vocab/applicator\": true,\n    \"https://json-schema.org/draft/2020-12/vocab/unevaluated\": true,\n    \"https://json-schema.org/draft/2020-12/vocab/validation\": true,\n    \"https://json-schema.org/draft/2020-12/vocab/meta-data\": true,\n    \"https://json-schema.org/draft/2020-12/vocab/format-annotation\": true,\n    \"https://json-schema.org/draft/2020-12/vocab/content\": true\n  },\n  \"$dynamicAnchor\": \"meta\",\n\n  \"title\": \"Core and Validation specifications meta-schema\",\n  \"allOf\": [\n    {\"$ref\": \"meta/core\"},\n    {\"$ref\": \"meta/applicator\"},\n    {\"$ref\": \"meta/unevaluated\"},\n    {\"$ref\": \"meta/validation\"},\n    {\"$ref\": \"meta/meta-data\"},\n    {\"$ref\": \"meta/format-annotation\"},\n    {\"$ref\": \"meta/content\"}\n  ],\n  \"type\": [\"object\", \"boolean\"],\n  \"$comment\": \"This meta-schema also defines keywords that have appeared in previous drafts in order to prevent incompatible extensions as they remain in common use.\",\n  \"properties\": {\n    \"definitions\": {\n      \"$comment\": \"\\\"definitions\\\" has been replaced by \\\"$defs\\\".\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\"$dynamicRef\": \"#meta\"},\n      \"deprecated\": true,\n      \"default\": {}\n    },\n    \"dependencies\": {\n      \"$comment\": \"\\\"dependencies\\\" has been split and replaced by \\\"dependentSchemas\\\" and \\\"dependentRequired\\\" in order to serve their differing semantics.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"anyOf\": [{\"$dynamicRef\": \"#meta\"}, {\"$ref\": \"meta/validation#/$defs/stringArray\"}]\n      },\n      \"deprecated\": true,\n      \"default\": {}\n    },\n    \"$recursiveAnchor\": {\n      \"$comment\": \"\\\"$recursiveAnchor\\\" has been replaced by \\\"$dynamicAnchor\\\".\",\n      \"$ref\": \"meta/core#/$defs/anchorString\",\n      \"deprecated\": true\n    },\n    \"$recursiveRef\": {\n      \"$comment\": \"\\\"$recursiveRef\\\" has been replaced by \\\"$dynamicRef\\\".\",\n      \"$ref\": \"meta/core#/$defs/uriReferenceString\",\n      \"deprecated\": true\n    }\n  }\n}\n", "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://json-schema.org/draft/2020-12/meta/applicator\",\n  \"$vocabulary\": {\n    \"https://json-schema.org/draft/2020-12/vocab/applicator\": true\n  },\n  \"$dynamicAnchor\": \"meta\",\n\n  \"title\": \"Applicator vocabulary meta-schema\",\n  \"type\": [\"object\", \"boolean\"],\n  \"properties\": {\n    \"prefixItems\": {\"$ref\": \"#/$defs/schemaArray\"},\n    \"items\": {\"$dynamicRef\": \"#meta\"},\n    \"contains\": {\"$dynamicRef\": \"#meta\"},\n    \"additionalProperties\": {\"$dynamicRef\": \"#meta\"},\n    \"properties\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\"$dynamicRef\": \"#meta\"},\n      \"default\": {}\n    },\n    \"patternProperties\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\"$dynamicRef\": \"#meta\"},\n      \"propertyNames\": {\"format\": \"regex\"},\n      \"default\": {}\n    },\n    \"dependentSchemas\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\"$dynamicRef\": \"#meta\"},\n      \"default\": {}\n    },\n    \"propertyNames\": {\"$dynamicRef\": \"#meta\"},\n    \"if\": {\"$dynamicRef\": \"#meta\"},\n    \"then\": {\"$dynamicRef\": \"#meta\"},\n    \"else\": {\"$dynamicRef\": \"#meta\"},\n    \"allOf\": {\"$ref\": \"#/$defs/schemaArray\"},\n    \"anyOf\": {\"$ref\": \"#/$defs/schemaArray\"},\n    \"oneOf\": {\"$ref\": \"#/$defs/schemaArray\"},\n    \"not\": {\"$dynamicRef\": \"#meta\"}\n  },\n  \"$defs\": {\n    \"schemaArray\": {\n      \"type\": \"array\",\n      \"minItems\": 1,\n      \"items\": {\"$dynamicRef\": \"#meta\"}\n    }\n  }\n}\n", "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://json-schema.org/draft/2020-12/meta/unevaluated\",\n  \"$vocabulary\": {\n    \"https://json-schema.org/draft/2020-12/vocab/unevaluated\": true\n  },\n  \"$dynamicAnchor\": \"meta\",\n\n  \"title\": \"Unevaluated applicator vocabulary meta-schema\",\n  \"type\": [\"object\", \"boolean\"],\n  \"properties\": {\n    \"unevaluatedItems\": {\"$dynamicRef\": \"#meta\"},\n    \"unevaluatedProperties\": {\"$dynamicRef\": \"#meta\"}\n  }\n}\n", "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://json-schema.org/draft/2020-12/meta/content\",\n  \"$vocabulary\": {\n    \"https://json-schema.org/draft/2020-12/vocab/content\": true\n  },\n  \"$dynamicAnchor\": \"meta\",\n\n  \"title\": \"Content vocabulary meta-schema\",\n\n  \"type\": [\"object\", \"boolean\"],\n  \"properties\": {\n    \"contentEncoding\": {\"type\": \"string\"},\n    \"contentMediaType\": {\"type\": \"string\"},\n    \"contentSchema\": {\"$dynamicRef\": \"#meta\"}\n  }\n}\n", "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://json-schema.org/draft/2020-12/meta/core\",\n  \"$vocabulary\": {\n    \"https://json-schema.org/draft/2020-12/vocab/core\": true\n  },\n  \"$dynamicAnchor\": \"meta\",\n\n  \"title\": \"Core vocabulary meta-schema\",\n  \"type\": [\"object\", \"boolean\"],\n  \"properties\": {\n    \"$id\": {\n      \"$ref\": \"#/$defs/uriReferenceString\",\n      \"$comment\": \"Non-empty fragments not allowed.\",\n      \"pattern\": \"^[^#]*#?$\"\n    },\n    \"$schema\": {\"$ref\": \"#/$defs/uriString\"},\n    \"$ref\": {\"$ref\": \"#/$defs/uriReferenceString\"},\n    \"$anchor\": {\"$ref\": \"#/$defs/anchorString\"},\n    \"$dynamicRef\": {\"$ref\": \"#/$defs/uriReferenceString\"},\n    \"$dynamicAnchor\": {\"$ref\": \"#/$defs/anchorString\"},\n    \"$vocabulary\": {\n      \"type\": \"object\",\n      \"propertyNames\": {\"$ref\": \"#/$defs/uriString\"},\n      \"additionalProperties\": {\n        \"type\": \"boolean\"\n      }\n    },\n    \"$comment\": {\n      \"type\": \"string\"\n    },\n    \"$defs\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\"$dynamicRef\": \"#meta\"}\n    }\n  },\n  \"$defs\": {\n    \"anchorString\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[A-Za-z_][-A-Za-z0-9._]*$\"\n    },\n    \"uriString\": {\n      \"type\": \"string\",\n      \"format\": \"uri\"\n    },\n    \"uriReferenceString\": {\n      \"type\": \"string\",\n      \"format\": \"uri-reference\"\n    }\n  }\n}\n", "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://json-schema.org/draft/2020-12/meta/format-annotation\",\n  \"$vocabulary\": {\n    \"https://json-schema.org/draft/2020-12/vocab/format-annotation\": true\n  },\n  \"$dynamicAnchor\": \"meta\",\n\n  \"title\": \"Format vocabulary meta-schema for annotation results\",\n  \"type\": [\"object\", \"boolean\"],\n  \"properties\": {\n    \"format\": {\"type\": \"string\"}\n  }\n}\n", "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://json-schema.org/draft/2020-12/meta/meta-data\",\n  \"$vocabulary\": {\n    \"https://json-schema.org/draft/2020-12/vocab/meta-data\": true\n  },\n  \"$dynamicAnchor\": \"meta\",\n\n  \"title\": \"Meta-data vocabulary meta-schema\",\n\n  \"type\": [\"object\", \"boolean\"],\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"default\": true,\n    \"deprecated\": {\n      \"type\": \"boolean\",\n      \"default\": false\n    },\n    \"readOnly\": {\n      \"type\": \"boolean\",\n      \"default\": false\n    },\n    \"writeOnly\": {\n      \"type\": \"boolean\",\n      \"default\": false\n    },\n    \"examples\": {\n      \"type\": \"array\",\n      \"items\": true\n    }\n  }\n}\n", "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://json-schema.org/draft/2020-12/meta/validation\",\n  \"$vocabulary\": {\n    \"https://json-schema.org/draft/2020-12/vocab/validation\": true\n  },\n  \"$dynamicAnchor\": \"meta\",\n\n  \"title\": \"Validation vocabulary meta-schema\",\n  \"type\": [\"object\", \"boolean\"],\n  \"properties\": {\n    \"type\": {\n      \"anyOf\": [\n        {\"$ref\": \"#/$defs/simpleTypes\"},\n        {\n          \"type\": \"array\",\n          \"items\": {\"$ref\": \"#/$defs/simpleTypes\"},\n          \"minItems\": 1,\n          \"uniqueItems\": true\n        }\n      ]\n    },\n    \"const\": true,\n    \"enum\": {\n      \"type\": \"array\",\n      \"items\": true\n    },\n    \"multipleOf\": {\n      \"type\": \"number\",\n      \"exclusiveMinimum\": 0\n    },\n    \"maximum\": {\n      \"type\": \"number\"\n    },\n    \"exclusiveMaximum\": {\n      \"type\": \"number\"\n    },\n    \"minimum\": {\n      \"type\": \"number\"\n    },\n    \"exclusiveMinimum\": {\n      \"type\": \"number\"\n    },\n    \"maxLength\": {\"$ref\": \"#/$defs/nonNegativeInteger\"},\n    \"minLength\": {\"$ref\": \"#/$defs/nonNegativeIntegerDefault0\"},\n    \"pattern\": {\n      \"type\": \"string\",\n      \"format\": \"regex\"\n    },\n    \"maxItems\": {\"$ref\": \"#/$defs/nonNegativeInteger\"},\n    \"minItems\": {\"$ref\": \"#/$defs/nonNegativeIntegerDefault0\"},\n    \"uniqueItems\": {\n      \"type\": \"boolean\",\n      \"default\": false\n    },\n    \"maxContains\": {\"$ref\": \"#/$defs/nonNegativeInteger\"},\n    \"minContains\": {\n      \"$ref\": \"#/$defs/nonNegativeInteger\",\n      \"default\": 1\n    },\n    \"maxProperties\": {\"$ref\": \"#/$defs/nonNegativeInteger\"},\n    \"minProperties\": {\"$ref\": \"#/$defs/nonNegativeIntegerDefault0\"},\n    \"required\": {\"$ref\": \"#/$defs/stringArray\"},\n    \"dependentRequired\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"$ref\": \"#/$defs/stringArray\"\n      }\n    }\n  },\n  \"$defs\": {\n    \"nonNegativeInteger\": {\n      \"type\": \"integer\",\n      \"minimum\": 0\n    },\n    \"nonNegativeIntegerDefault0\": {\n      \"$ref\": \"#/$defs/nonNegativeInteger\",\n      \"default\": 0\n    },\n    \"simpleTypes\": {\n      \"enum\": [\"array\", \"boolean\", \"integer\", \"null\", \"number\", \"object\", \"string\"]\n    },\n    \"stringArray\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"},\n      \"uniqueItems\": true,\n      \"default\": []\n    }\n  }\n}\n", "import type Ajv from \"../../core\"\nimport type {AnySchemaObject} from \"../../types\"\nimport * as metaSchema from \"./schema.json\"\nimport * as applicator from \"./meta/applicator.json\"\nimport * as unevaluated from \"./meta/unevaluated.json\"\nimport * as content from \"./meta/content.json\"\nimport * as core from \"./meta/core.json\"\nimport * as format from \"./meta/format-annotation.json\"\nimport * as metadata from \"./meta/meta-data.json\"\nimport * as validation from \"./meta/validation.json\"\n\nconst META_SUPPORT_DATA = [\"/properties\"]\n\nexport default function addMetaSchema2020(this: Ajv, $data?: boolean): Ajv {\n  ;[\n    metaSchema,\n    applicator,\n    unevaluated,\n    content,\n    core,\n    with$data(this, format),\n    metadata,\n    with$data(this, validation),\n  ].forEach((sch) => this.addMetaSchema(sch, undefined, false))\n  return this\n\n  function with$data(ajv: Ajv, sch: AnySchemaObject): AnySchemaObject {\n    return $data ? ajv.$dataMetaSchema(sch, META_SUPPORT_DATA) : sch\n  }\n}\n", "import type {AnySchemaObject} from \"./types\"\nimport AjvCore, {Options} from \"./core\"\n\nimport draft2020Vocabularies from \"./vocabularies/draft2020\"\nimport discriminator from \"./vocabularies/discriminator\"\nimport addMetaSchema2020 from \"./refs/json-schema-2020-12\"\n\nconst META_SCHEMA_ID = \"https://json-schema.org/draft/2020-12/schema\"\n\nexport class Ajv2020 extends AjvCore {\n  constructor(opts: Options = {}) {\n    super({\n      ...opts,\n      dynamicRef: true,\n      next: true,\n      unevaluated: true,\n    })\n  }\n\n  _addVocabularies(): void {\n    super._addVocabularies()\n    draft2020Vocabularies.forEach((v) => this.addVocabulary(v))\n    if (this.opts.discriminator) this.addKeyword(discriminator)\n  }\n\n  _addDefaultMetaSchema(): void {\n    super._addDefaultMetaSchema()\n    const {$data, meta} = this.opts\n    if (!meta) return\n    addMetaSchema2020.call(this, $data)\n    this.refs[\"http://json-schema.org/schema\"] = META_SCHEMA_ID\n  }\n\n  defaultMeta(): string | AnySchemaObject | undefined {\n    return (this.opts.defaultMeta =\n      super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined))\n  }\n}\n\nmodule.exports = exports = Ajv2020\nmodule.exports.Ajv2020 = Ajv2020\nObject.defineProperty(exports, \"__esModule\", {value: true})\n\nexport default Ajv2020\n\nexport {\n  Format,\n  FormatDefinition,\n  AsyncFormatDefinition,\n  KeywordDefinition,\n  KeywordErrorDefinition,\n  CodeKeywordDefinition,\n  MacroKeywordDefinition,\n  FuncKeywordDefinition,\n  Vocabulary,\n  Schema,\n  SchemaObject,\n  AnySchemaObject,\n  AsyncSchema,\n  AnySchema,\n  ValidateFunction,\n  AsyncValidateFunction,\n  ErrorObject,\n  ErrorNoParams,\n} from \"./types\"\n\nexport {Plugin, Options, CodeOptions, InstanceOptions, Logger, ErrorsTextOptions} from \"./core\"\nexport {SchemaCxt, SchemaObjCxt} from \"./compile\"\nexport {KeywordCxt} from \"./compile/validate\"\nexport {DefinedError} from \"./vocabularies/errors\"\nexport {JSONType} from \"./compile/rules\"\nexport {JSONSchemaType} from \"./types/json-schema\"\nexport {_, str, stringify, nil, Name, Code, CodeGen, CodeGenOptions} from \"./compile/codegen\"\nexport {default as ValidationError} from \"./runtime/validation_error\"\nexport {default as MissingRefError} from \"./compile/ref_error\"\n"],
  "mappings": "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",
  "names": ["require_applicator", "require_unevaluated", "require_core", "require_validation"]
}
