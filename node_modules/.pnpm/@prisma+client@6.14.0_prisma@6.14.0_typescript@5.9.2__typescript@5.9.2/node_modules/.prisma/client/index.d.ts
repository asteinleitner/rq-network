
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Org
 * 
 */
export type Org = $Result.DefaultSelection<Prisma.$OrgPayload>
/**
 * Model Network
 * 
 */
export type Network = $Result.DefaultSelection<Prisma.$NetworkPayload>
/**
 * Model Practice
 * 
 */
export type Practice = $Result.DefaultSelection<Prisma.$PracticePayload>
/**
 * Model PracticeKey
 * 
 */
export type PracticeKey = $Result.DefaultSelection<Prisma.$PracticeKeyPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model CareEpisode
 * 
 */
export type CareEpisode = $Result.DefaultSelection<Prisma.$CareEpisodePayload>
/**
 * Model Bundle
 * 
 */
export type Bundle = $Result.DefaultSelection<Prisma.$BundlePayload>
/**
 * Model Submission
 * 
 */
export type Submission = $Result.DefaultSelection<Prisma.$SubmissionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model OrgMembership
 * 
 */
export type OrgMembership = $Result.DefaultSelection<Prisma.$OrgMembershipPayload>
/**
 * Model NetworkMembership
 * 
 */
export type NetworkMembership = $Result.DefaultSelection<Prisma.$NetworkMembershipPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const OrgRole: {
  ORG_OWNER: 'ORG_OWNER',
  ORG_MEMBER: 'ORG_MEMBER',
  ORG_READONLY: 'ORG_READONLY'
};

export type OrgRole = (typeof OrgRole)[keyof typeof OrgRole]


export const NetworkRole: {
  NETWORK_ADMIN: 'NETWORK_ADMIN',
  NETWORK_MEMBER: 'NETWORK_MEMBER',
  NETWORK_READONLY: 'NETWORK_READONLY'
};

export type NetworkRole = (typeof NetworkRole)[keyof typeof NetworkRole]

}

export type OrgRole = $Enums.OrgRole

export const OrgRole: typeof $Enums.OrgRole

export type NetworkRole = $Enums.NetworkRole

export const NetworkRole: typeof $Enums.NetworkRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Orgs
 * const orgs = await prisma.org.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Orgs
   * const orgs = await prisma.org.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.org`: Exposes CRUD operations for the **Org** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orgs
    * const orgs = await prisma.org.findMany()
    * ```
    */
  get org(): Prisma.OrgDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.network`: Exposes CRUD operations for the **Network** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Networks
    * const networks = await prisma.network.findMany()
    * ```
    */
  get network(): Prisma.NetworkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.practice`: Exposes CRUD operations for the **Practice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Practices
    * const practices = await prisma.practice.findMany()
    * ```
    */
  get practice(): Prisma.PracticeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.practiceKey`: Exposes CRUD operations for the **PracticeKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PracticeKeys
    * const practiceKeys = await prisma.practiceKey.findMany()
    * ```
    */
  get practiceKey(): Prisma.PracticeKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.careEpisode`: Exposes CRUD operations for the **CareEpisode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CareEpisodes
    * const careEpisodes = await prisma.careEpisode.findMany()
    * ```
    */
  get careEpisode(): Prisma.CareEpisodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bundle`: Exposes CRUD operations for the **Bundle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bundles
    * const bundles = await prisma.bundle.findMany()
    * ```
    */
  get bundle(): Prisma.BundleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **Submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.SubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orgMembership`: Exposes CRUD operations for the **OrgMembership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrgMemberships
    * const orgMemberships = await prisma.orgMembership.findMany()
    * ```
    */
  get orgMembership(): Prisma.OrgMembershipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.networkMembership`: Exposes CRUD operations for the **NetworkMembership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NetworkMemberships
    * const networkMemberships = await prisma.networkMembership.findMany()
    * ```
    */
  get networkMembership(): Prisma.NetworkMembershipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Org: 'Org',
    Network: 'Network',
    Practice: 'Practice',
    PracticeKey: 'PracticeKey',
    Patient: 'Patient',
    CareEpisode: 'CareEpisode',
    Bundle: 'Bundle',
    Submission: 'Submission',
    User: 'User',
    OrgMembership: 'OrgMembership',
    NetworkMembership: 'NetworkMembership',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "org" | "network" | "practice" | "practiceKey" | "patient" | "careEpisode" | "bundle" | "submission" | "user" | "orgMembership" | "networkMembership" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Org: {
        payload: Prisma.$OrgPayload<ExtArgs>
        fields: Prisma.OrgFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrgFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrgFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgPayload>
          }
          findFirst: {
            args: Prisma.OrgFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrgFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgPayload>
          }
          findMany: {
            args: Prisma.OrgFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgPayload>[]
          }
          create: {
            args: Prisma.OrgCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgPayload>
          }
          createMany: {
            args: Prisma.OrgCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrgCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgPayload>[]
          }
          delete: {
            args: Prisma.OrgDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgPayload>
          }
          update: {
            args: Prisma.OrgUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgPayload>
          }
          deleteMany: {
            args: Prisma.OrgDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrgUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrgUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgPayload>[]
          }
          upsert: {
            args: Prisma.OrgUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgPayload>
          }
          aggregate: {
            args: Prisma.OrgAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrg>
          }
          groupBy: {
            args: Prisma.OrgGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrgGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrgCountArgs<ExtArgs>
            result: $Utils.Optional<OrgCountAggregateOutputType> | number
          }
        }
      }
      Network: {
        payload: Prisma.$NetworkPayload<ExtArgs>
        fields: Prisma.NetworkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NetworkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NetworkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkPayload>
          }
          findFirst: {
            args: Prisma.NetworkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NetworkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkPayload>
          }
          findMany: {
            args: Prisma.NetworkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkPayload>[]
          }
          create: {
            args: Prisma.NetworkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkPayload>
          }
          createMany: {
            args: Prisma.NetworkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NetworkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkPayload>[]
          }
          delete: {
            args: Prisma.NetworkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkPayload>
          }
          update: {
            args: Prisma.NetworkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkPayload>
          }
          deleteMany: {
            args: Prisma.NetworkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NetworkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NetworkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkPayload>[]
          }
          upsert: {
            args: Prisma.NetworkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkPayload>
          }
          aggregate: {
            args: Prisma.NetworkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNetwork>
          }
          groupBy: {
            args: Prisma.NetworkGroupByArgs<ExtArgs>
            result: $Utils.Optional<NetworkGroupByOutputType>[]
          }
          count: {
            args: Prisma.NetworkCountArgs<ExtArgs>
            result: $Utils.Optional<NetworkCountAggregateOutputType> | number
          }
        }
      }
      Practice: {
        payload: Prisma.$PracticePayload<ExtArgs>
        fields: Prisma.PracticeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PracticeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PracticeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          findFirst: {
            args: Prisma.PracticeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PracticeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          findMany: {
            args: Prisma.PracticeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>[]
          }
          create: {
            args: Prisma.PracticeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          createMany: {
            args: Prisma.PracticeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PracticeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>[]
          }
          delete: {
            args: Prisma.PracticeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          update: {
            args: Prisma.PracticeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          deleteMany: {
            args: Prisma.PracticeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PracticeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PracticeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>[]
          }
          upsert: {
            args: Prisma.PracticeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          aggregate: {
            args: Prisma.PracticeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePractice>
          }
          groupBy: {
            args: Prisma.PracticeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PracticeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PracticeCountArgs<ExtArgs>
            result: $Utils.Optional<PracticeCountAggregateOutputType> | number
          }
        }
      }
      PracticeKey: {
        payload: Prisma.$PracticeKeyPayload<ExtArgs>
        fields: Prisma.PracticeKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PracticeKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PracticeKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeKeyPayload>
          }
          findFirst: {
            args: Prisma.PracticeKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PracticeKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeKeyPayload>
          }
          findMany: {
            args: Prisma.PracticeKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeKeyPayload>[]
          }
          create: {
            args: Prisma.PracticeKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeKeyPayload>
          }
          createMany: {
            args: Prisma.PracticeKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PracticeKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeKeyPayload>[]
          }
          delete: {
            args: Prisma.PracticeKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeKeyPayload>
          }
          update: {
            args: Prisma.PracticeKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeKeyPayload>
          }
          deleteMany: {
            args: Prisma.PracticeKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PracticeKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PracticeKeyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeKeyPayload>[]
          }
          upsert: {
            args: Prisma.PracticeKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeKeyPayload>
          }
          aggregate: {
            args: Prisma.PracticeKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePracticeKey>
          }
          groupBy: {
            args: Prisma.PracticeKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PracticeKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PracticeKeyCountArgs<ExtArgs>
            result: $Utils.Optional<PracticeKeyCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      CareEpisode: {
        payload: Prisma.$CareEpisodePayload<ExtArgs>
        fields: Prisma.CareEpisodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CareEpisodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareEpisodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CareEpisodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareEpisodePayload>
          }
          findFirst: {
            args: Prisma.CareEpisodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareEpisodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CareEpisodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareEpisodePayload>
          }
          findMany: {
            args: Prisma.CareEpisodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareEpisodePayload>[]
          }
          create: {
            args: Prisma.CareEpisodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareEpisodePayload>
          }
          createMany: {
            args: Prisma.CareEpisodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CareEpisodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareEpisodePayload>[]
          }
          delete: {
            args: Prisma.CareEpisodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareEpisodePayload>
          }
          update: {
            args: Prisma.CareEpisodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareEpisodePayload>
          }
          deleteMany: {
            args: Prisma.CareEpisodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CareEpisodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CareEpisodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareEpisodePayload>[]
          }
          upsert: {
            args: Prisma.CareEpisodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareEpisodePayload>
          }
          aggregate: {
            args: Prisma.CareEpisodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCareEpisode>
          }
          groupBy: {
            args: Prisma.CareEpisodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CareEpisodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CareEpisodeCountArgs<ExtArgs>
            result: $Utils.Optional<CareEpisodeCountAggregateOutputType> | number
          }
        }
      }
      Bundle: {
        payload: Prisma.$BundlePayload<ExtArgs>
        fields: Prisma.BundleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BundleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BundlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BundleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BundlePayload>
          }
          findFirst: {
            args: Prisma.BundleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BundlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BundleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BundlePayload>
          }
          findMany: {
            args: Prisma.BundleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BundlePayload>[]
          }
          create: {
            args: Prisma.BundleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BundlePayload>
          }
          createMany: {
            args: Prisma.BundleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BundleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BundlePayload>[]
          }
          delete: {
            args: Prisma.BundleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BundlePayload>
          }
          update: {
            args: Prisma.BundleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BundlePayload>
          }
          deleteMany: {
            args: Prisma.BundleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BundleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BundleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BundlePayload>[]
          }
          upsert: {
            args: Prisma.BundleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BundlePayload>
          }
          aggregate: {
            args: Prisma.BundleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBundle>
          }
          groupBy: {
            args: Prisma.BundleGroupByArgs<ExtArgs>
            result: $Utils.Optional<BundleGroupByOutputType>[]
          }
          count: {
            args: Prisma.BundleCountArgs<ExtArgs>
            result: $Utils.Optional<BundleCountAggregateOutputType> | number
          }
        }
      }
      Submission: {
        payload: Prisma.$SubmissionPayload<ExtArgs>
        fields: Prisma.SubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findFirst: {
            args: Prisma.SubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findMany: {
            args: Prisma.SubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          create: {
            args: Prisma.SubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          createMany: {
            args: Prisma.SubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          delete: {
            args: Prisma.SubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          update: {
            args: Prisma.SubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          upsert: {
            args: Prisma.SubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          aggregate: {
            args: Prisma.SubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmission>
          }
          groupBy: {
            args: Prisma.SubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      OrgMembership: {
        payload: Prisma.$OrgMembershipPayload<ExtArgs>
        fields: Prisma.OrgMembershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrgMembershipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMembershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrgMembershipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMembershipPayload>
          }
          findFirst: {
            args: Prisma.OrgMembershipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMembershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrgMembershipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMembershipPayload>
          }
          findMany: {
            args: Prisma.OrgMembershipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMembershipPayload>[]
          }
          create: {
            args: Prisma.OrgMembershipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMembershipPayload>
          }
          createMany: {
            args: Prisma.OrgMembershipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrgMembershipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMembershipPayload>[]
          }
          delete: {
            args: Prisma.OrgMembershipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMembershipPayload>
          }
          update: {
            args: Prisma.OrgMembershipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMembershipPayload>
          }
          deleteMany: {
            args: Prisma.OrgMembershipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrgMembershipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrgMembershipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMembershipPayload>[]
          }
          upsert: {
            args: Prisma.OrgMembershipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMembershipPayload>
          }
          aggregate: {
            args: Prisma.OrgMembershipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrgMembership>
          }
          groupBy: {
            args: Prisma.OrgMembershipGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrgMembershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrgMembershipCountArgs<ExtArgs>
            result: $Utils.Optional<OrgMembershipCountAggregateOutputType> | number
          }
        }
      }
      NetworkMembership: {
        payload: Prisma.$NetworkMembershipPayload<ExtArgs>
        fields: Prisma.NetworkMembershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NetworkMembershipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkMembershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NetworkMembershipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkMembershipPayload>
          }
          findFirst: {
            args: Prisma.NetworkMembershipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkMembershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NetworkMembershipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkMembershipPayload>
          }
          findMany: {
            args: Prisma.NetworkMembershipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkMembershipPayload>[]
          }
          create: {
            args: Prisma.NetworkMembershipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkMembershipPayload>
          }
          createMany: {
            args: Prisma.NetworkMembershipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NetworkMembershipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkMembershipPayload>[]
          }
          delete: {
            args: Prisma.NetworkMembershipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkMembershipPayload>
          }
          update: {
            args: Prisma.NetworkMembershipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkMembershipPayload>
          }
          deleteMany: {
            args: Prisma.NetworkMembershipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NetworkMembershipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NetworkMembershipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkMembershipPayload>[]
          }
          upsert: {
            args: Prisma.NetworkMembershipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NetworkMembershipPayload>
          }
          aggregate: {
            args: Prisma.NetworkMembershipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNetworkMembership>
          }
          groupBy: {
            args: Prisma.NetworkMembershipGroupByArgs<ExtArgs>
            result: $Utils.Optional<NetworkMembershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.NetworkMembershipCountArgs<ExtArgs>
            result: $Utils.Optional<NetworkMembershipCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    org?: OrgOmit
    network?: NetworkOmit
    practice?: PracticeOmit
    practiceKey?: PracticeKeyOmit
    patient?: PatientOmit
    careEpisode?: CareEpisodeOmit
    bundle?: BundleOmit
    submission?: SubmissionOmit
    user?: UserOmit
    orgMembership?: OrgMembershipOmit
    networkMembership?: NetworkMembershipOmit
    auditLog?: AuditLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrgCountOutputType
   */

  export type OrgCountOutputType = {
    networks: number
    orgMemberships: number
    auditLogs: number
  }

  export type OrgCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    networks?: boolean | OrgCountOutputTypeCountNetworksArgs
    orgMemberships?: boolean | OrgCountOutputTypeCountOrgMembershipsArgs
    auditLogs?: boolean | OrgCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * OrgCountOutputType without action
   */
  export type OrgCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgCountOutputType
     */
    select?: OrgCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrgCountOutputType without action
   */
  export type OrgCountOutputTypeCountNetworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NetworkWhereInput
  }

  /**
   * OrgCountOutputType without action
   */
  export type OrgCountOutputTypeCountOrgMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrgMembershipWhereInput
  }

  /**
   * OrgCountOutputType without action
   */
  export type OrgCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type NetworkCountOutputType
   */

  export type NetworkCountOutputType = {
    practices: number
    bundles: number
    networkMemberships: number
    auditLogs: number
  }

  export type NetworkCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practices?: boolean | NetworkCountOutputTypeCountPracticesArgs
    bundles?: boolean | NetworkCountOutputTypeCountBundlesArgs
    networkMemberships?: boolean | NetworkCountOutputTypeCountNetworkMembershipsArgs
    auditLogs?: boolean | NetworkCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * NetworkCountOutputType without action
   */
  export type NetworkCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkCountOutputType
     */
    select?: NetworkCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NetworkCountOutputType without action
   */
  export type NetworkCountOutputTypeCountPracticesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeWhereInput
  }

  /**
   * NetworkCountOutputType without action
   */
  export type NetworkCountOutputTypeCountBundlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BundleWhereInput
  }

  /**
   * NetworkCountOutputType without action
   */
  export type NetworkCountOutputTypeCountNetworkMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NetworkMembershipWhereInput
  }

  /**
   * NetworkCountOutputType without action
   */
  export type NetworkCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type PracticeCountOutputType
   */

  export type PracticeCountOutputType = {
    keys: number
    careEpisodes: number
  }

  export type PracticeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keys?: boolean | PracticeCountOutputTypeCountKeysArgs
    careEpisodes?: boolean | PracticeCountOutputTypeCountCareEpisodesArgs
  }

  // Custom InputTypes
  /**
   * PracticeCountOutputType without action
   */
  export type PracticeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeCountOutputType
     */
    select?: PracticeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PracticeCountOutputType without action
   */
  export type PracticeCountOutputTypeCountKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeKeyWhereInput
  }

  /**
   * PracticeCountOutputType without action
   */
  export type PracticeCountOutputTypeCountCareEpisodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CareEpisodeWhereInput
  }


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    submissions: number
    careEpisodes: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | PatientCountOutputTypeCountSubmissionsArgs
    careEpisodes?: boolean | PatientCountOutputTypeCountCareEpisodesArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountCareEpisodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CareEpisodeWhereInput
  }


  /**
   * Count Type BundleCountOutputType
   */

  export type BundleCountOutputType = {
    submissions: number
    networksAsCurrent: number
  }

  export type BundleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | BundleCountOutputTypeCountSubmissionsArgs
    networksAsCurrent?: boolean | BundleCountOutputTypeCountNetworksAsCurrentArgs
  }

  // Custom InputTypes
  /**
   * BundleCountOutputType without action
   */
  export type BundleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BundleCountOutputType
     */
    select?: BundleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BundleCountOutputType without action
   */
  export type BundleCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * BundleCountOutputType without action
   */
  export type BundleCountOutputTypeCountNetworksAsCurrentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NetworkWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    orgMemberships: number
    networkMemberships: number
    auditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orgMemberships?: boolean | UserCountOutputTypeCountOrgMembershipsArgs
    networkMemberships?: boolean | UserCountOutputTypeCountNetworkMembershipsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrgMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrgMembershipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNetworkMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NetworkMembershipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Org
   */

  export type AggregateOrg = {
    _count: OrgCountAggregateOutputType | null
    _min: OrgMinAggregateOutputType | null
    _max: OrgMaxAggregateOutputType | null
  }

  export type OrgMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
  }

  export type OrgMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
  }

  export type OrgCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type OrgMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type OrgMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type OrgCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type OrgAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Org to aggregate.
     */
    where?: OrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orgs to fetch.
     */
    orderBy?: OrgOrderByWithRelationInput | OrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orgs
    **/
    _count?: true | OrgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrgMaxAggregateInputType
  }

  export type GetOrgAggregateType<T extends OrgAggregateArgs> = {
        [P in keyof T & keyof AggregateOrg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrg[P]>
      : GetScalarType<T[P], AggregateOrg[P]>
  }




  export type OrgGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrgWhereInput
    orderBy?: OrgOrderByWithAggregationInput | OrgOrderByWithAggregationInput[]
    by: OrgScalarFieldEnum[] | OrgScalarFieldEnum
    having?: OrgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrgCountAggregateInputType | true
    _min?: OrgMinAggregateInputType
    _max?: OrgMaxAggregateInputType
  }

  export type OrgGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    _count: OrgCountAggregateOutputType | null
    _min: OrgMinAggregateOutputType | null
    _max: OrgMaxAggregateOutputType | null
  }

  type GetOrgGroupByPayload<T extends OrgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrgGroupByOutputType[P]>
            : GetScalarType<T[P], OrgGroupByOutputType[P]>
        }
      >
    >


  export type OrgSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    networks?: boolean | Org$networksArgs<ExtArgs>
    orgMemberships?: boolean | Org$orgMembershipsArgs<ExtArgs>
    auditLogs?: boolean | Org$auditLogsArgs<ExtArgs>
    _count?: boolean | OrgCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["org"]>

  export type OrgSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["org"]>

  export type OrgSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["org"]>

  export type OrgSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type OrgOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt", ExtArgs["result"]["org"]>
  export type OrgInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    networks?: boolean | Org$networksArgs<ExtArgs>
    orgMemberships?: boolean | Org$orgMembershipsArgs<ExtArgs>
    auditLogs?: boolean | Org$auditLogsArgs<ExtArgs>
    _count?: boolean | OrgCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrgIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrgIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrgPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Org"
    objects: {
      networks: Prisma.$NetworkPayload<ExtArgs>[]
      orgMemberships: Prisma.$OrgMembershipPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
    }, ExtArgs["result"]["org"]>
    composites: {}
  }

  type OrgGetPayload<S extends boolean | null | undefined | OrgDefaultArgs> = $Result.GetResult<Prisma.$OrgPayload, S>

  type OrgCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrgFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrgCountAggregateInputType | true
    }

  export interface OrgDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Org'], meta: { name: 'Org' } }
    /**
     * Find zero or one Org that matches the filter.
     * @param {OrgFindUniqueArgs} args - Arguments to find a Org
     * @example
     * // Get one Org
     * const org = await prisma.org.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrgFindUniqueArgs>(args: SelectSubset<T, OrgFindUniqueArgs<ExtArgs>>): Prisma__OrgClient<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Org that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrgFindUniqueOrThrowArgs} args - Arguments to find a Org
     * @example
     * // Get one Org
     * const org = await prisma.org.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrgFindUniqueOrThrowArgs>(args: SelectSubset<T, OrgFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrgClient<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Org that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgFindFirstArgs} args - Arguments to find a Org
     * @example
     * // Get one Org
     * const org = await prisma.org.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrgFindFirstArgs>(args?: SelectSubset<T, OrgFindFirstArgs<ExtArgs>>): Prisma__OrgClient<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Org that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgFindFirstOrThrowArgs} args - Arguments to find a Org
     * @example
     * // Get one Org
     * const org = await prisma.org.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrgFindFirstOrThrowArgs>(args?: SelectSubset<T, OrgFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrgClient<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orgs
     * const orgs = await prisma.org.findMany()
     * 
     * // Get first 10 Orgs
     * const orgs = await prisma.org.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orgWithIdOnly = await prisma.org.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrgFindManyArgs>(args?: SelectSubset<T, OrgFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Org.
     * @param {OrgCreateArgs} args - Arguments to create a Org.
     * @example
     * // Create one Org
     * const Org = await prisma.org.create({
     *   data: {
     *     // ... data to create a Org
     *   }
     * })
     * 
     */
    create<T extends OrgCreateArgs>(args: SelectSubset<T, OrgCreateArgs<ExtArgs>>): Prisma__OrgClient<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orgs.
     * @param {OrgCreateManyArgs} args - Arguments to create many Orgs.
     * @example
     * // Create many Orgs
     * const org = await prisma.org.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrgCreateManyArgs>(args?: SelectSubset<T, OrgCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orgs and returns the data saved in the database.
     * @param {OrgCreateManyAndReturnArgs} args - Arguments to create many Orgs.
     * @example
     * // Create many Orgs
     * const org = await prisma.org.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orgs and only return the `id`
     * const orgWithIdOnly = await prisma.org.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrgCreateManyAndReturnArgs>(args?: SelectSubset<T, OrgCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Org.
     * @param {OrgDeleteArgs} args - Arguments to delete one Org.
     * @example
     * // Delete one Org
     * const Org = await prisma.org.delete({
     *   where: {
     *     // ... filter to delete one Org
     *   }
     * })
     * 
     */
    delete<T extends OrgDeleteArgs>(args: SelectSubset<T, OrgDeleteArgs<ExtArgs>>): Prisma__OrgClient<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Org.
     * @param {OrgUpdateArgs} args - Arguments to update one Org.
     * @example
     * // Update one Org
     * const org = await prisma.org.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrgUpdateArgs>(args: SelectSubset<T, OrgUpdateArgs<ExtArgs>>): Prisma__OrgClient<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orgs.
     * @param {OrgDeleteManyArgs} args - Arguments to filter Orgs to delete.
     * @example
     * // Delete a few Orgs
     * const { count } = await prisma.org.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrgDeleteManyArgs>(args?: SelectSubset<T, OrgDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orgs
     * const org = await prisma.org.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrgUpdateManyArgs>(args: SelectSubset<T, OrgUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orgs and returns the data updated in the database.
     * @param {OrgUpdateManyAndReturnArgs} args - Arguments to update many Orgs.
     * @example
     * // Update many Orgs
     * const org = await prisma.org.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orgs and only return the `id`
     * const orgWithIdOnly = await prisma.org.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrgUpdateManyAndReturnArgs>(args: SelectSubset<T, OrgUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Org.
     * @param {OrgUpsertArgs} args - Arguments to update or create a Org.
     * @example
     * // Update or create a Org
     * const org = await prisma.org.upsert({
     *   create: {
     *     // ... data to create a Org
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Org we want to update
     *   }
     * })
     */
    upsert<T extends OrgUpsertArgs>(args: SelectSubset<T, OrgUpsertArgs<ExtArgs>>): Prisma__OrgClient<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgCountArgs} args - Arguments to filter Orgs to count.
     * @example
     * // Count the number of Orgs
     * const count = await prisma.org.count({
     *   where: {
     *     // ... the filter for the Orgs we want to count
     *   }
     * })
    **/
    count<T extends OrgCountArgs>(
      args?: Subset<T, OrgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Org.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrgAggregateArgs>(args: Subset<T, OrgAggregateArgs>): Prisma.PrismaPromise<GetOrgAggregateType<T>>

    /**
     * Group by Org.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrgGroupByArgs['orderBy'] }
        : { orderBy?: OrgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Org model
   */
  readonly fields: OrgFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Org.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrgClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    networks<T extends Org$networksArgs<ExtArgs> = {}>(args?: Subset<T, Org$networksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orgMemberships<T extends Org$orgMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, Org$orgMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends Org$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Org$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Org model
   */
  interface OrgFieldRefs {
    readonly id: FieldRef<"Org", 'String'>
    readonly name: FieldRef<"Org", 'String'>
    readonly createdAt: FieldRef<"Org", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Org findUnique
   */
  export type OrgFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgInclude<ExtArgs> | null
    /**
     * Filter, which Org to fetch.
     */
    where: OrgWhereUniqueInput
  }

  /**
   * Org findUniqueOrThrow
   */
  export type OrgFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgInclude<ExtArgs> | null
    /**
     * Filter, which Org to fetch.
     */
    where: OrgWhereUniqueInput
  }

  /**
   * Org findFirst
   */
  export type OrgFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgInclude<ExtArgs> | null
    /**
     * Filter, which Org to fetch.
     */
    where?: OrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orgs to fetch.
     */
    orderBy?: OrgOrderByWithRelationInput | OrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orgs.
     */
    cursor?: OrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orgs.
     */
    distinct?: OrgScalarFieldEnum | OrgScalarFieldEnum[]
  }

  /**
   * Org findFirstOrThrow
   */
  export type OrgFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgInclude<ExtArgs> | null
    /**
     * Filter, which Org to fetch.
     */
    where?: OrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orgs to fetch.
     */
    orderBy?: OrgOrderByWithRelationInput | OrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orgs.
     */
    cursor?: OrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orgs.
     */
    distinct?: OrgScalarFieldEnum | OrgScalarFieldEnum[]
  }

  /**
   * Org findMany
   */
  export type OrgFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgInclude<ExtArgs> | null
    /**
     * Filter, which Orgs to fetch.
     */
    where?: OrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orgs to fetch.
     */
    orderBy?: OrgOrderByWithRelationInput | OrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orgs.
     */
    cursor?: OrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orgs.
     */
    skip?: number
    distinct?: OrgScalarFieldEnum | OrgScalarFieldEnum[]
  }

  /**
   * Org create
   */
  export type OrgCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgInclude<ExtArgs> | null
    /**
     * The data needed to create a Org.
     */
    data: XOR<OrgCreateInput, OrgUncheckedCreateInput>
  }

  /**
   * Org createMany
   */
  export type OrgCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orgs.
     */
    data: OrgCreateManyInput | OrgCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Org createManyAndReturn
   */
  export type OrgCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * The data used to create many Orgs.
     */
    data: OrgCreateManyInput | OrgCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Org update
   */
  export type OrgUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgInclude<ExtArgs> | null
    /**
     * The data needed to update a Org.
     */
    data: XOR<OrgUpdateInput, OrgUncheckedUpdateInput>
    /**
     * Choose, which Org to update.
     */
    where: OrgWhereUniqueInput
  }

  /**
   * Org updateMany
   */
  export type OrgUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orgs.
     */
    data: XOR<OrgUpdateManyMutationInput, OrgUncheckedUpdateManyInput>
    /**
     * Filter which Orgs to update
     */
    where?: OrgWhereInput
    /**
     * Limit how many Orgs to update.
     */
    limit?: number
  }

  /**
   * Org updateManyAndReturn
   */
  export type OrgUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * The data used to update Orgs.
     */
    data: XOR<OrgUpdateManyMutationInput, OrgUncheckedUpdateManyInput>
    /**
     * Filter which Orgs to update
     */
    where?: OrgWhereInput
    /**
     * Limit how many Orgs to update.
     */
    limit?: number
  }

  /**
   * Org upsert
   */
  export type OrgUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgInclude<ExtArgs> | null
    /**
     * The filter to search for the Org to update in case it exists.
     */
    where: OrgWhereUniqueInput
    /**
     * In case the Org found by the `where` argument doesn't exist, create a new Org with this data.
     */
    create: XOR<OrgCreateInput, OrgUncheckedCreateInput>
    /**
     * In case the Org was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrgUpdateInput, OrgUncheckedUpdateInput>
  }

  /**
   * Org delete
   */
  export type OrgDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgInclude<ExtArgs> | null
    /**
     * Filter which Org to delete.
     */
    where: OrgWhereUniqueInput
  }

  /**
   * Org deleteMany
   */
  export type OrgDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orgs to delete
     */
    where?: OrgWhereInput
    /**
     * Limit how many Orgs to delete.
     */
    limit?: number
  }

  /**
   * Org.networks
   */
  export type Org$networksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    where?: NetworkWhereInput
    orderBy?: NetworkOrderByWithRelationInput | NetworkOrderByWithRelationInput[]
    cursor?: NetworkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NetworkScalarFieldEnum | NetworkScalarFieldEnum[]
  }

  /**
   * Org.orgMemberships
   */
  export type Org$orgMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
    where?: OrgMembershipWhereInput
    orderBy?: OrgMembershipOrderByWithRelationInput | OrgMembershipOrderByWithRelationInput[]
    cursor?: OrgMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrgMembershipScalarFieldEnum | OrgMembershipScalarFieldEnum[]
  }

  /**
   * Org.auditLogs
   */
  export type Org$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Org without action
   */
  export type OrgDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgInclude<ExtArgs> | null
  }


  /**
   * Model Network
   */

  export type AggregateNetwork = {
    _count: NetworkCountAggregateOutputType | null
    _min: NetworkMinAggregateOutputType | null
    _max: NetworkMaxAggregateOutputType | null
  }

  export type NetworkMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    orgId: string | null
    currentBundleId: string | null
  }

  export type NetworkMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    orgId: string | null
    currentBundleId: string | null
  }

  export type NetworkCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    orgId: number
    currentBundleId: number
    _all: number
  }


  export type NetworkMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    orgId?: true
    currentBundleId?: true
  }

  export type NetworkMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    orgId?: true
    currentBundleId?: true
  }

  export type NetworkCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    orgId?: true
    currentBundleId?: true
    _all?: true
  }

  export type NetworkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Network to aggregate.
     */
    where?: NetworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Networks to fetch.
     */
    orderBy?: NetworkOrderByWithRelationInput | NetworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NetworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Networks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Networks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Networks
    **/
    _count?: true | NetworkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NetworkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NetworkMaxAggregateInputType
  }

  export type GetNetworkAggregateType<T extends NetworkAggregateArgs> = {
        [P in keyof T & keyof AggregateNetwork]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNetwork[P]>
      : GetScalarType<T[P], AggregateNetwork[P]>
  }




  export type NetworkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NetworkWhereInput
    orderBy?: NetworkOrderByWithAggregationInput | NetworkOrderByWithAggregationInput[]
    by: NetworkScalarFieldEnum[] | NetworkScalarFieldEnum
    having?: NetworkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NetworkCountAggregateInputType | true
    _min?: NetworkMinAggregateInputType
    _max?: NetworkMaxAggregateInputType
  }

  export type NetworkGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    orgId: string
    currentBundleId: string | null
    _count: NetworkCountAggregateOutputType | null
    _min: NetworkMinAggregateOutputType | null
    _max: NetworkMaxAggregateOutputType | null
  }

  type GetNetworkGroupByPayload<T extends NetworkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NetworkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NetworkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NetworkGroupByOutputType[P]>
            : GetScalarType<T[P], NetworkGroupByOutputType[P]>
        }
      >
    >


  export type NetworkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    orgId?: boolean
    currentBundleId?: boolean
    org?: boolean | OrgDefaultArgs<ExtArgs>
    currentBundle?: boolean | Network$currentBundleArgs<ExtArgs>
    practices?: boolean | Network$practicesArgs<ExtArgs>
    bundles?: boolean | Network$bundlesArgs<ExtArgs>
    networkMemberships?: boolean | Network$networkMembershipsArgs<ExtArgs>
    auditLogs?: boolean | Network$auditLogsArgs<ExtArgs>
    _count?: boolean | NetworkCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["network"]>

  export type NetworkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    orgId?: boolean
    currentBundleId?: boolean
    org?: boolean | OrgDefaultArgs<ExtArgs>
    currentBundle?: boolean | Network$currentBundleArgs<ExtArgs>
  }, ExtArgs["result"]["network"]>

  export type NetworkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    orgId?: boolean
    currentBundleId?: boolean
    org?: boolean | OrgDefaultArgs<ExtArgs>
    currentBundle?: boolean | Network$currentBundleArgs<ExtArgs>
  }, ExtArgs["result"]["network"]>

  export type NetworkSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    orgId?: boolean
    currentBundleId?: boolean
  }

  export type NetworkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "orgId" | "currentBundleId", ExtArgs["result"]["network"]>
  export type NetworkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    org?: boolean | OrgDefaultArgs<ExtArgs>
    currentBundle?: boolean | Network$currentBundleArgs<ExtArgs>
    practices?: boolean | Network$practicesArgs<ExtArgs>
    bundles?: boolean | Network$bundlesArgs<ExtArgs>
    networkMemberships?: boolean | Network$networkMembershipsArgs<ExtArgs>
    auditLogs?: boolean | Network$auditLogsArgs<ExtArgs>
    _count?: boolean | NetworkCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NetworkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    org?: boolean | OrgDefaultArgs<ExtArgs>
    currentBundle?: boolean | Network$currentBundleArgs<ExtArgs>
  }
  export type NetworkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    org?: boolean | OrgDefaultArgs<ExtArgs>
    currentBundle?: boolean | Network$currentBundleArgs<ExtArgs>
  }

  export type $NetworkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Network"
    objects: {
      org: Prisma.$OrgPayload<ExtArgs>
      currentBundle: Prisma.$BundlePayload<ExtArgs> | null
      practices: Prisma.$PracticePayload<ExtArgs>[]
      bundles: Prisma.$BundlePayload<ExtArgs>[]
      networkMemberships: Prisma.$NetworkMembershipPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      orgId: string
      currentBundleId: string | null
    }, ExtArgs["result"]["network"]>
    composites: {}
  }

  type NetworkGetPayload<S extends boolean | null | undefined | NetworkDefaultArgs> = $Result.GetResult<Prisma.$NetworkPayload, S>

  type NetworkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NetworkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NetworkCountAggregateInputType | true
    }

  export interface NetworkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Network'], meta: { name: 'Network' } }
    /**
     * Find zero or one Network that matches the filter.
     * @param {NetworkFindUniqueArgs} args - Arguments to find a Network
     * @example
     * // Get one Network
     * const network = await prisma.network.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NetworkFindUniqueArgs>(args: SelectSubset<T, NetworkFindUniqueArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Network that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NetworkFindUniqueOrThrowArgs} args - Arguments to find a Network
     * @example
     * // Get one Network
     * const network = await prisma.network.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NetworkFindUniqueOrThrowArgs>(args: SelectSubset<T, NetworkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Network that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkFindFirstArgs} args - Arguments to find a Network
     * @example
     * // Get one Network
     * const network = await prisma.network.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NetworkFindFirstArgs>(args?: SelectSubset<T, NetworkFindFirstArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Network that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkFindFirstOrThrowArgs} args - Arguments to find a Network
     * @example
     * // Get one Network
     * const network = await prisma.network.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NetworkFindFirstOrThrowArgs>(args?: SelectSubset<T, NetworkFindFirstOrThrowArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Networks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Networks
     * const networks = await prisma.network.findMany()
     * 
     * // Get first 10 Networks
     * const networks = await prisma.network.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const networkWithIdOnly = await prisma.network.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NetworkFindManyArgs>(args?: SelectSubset<T, NetworkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Network.
     * @param {NetworkCreateArgs} args - Arguments to create a Network.
     * @example
     * // Create one Network
     * const Network = await prisma.network.create({
     *   data: {
     *     // ... data to create a Network
     *   }
     * })
     * 
     */
    create<T extends NetworkCreateArgs>(args: SelectSubset<T, NetworkCreateArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Networks.
     * @param {NetworkCreateManyArgs} args - Arguments to create many Networks.
     * @example
     * // Create many Networks
     * const network = await prisma.network.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NetworkCreateManyArgs>(args?: SelectSubset<T, NetworkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Networks and returns the data saved in the database.
     * @param {NetworkCreateManyAndReturnArgs} args - Arguments to create many Networks.
     * @example
     * // Create many Networks
     * const network = await prisma.network.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Networks and only return the `id`
     * const networkWithIdOnly = await prisma.network.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NetworkCreateManyAndReturnArgs>(args?: SelectSubset<T, NetworkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Network.
     * @param {NetworkDeleteArgs} args - Arguments to delete one Network.
     * @example
     * // Delete one Network
     * const Network = await prisma.network.delete({
     *   where: {
     *     // ... filter to delete one Network
     *   }
     * })
     * 
     */
    delete<T extends NetworkDeleteArgs>(args: SelectSubset<T, NetworkDeleteArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Network.
     * @param {NetworkUpdateArgs} args - Arguments to update one Network.
     * @example
     * // Update one Network
     * const network = await prisma.network.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NetworkUpdateArgs>(args: SelectSubset<T, NetworkUpdateArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Networks.
     * @param {NetworkDeleteManyArgs} args - Arguments to filter Networks to delete.
     * @example
     * // Delete a few Networks
     * const { count } = await prisma.network.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NetworkDeleteManyArgs>(args?: SelectSubset<T, NetworkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Networks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Networks
     * const network = await prisma.network.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NetworkUpdateManyArgs>(args: SelectSubset<T, NetworkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Networks and returns the data updated in the database.
     * @param {NetworkUpdateManyAndReturnArgs} args - Arguments to update many Networks.
     * @example
     * // Update many Networks
     * const network = await prisma.network.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Networks and only return the `id`
     * const networkWithIdOnly = await prisma.network.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NetworkUpdateManyAndReturnArgs>(args: SelectSubset<T, NetworkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Network.
     * @param {NetworkUpsertArgs} args - Arguments to update or create a Network.
     * @example
     * // Update or create a Network
     * const network = await prisma.network.upsert({
     *   create: {
     *     // ... data to create a Network
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Network we want to update
     *   }
     * })
     */
    upsert<T extends NetworkUpsertArgs>(args: SelectSubset<T, NetworkUpsertArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Networks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkCountArgs} args - Arguments to filter Networks to count.
     * @example
     * // Count the number of Networks
     * const count = await prisma.network.count({
     *   where: {
     *     // ... the filter for the Networks we want to count
     *   }
     * })
    **/
    count<T extends NetworkCountArgs>(
      args?: Subset<T, NetworkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NetworkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Network.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NetworkAggregateArgs>(args: Subset<T, NetworkAggregateArgs>): Prisma.PrismaPromise<GetNetworkAggregateType<T>>

    /**
     * Group by Network.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NetworkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NetworkGroupByArgs['orderBy'] }
        : { orderBy?: NetworkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NetworkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNetworkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Network model
   */
  readonly fields: NetworkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Network.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NetworkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    org<T extends OrgDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrgDefaultArgs<ExtArgs>>): Prisma__OrgClient<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    currentBundle<T extends Network$currentBundleArgs<ExtArgs> = {}>(args?: Subset<T, Network$currentBundleArgs<ExtArgs>>): Prisma__BundleClient<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    practices<T extends Network$practicesArgs<ExtArgs> = {}>(args?: Subset<T, Network$practicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bundles<T extends Network$bundlesArgs<ExtArgs> = {}>(args?: Subset<T, Network$bundlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    networkMemberships<T extends Network$networkMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, Network$networkMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends Network$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Network$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Network model
   */
  interface NetworkFieldRefs {
    readonly id: FieldRef<"Network", 'String'>
    readonly name: FieldRef<"Network", 'String'>
    readonly createdAt: FieldRef<"Network", 'DateTime'>
    readonly orgId: FieldRef<"Network", 'String'>
    readonly currentBundleId: FieldRef<"Network", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Network findUnique
   */
  export type NetworkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter, which Network to fetch.
     */
    where: NetworkWhereUniqueInput
  }

  /**
   * Network findUniqueOrThrow
   */
  export type NetworkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter, which Network to fetch.
     */
    where: NetworkWhereUniqueInput
  }

  /**
   * Network findFirst
   */
  export type NetworkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter, which Network to fetch.
     */
    where?: NetworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Networks to fetch.
     */
    orderBy?: NetworkOrderByWithRelationInput | NetworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Networks.
     */
    cursor?: NetworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Networks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Networks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Networks.
     */
    distinct?: NetworkScalarFieldEnum | NetworkScalarFieldEnum[]
  }

  /**
   * Network findFirstOrThrow
   */
  export type NetworkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter, which Network to fetch.
     */
    where?: NetworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Networks to fetch.
     */
    orderBy?: NetworkOrderByWithRelationInput | NetworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Networks.
     */
    cursor?: NetworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Networks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Networks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Networks.
     */
    distinct?: NetworkScalarFieldEnum | NetworkScalarFieldEnum[]
  }

  /**
   * Network findMany
   */
  export type NetworkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter, which Networks to fetch.
     */
    where?: NetworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Networks to fetch.
     */
    orderBy?: NetworkOrderByWithRelationInput | NetworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Networks.
     */
    cursor?: NetworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Networks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Networks.
     */
    skip?: number
    distinct?: NetworkScalarFieldEnum | NetworkScalarFieldEnum[]
  }

  /**
   * Network create
   */
  export type NetworkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * The data needed to create a Network.
     */
    data: XOR<NetworkCreateInput, NetworkUncheckedCreateInput>
  }

  /**
   * Network createMany
   */
  export type NetworkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Networks.
     */
    data: NetworkCreateManyInput | NetworkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Network createManyAndReturn
   */
  export type NetworkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * The data used to create many Networks.
     */
    data: NetworkCreateManyInput | NetworkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Network update
   */
  export type NetworkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * The data needed to update a Network.
     */
    data: XOR<NetworkUpdateInput, NetworkUncheckedUpdateInput>
    /**
     * Choose, which Network to update.
     */
    where: NetworkWhereUniqueInput
  }

  /**
   * Network updateMany
   */
  export type NetworkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Networks.
     */
    data: XOR<NetworkUpdateManyMutationInput, NetworkUncheckedUpdateManyInput>
    /**
     * Filter which Networks to update
     */
    where?: NetworkWhereInput
    /**
     * Limit how many Networks to update.
     */
    limit?: number
  }

  /**
   * Network updateManyAndReturn
   */
  export type NetworkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * The data used to update Networks.
     */
    data: XOR<NetworkUpdateManyMutationInput, NetworkUncheckedUpdateManyInput>
    /**
     * Filter which Networks to update
     */
    where?: NetworkWhereInput
    /**
     * Limit how many Networks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Network upsert
   */
  export type NetworkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * The filter to search for the Network to update in case it exists.
     */
    where: NetworkWhereUniqueInput
    /**
     * In case the Network found by the `where` argument doesn't exist, create a new Network with this data.
     */
    create: XOR<NetworkCreateInput, NetworkUncheckedCreateInput>
    /**
     * In case the Network was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NetworkUpdateInput, NetworkUncheckedUpdateInput>
  }

  /**
   * Network delete
   */
  export type NetworkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    /**
     * Filter which Network to delete.
     */
    where: NetworkWhereUniqueInput
  }

  /**
   * Network deleteMany
   */
  export type NetworkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Networks to delete
     */
    where?: NetworkWhereInput
    /**
     * Limit how many Networks to delete.
     */
    limit?: number
  }

  /**
   * Network.currentBundle
   */
  export type Network$currentBundleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
    where?: BundleWhereInput
  }

  /**
   * Network.practices
   */
  export type Network$practicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    where?: PracticeWhereInput
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    cursor?: PracticeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * Network.bundles
   */
  export type Network$bundlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
    where?: BundleWhereInput
    orderBy?: BundleOrderByWithRelationInput | BundleOrderByWithRelationInput[]
    cursor?: BundleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BundleScalarFieldEnum | BundleScalarFieldEnum[]
  }

  /**
   * Network.networkMemberships
   */
  export type Network$networkMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
    where?: NetworkMembershipWhereInput
    orderBy?: NetworkMembershipOrderByWithRelationInput | NetworkMembershipOrderByWithRelationInput[]
    cursor?: NetworkMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NetworkMembershipScalarFieldEnum | NetworkMembershipScalarFieldEnum[]
  }

  /**
   * Network.auditLogs
   */
  export type Network$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Network without action
   */
  export type NetworkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
  }


  /**
   * Model Practice
   */

  export type AggregatePractice = {
    _count: PracticeCountAggregateOutputType | null
    _min: PracticeMinAggregateOutputType | null
    _max: PracticeMaxAggregateOutputType | null
  }

  export type PracticeMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    networkId: string | null
  }

  export type PracticeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    networkId: string | null
  }

  export type PracticeCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    networkId: number
    _all: number
  }


  export type PracticeMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    networkId?: true
  }

  export type PracticeMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    networkId?: true
  }

  export type PracticeCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    networkId?: true
    _all?: true
  }

  export type PracticeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Practice to aggregate.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Practices
    **/
    _count?: true | PracticeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PracticeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PracticeMaxAggregateInputType
  }

  export type GetPracticeAggregateType<T extends PracticeAggregateArgs> = {
        [P in keyof T & keyof AggregatePractice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePractice[P]>
      : GetScalarType<T[P], AggregatePractice[P]>
  }




  export type PracticeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeWhereInput
    orderBy?: PracticeOrderByWithAggregationInput | PracticeOrderByWithAggregationInput[]
    by: PracticeScalarFieldEnum[] | PracticeScalarFieldEnum
    having?: PracticeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PracticeCountAggregateInputType | true
    _min?: PracticeMinAggregateInputType
    _max?: PracticeMaxAggregateInputType
  }

  export type PracticeGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    networkId: string
    _count: PracticeCountAggregateOutputType | null
    _min: PracticeMinAggregateOutputType | null
    _max: PracticeMaxAggregateOutputType | null
  }

  type GetPracticeGroupByPayload<T extends PracticeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PracticeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PracticeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PracticeGroupByOutputType[P]>
            : GetScalarType<T[P], PracticeGroupByOutputType[P]>
        }
      >
    >


  export type PracticeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    networkId?: boolean
    network?: boolean | NetworkDefaultArgs<ExtArgs>
    keys?: boolean | Practice$keysArgs<ExtArgs>
    careEpisodes?: boolean | Practice$careEpisodesArgs<ExtArgs>
    _count?: boolean | PracticeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practice"]>

  export type PracticeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    networkId?: boolean
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practice"]>

  export type PracticeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    networkId?: boolean
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practice"]>

  export type PracticeSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    networkId?: boolean
  }

  export type PracticeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "networkId", ExtArgs["result"]["practice"]>
  export type PracticeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    network?: boolean | NetworkDefaultArgs<ExtArgs>
    keys?: boolean | Practice$keysArgs<ExtArgs>
    careEpisodes?: boolean | Practice$careEpisodesArgs<ExtArgs>
    _count?: boolean | PracticeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PracticeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }
  export type PracticeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }

  export type $PracticePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Practice"
    objects: {
      network: Prisma.$NetworkPayload<ExtArgs>
      keys: Prisma.$PracticeKeyPayload<ExtArgs>[]
      careEpisodes: Prisma.$CareEpisodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      networkId: string
    }, ExtArgs["result"]["practice"]>
    composites: {}
  }

  type PracticeGetPayload<S extends boolean | null | undefined | PracticeDefaultArgs> = $Result.GetResult<Prisma.$PracticePayload, S>

  type PracticeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PracticeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PracticeCountAggregateInputType | true
    }

  export interface PracticeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Practice'], meta: { name: 'Practice' } }
    /**
     * Find zero or one Practice that matches the filter.
     * @param {PracticeFindUniqueArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PracticeFindUniqueArgs>(args: SelectSubset<T, PracticeFindUniqueArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Practice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PracticeFindUniqueOrThrowArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PracticeFindUniqueOrThrowArgs>(args: SelectSubset<T, PracticeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Practice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeFindFirstArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PracticeFindFirstArgs>(args?: SelectSubset<T, PracticeFindFirstArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Practice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeFindFirstOrThrowArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PracticeFindFirstOrThrowArgs>(args?: SelectSubset<T, PracticeFindFirstOrThrowArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Practices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Practices
     * const practices = await prisma.practice.findMany()
     * 
     * // Get first 10 Practices
     * const practices = await prisma.practice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const practiceWithIdOnly = await prisma.practice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PracticeFindManyArgs>(args?: SelectSubset<T, PracticeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Practice.
     * @param {PracticeCreateArgs} args - Arguments to create a Practice.
     * @example
     * // Create one Practice
     * const Practice = await prisma.practice.create({
     *   data: {
     *     // ... data to create a Practice
     *   }
     * })
     * 
     */
    create<T extends PracticeCreateArgs>(args: SelectSubset<T, PracticeCreateArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Practices.
     * @param {PracticeCreateManyArgs} args - Arguments to create many Practices.
     * @example
     * // Create many Practices
     * const practice = await prisma.practice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PracticeCreateManyArgs>(args?: SelectSubset<T, PracticeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Practices and returns the data saved in the database.
     * @param {PracticeCreateManyAndReturnArgs} args - Arguments to create many Practices.
     * @example
     * // Create many Practices
     * const practice = await prisma.practice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Practices and only return the `id`
     * const practiceWithIdOnly = await prisma.practice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PracticeCreateManyAndReturnArgs>(args?: SelectSubset<T, PracticeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Practice.
     * @param {PracticeDeleteArgs} args - Arguments to delete one Practice.
     * @example
     * // Delete one Practice
     * const Practice = await prisma.practice.delete({
     *   where: {
     *     // ... filter to delete one Practice
     *   }
     * })
     * 
     */
    delete<T extends PracticeDeleteArgs>(args: SelectSubset<T, PracticeDeleteArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Practice.
     * @param {PracticeUpdateArgs} args - Arguments to update one Practice.
     * @example
     * // Update one Practice
     * const practice = await prisma.practice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PracticeUpdateArgs>(args: SelectSubset<T, PracticeUpdateArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Practices.
     * @param {PracticeDeleteManyArgs} args - Arguments to filter Practices to delete.
     * @example
     * // Delete a few Practices
     * const { count } = await prisma.practice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PracticeDeleteManyArgs>(args?: SelectSubset<T, PracticeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Practices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Practices
     * const practice = await prisma.practice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PracticeUpdateManyArgs>(args: SelectSubset<T, PracticeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Practices and returns the data updated in the database.
     * @param {PracticeUpdateManyAndReturnArgs} args - Arguments to update many Practices.
     * @example
     * // Update many Practices
     * const practice = await prisma.practice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Practices and only return the `id`
     * const practiceWithIdOnly = await prisma.practice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PracticeUpdateManyAndReturnArgs>(args: SelectSubset<T, PracticeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Practice.
     * @param {PracticeUpsertArgs} args - Arguments to update or create a Practice.
     * @example
     * // Update or create a Practice
     * const practice = await prisma.practice.upsert({
     *   create: {
     *     // ... data to create a Practice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Practice we want to update
     *   }
     * })
     */
    upsert<T extends PracticeUpsertArgs>(args: SelectSubset<T, PracticeUpsertArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Practices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeCountArgs} args - Arguments to filter Practices to count.
     * @example
     * // Count the number of Practices
     * const count = await prisma.practice.count({
     *   where: {
     *     // ... the filter for the Practices we want to count
     *   }
     * })
    **/
    count<T extends PracticeCountArgs>(
      args?: Subset<T, PracticeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PracticeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Practice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PracticeAggregateArgs>(args: Subset<T, PracticeAggregateArgs>): Prisma.PrismaPromise<GetPracticeAggregateType<T>>

    /**
     * Group by Practice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PracticeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PracticeGroupByArgs['orderBy'] }
        : { orderBy?: PracticeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PracticeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Practice model
   */
  readonly fields: PracticeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Practice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PracticeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    network<T extends NetworkDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NetworkDefaultArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    keys<T extends Practice$keysArgs<ExtArgs> = {}>(args?: Subset<T, Practice$keysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    careEpisodes<T extends Practice$careEpisodesArgs<ExtArgs> = {}>(args?: Subset<T, Practice$careEpisodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Practice model
   */
  interface PracticeFieldRefs {
    readonly id: FieldRef<"Practice", 'String'>
    readonly name: FieldRef<"Practice", 'String'>
    readonly createdAt: FieldRef<"Practice", 'DateTime'>
    readonly networkId: FieldRef<"Practice", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Practice findUnique
   */
  export type PracticeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice findUniqueOrThrow
   */
  export type PracticeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice findFirst
   */
  export type PracticeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Practices.
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Practices.
     */
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * Practice findFirstOrThrow
   */
  export type PracticeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Practices.
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Practices.
     */
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * Practice findMany
   */
  export type PracticeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practices to fetch.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Practices.
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * Practice create
   */
  export type PracticeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * The data needed to create a Practice.
     */
    data: XOR<PracticeCreateInput, PracticeUncheckedCreateInput>
  }

  /**
   * Practice createMany
   */
  export type PracticeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Practices.
     */
    data: PracticeCreateManyInput | PracticeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Practice createManyAndReturn
   */
  export type PracticeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * The data used to create many Practices.
     */
    data: PracticeCreateManyInput | PracticeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Practice update
   */
  export type PracticeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * The data needed to update a Practice.
     */
    data: XOR<PracticeUpdateInput, PracticeUncheckedUpdateInput>
    /**
     * Choose, which Practice to update.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice updateMany
   */
  export type PracticeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Practices.
     */
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyInput>
    /**
     * Filter which Practices to update
     */
    where?: PracticeWhereInput
    /**
     * Limit how many Practices to update.
     */
    limit?: number
  }

  /**
   * Practice updateManyAndReturn
   */
  export type PracticeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * The data used to update Practices.
     */
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyInput>
    /**
     * Filter which Practices to update
     */
    where?: PracticeWhereInput
    /**
     * Limit how many Practices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Practice upsert
   */
  export type PracticeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * The filter to search for the Practice to update in case it exists.
     */
    where: PracticeWhereUniqueInput
    /**
     * In case the Practice found by the `where` argument doesn't exist, create a new Practice with this data.
     */
    create: XOR<PracticeCreateInput, PracticeUncheckedCreateInput>
    /**
     * In case the Practice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PracticeUpdateInput, PracticeUncheckedUpdateInput>
  }

  /**
   * Practice delete
   */
  export type PracticeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter which Practice to delete.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice deleteMany
   */
  export type PracticeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Practices to delete
     */
    where?: PracticeWhereInput
    /**
     * Limit how many Practices to delete.
     */
    limit?: number
  }

  /**
   * Practice.keys
   */
  export type Practice$keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyInclude<ExtArgs> | null
    where?: PracticeKeyWhereInput
    orderBy?: PracticeKeyOrderByWithRelationInput | PracticeKeyOrderByWithRelationInput[]
    cursor?: PracticeKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticeKeyScalarFieldEnum | PracticeKeyScalarFieldEnum[]
  }

  /**
   * Practice.careEpisodes
   */
  export type Practice$careEpisodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
    where?: CareEpisodeWhereInput
    orderBy?: CareEpisodeOrderByWithRelationInput | CareEpisodeOrderByWithRelationInput[]
    cursor?: CareEpisodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CareEpisodeScalarFieldEnum | CareEpisodeScalarFieldEnum[]
  }

  /**
   * Practice without action
   */
  export type PracticeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
  }


  /**
   * Model PracticeKey
   */

  export type AggregatePracticeKey = {
    _count: PracticeKeyCountAggregateOutputType | null
    _min: PracticeKeyMinAggregateOutputType | null
    _max: PracticeKeyMaxAggregateOutputType | null
  }

  export type PracticeKeyMinAggregateOutputType = {
    id: string | null
    practiceId: string | null
    publicKeyPem: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type PracticeKeyMaxAggregateOutputType = {
    id: string | null
    practiceId: string | null
    publicKeyPem: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type PracticeKeyCountAggregateOutputType = {
    id: number
    practiceId: number
    publicKeyPem: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type PracticeKeyMinAggregateInputType = {
    id?: true
    practiceId?: true
    publicKeyPem?: true
    isActive?: true
    createdAt?: true
  }

  export type PracticeKeyMaxAggregateInputType = {
    id?: true
    practiceId?: true
    publicKeyPem?: true
    isActive?: true
    createdAt?: true
  }

  export type PracticeKeyCountAggregateInputType = {
    id?: true
    practiceId?: true
    publicKeyPem?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type PracticeKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticeKey to aggregate.
     */
    where?: PracticeKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeKeys to fetch.
     */
    orderBy?: PracticeKeyOrderByWithRelationInput | PracticeKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PracticeKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PracticeKeys
    **/
    _count?: true | PracticeKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PracticeKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PracticeKeyMaxAggregateInputType
  }

  export type GetPracticeKeyAggregateType<T extends PracticeKeyAggregateArgs> = {
        [P in keyof T & keyof AggregatePracticeKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePracticeKey[P]>
      : GetScalarType<T[P], AggregatePracticeKey[P]>
  }




  export type PracticeKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeKeyWhereInput
    orderBy?: PracticeKeyOrderByWithAggregationInput | PracticeKeyOrderByWithAggregationInput[]
    by: PracticeKeyScalarFieldEnum[] | PracticeKeyScalarFieldEnum
    having?: PracticeKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PracticeKeyCountAggregateInputType | true
    _min?: PracticeKeyMinAggregateInputType
    _max?: PracticeKeyMaxAggregateInputType
  }

  export type PracticeKeyGroupByOutputType = {
    id: string
    practiceId: string
    publicKeyPem: string
    isActive: boolean
    createdAt: Date
    _count: PracticeKeyCountAggregateOutputType | null
    _min: PracticeKeyMinAggregateOutputType | null
    _max: PracticeKeyMaxAggregateOutputType | null
  }

  type GetPracticeKeyGroupByPayload<T extends PracticeKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PracticeKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PracticeKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PracticeKeyGroupByOutputType[P]>
            : GetScalarType<T[P], PracticeKeyGroupByOutputType[P]>
        }
      >
    >


  export type PracticeKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    practiceId?: boolean
    publicKeyPem?: boolean
    isActive?: boolean
    createdAt?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceKey"]>

  export type PracticeKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    practiceId?: boolean
    publicKeyPem?: boolean
    isActive?: boolean
    createdAt?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceKey"]>

  export type PracticeKeySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    practiceId?: boolean
    publicKeyPem?: boolean
    isActive?: boolean
    createdAt?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceKey"]>

  export type PracticeKeySelectScalar = {
    id?: boolean
    practiceId?: boolean
    publicKeyPem?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type PracticeKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "practiceId" | "publicKeyPem" | "isActive" | "createdAt", ExtArgs["result"]["practiceKey"]>
  export type PracticeKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }
  export type PracticeKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }
  export type PracticeKeyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }

  export type $PracticeKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PracticeKey"
    objects: {
      practice: Prisma.$PracticePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      practiceId: string
      publicKeyPem: string
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["practiceKey"]>
    composites: {}
  }

  type PracticeKeyGetPayload<S extends boolean | null | undefined | PracticeKeyDefaultArgs> = $Result.GetResult<Prisma.$PracticeKeyPayload, S>

  type PracticeKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PracticeKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PracticeKeyCountAggregateInputType | true
    }

  export interface PracticeKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PracticeKey'], meta: { name: 'PracticeKey' } }
    /**
     * Find zero or one PracticeKey that matches the filter.
     * @param {PracticeKeyFindUniqueArgs} args - Arguments to find a PracticeKey
     * @example
     * // Get one PracticeKey
     * const practiceKey = await prisma.practiceKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PracticeKeyFindUniqueArgs>(args: SelectSubset<T, PracticeKeyFindUniqueArgs<ExtArgs>>): Prisma__PracticeKeyClient<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PracticeKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PracticeKeyFindUniqueOrThrowArgs} args - Arguments to find a PracticeKey
     * @example
     * // Get one PracticeKey
     * const practiceKey = await prisma.practiceKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PracticeKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, PracticeKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PracticeKeyClient<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PracticeKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeKeyFindFirstArgs} args - Arguments to find a PracticeKey
     * @example
     * // Get one PracticeKey
     * const practiceKey = await prisma.practiceKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PracticeKeyFindFirstArgs>(args?: SelectSubset<T, PracticeKeyFindFirstArgs<ExtArgs>>): Prisma__PracticeKeyClient<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PracticeKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeKeyFindFirstOrThrowArgs} args - Arguments to find a PracticeKey
     * @example
     * // Get one PracticeKey
     * const practiceKey = await prisma.practiceKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PracticeKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, PracticeKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__PracticeKeyClient<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PracticeKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PracticeKeys
     * const practiceKeys = await prisma.practiceKey.findMany()
     * 
     * // Get first 10 PracticeKeys
     * const practiceKeys = await prisma.practiceKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const practiceKeyWithIdOnly = await prisma.practiceKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PracticeKeyFindManyArgs>(args?: SelectSubset<T, PracticeKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PracticeKey.
     * @param {PracticeKeyCreateArgs} args - Arguments to create a PracticeKey.
     * @example
     * // Create one PracticeKey
     * const PracticeKey = await prisma.practiceKey.create({
     *   data: {
     *     // ... data to create a PracticeKey
     *   }
     * })
     * 
     */
    create<T extends PracticeKeyCreateArgs>(args: SelectSubset<T, PracticeKeyCreateArgs<ExtArgs>>): Prisma__PracticeKeyClient<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PracticeKeys.
     * @param {PracticeKeyCreateManyArgs} args - Arguments to create many PracticeKeys.
     * @example
     * // Create many PracticeKeys
     * const practiceKey = await prisma.practiceKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PracticeKeyCreateManyArgs>(args?: SelectSubset<T, PracticeKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PracticeKeys and returns the data saved in the database.
     * @param {PracticeKeyCreateManyAndReturnArgs} args - Arguments to create many PracticeKeys.
     * @example
     * // Create many PracticeKeys
     * const practiceKey = await prisma.practiceKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PracticeKeys and only return the `id`
     * const practiceKeyWithIdOnly = await prisma.practiceKey.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PracticeKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, PracticeKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PracticeKey.
     * @param {PracticeKeyDeleteArgs} args - Arguments to delete one PracticeKey.
     * @example
     * // Delete one PracticeKey
     * const PracticeKey = await prisma.practiceKey.delete({
     *   where: {
     *     // ... filter to delete one PracticeKey
     *   }
     * })
     * 
     */
    delete<T extends PracticeKeyDeleteArgs>(args: SelectSubset<T, PracticeKeyDeleteArgs<ExtArgs>>): Prisma__PracticeKeyClient<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PracticeKey.
     * @param {PracticeKeyUpdateArgs} args - Arguments to update one PracticeKey.
     * @example
     * // Update one PracticeKey
     * const practiceKey = await prisma.practiceKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PracticeKeyUpdateArgs>(args: SelectSubset<T, PracticeKeyUpdateArgs<ExtArgs>>): Prisma__PracticeKeyClient<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PracticeKeys.
     * @param {PracticeKeyDeleteManyArgs} args - Arguments to filter PracticeKeys to delete.
     * @example
     * // Delete a few PracticeKeys
     * const { count } = await prisma.practiceKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PracticeKeyDeleteManyArgs>(args?: SelectSubset<T, PracticeKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PracticeKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PracticeKeys
     * const practiceKey = await prisma.practiceKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PracticeKeyUpdateManyArgs>(args: SelectSubset<T, PracticeKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PracticeKeys and returns the data updated in the database.
     * @param {PracticeKeyUpdateManyAndReturnArgs} args - Arguments to update many PracticeKeys.
     * @example
     * // Update many PracticeKeys
     * const practiceKey = await prisma.practiceKey.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PracticeKeys and only return the `id`
     * const practiceKeyWithIdOnly = await prisma.practiceKey.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PracticeKeyUpdateManyAndReturnArgs>(args: SelectSubset<T, PracticeKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PracticeKey.
     * @param {PracticeKeyUpsertArgs} args - Arguments to update or create a PracticeKey.
     * @example
     * // Update or create a PracticeKey
     * const practiceKey = await prisma.practiceKey.upsert({
     *   create: {
     *     // ... data to create a PracticeKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PracticeKey we want to update
     *   }
     * })
     */
    upsert<T extends PracticeKeyUpsertArgs>(args: SelectSubset<T, PracticeKeyUpsertArgs<ExtArgs>>): Prisma__PracticeKeyClient<$Result.GetResult<Prisma.$PracticeKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PracticeKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeKeyCountArgs} args - Arguments to filter PracticeKeys to count.
     * @example
     * // Count the number of PracticeKeys
     * const count = await prisma.practiceKey.count({
     *   where: {
     *     // ... the filter for the PracticeKeys we want to count
     *   }
     * })
    **/
    count<T extends PracticeKeyCountArgs>(
      args?: Subset<T, PracticeKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PracticeKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PracticeKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PracticeKeyAggregateArgs>(args: Subset<T, PracticeKeyAggregateArgs>): Prisma.PrismaPromise<GetPracticeKeyAggregateType<T>>

    /**
     * Group by PracticeKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PracticeKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PracticeKeyGroupByArgs['orderBy'] }
        : { orderBy?: PracticeKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PracticeKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticeKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PracticeKey model
   */
  readonly fields: PracticeKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PracticeKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PracticeKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    practice<T extends PracticeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PracticeDefaultArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PracticeKey model
   */
  interface PracticeKeyFieldRefs {
    readonly id: FieldRef<"PracticeKey", 'String'>
    readonly practiceId: FieldRef<"PracticeKey", 'String'>
    readonly publicKeyPem: FieldRef<"PracticeKey", 'String'>
    readonly isActive: FieldRef<"PracticeKey", 'Boolean'>
    readonly createdAt: FieldRef<"PracticeKey", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PracticeKey findUnique
   */
  export type PracticeKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyInclude<ExtArgs> | null
    /**
     * Filter, which PracticeKey to fetch.
     */
    where: PracticeKeyWhereUniqueInput
  }

  /**
   * PracticeKey findUniqueOrThrow
   */
  export type PracticeKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyInclude<ExtArgs> | null
    /**
     * Filter, which PracticeKey to fetch.
     */
    where: PracticeKeyWhereUniqueInput
  }

  /**
   * PracticeKey findFirst
   */
  export type PracticeKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyInclude<ExtArgs> | null
    /**
     * Filter, which PracticeKey to fetch.
     */
    where?: PracticeKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeKeys to fetch.
     */
    orderBy?: PracticeKeyOrderByWithRelationInput | PracticeKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticeKeys.
     */
    cursor?: PracticeKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticeKeys.
     */
    distinct?: PracticeKeyScalarFieldEnum | PracticeKeyScalarFieldEnum[]
  }

  /**
   * PracticeKey findFirstOrThrow
   */
  export type PracticeKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyInclude<ExtArgs> | null
    /**
     * Filter, which PracticeKey to fetch.
     */
    where?: PracticeKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeKeys to fetch.
     */
    orderBy?: PracticeKeyOrderByWithRelationInput | PracticeKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticeKeys.
     */
    cursor?: PracticeKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticeKeys.
     */
    distinct?: PracticeKeyScalarFieldEnum | PracticeKeyScalarFieldEnum[]
  }

  /**
   * PracticeKey findMany
   */
  export type PracticeKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyInclude<ExtArgs> | null
    /**
     * Filter, which PracticeKeys to fetch.
     */
    where?: PracticeKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeKeys to fetch.
     */
    orderBy?: PracticeKeyOrderByWithRelationInput | PracticeKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PracticeKeys.
     */
    cursor?: PracticeKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeKeys.
     */
    skip?: number
    distinct?: PracticeKeyScalarFieldEnum | PracticeKeyScalarFieldEnum[]
  }

  /**
   * PracticeKey create
   */
  export type PracticeKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a PracticeKey.
     */
    data: XOR<PracticeKeyCreateInput, PracticeKeyUncheckedCreateInput>
  }

  /**
   * PracticeKey createMany
   */
  export type PracticeKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PracticeKeys.
     */
    data: PracticeKeyCreateManyInput | PracticeKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PracticeKey createManyAndReturn
   */
  export type PracticeKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * The data used to create many PracticeKeys.
     */
    data: PracticeKeyCreateManyInput | PracticeKeyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PracticeKey update
   */
  export type PracticeKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a PracticeKey.
     */
    data: XOR<PracticeKeyUpdateInput, PracticeKeyUncheckedUpdateInput>
    /**
     * Choose, which PracticeKey to update.
     */
    where: PracticeKeyWhereUniqueInput
  }

  /**
   * PracticeKey updateMany
   */
  export type PracticeKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PracticeKeys.
     */
    data: XOR<PracticeKeyUpdateManyMutationInput, PracticeKeyUncheckedUpdateManyInput>
    /**
     * Filter which PracticeKeys to update
     */
    where?: PracticeKeyWhereInput
    /**
     * Limit how many PracticeKeys to update.
     */
    limit?: number
  }

  /**
   * PracticeKey updateManyAndReturn
   */
  export type PracticeKeyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * The data used to update PracticeKeys.
     */
    data: XOR<PracticeKeyUpdateManyMutationInput, PracticeKeyUncheckedUpdateManyInput>
    /**
     * Filter which PracticeKeys to update
     */
    where?: PracticeKeyWhereInput
    /**
     * Limit how many PracticeKeys to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PracticeKey upsert
   */
  export type PracticeKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the PracticeKey to update in case it exists.
     */
    where: PracticeKeyWhereUniqueInput
    /**
     * In case the PracticeKey found by the `where` argument doesn't exist, create a new PracticeKey with this data.
     */
    create: XOR<PracticeKeyCreateInput, PracticeKeyUncheckedCreateInput>
    /**
     * In case the PracticeKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PracticeKeyUpdateInput, PracticeKeyUncheckedUpdateInput>
  }

  /**
   * PracticeKey delete
   */
  export type PracticeKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyInclude<ExtArgs> | null
    /**
     * Filter which PracticeKey to delete.
     */
    where: PracticeKeyWhereUniqueInput
  }

  /**
   * PracticeKey deleteMany
   */
  export type PracticeKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticeKeys to delete
     */
    where?: PracticeKeyWhereInput
    /**
     * Limit how many PracticeKeys to delete.
     */
    limit?: number
  }

  /**
   * PracticeKey without action
   */
  export type PracticeKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeKey
     */
    select?: PracticeKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeKey
     */
    omit?: PracticeKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeKeyInclude<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
  }

  export type PatientMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    createdAt: number
    _all: number
  }


  export type PatientMinAggregateInputType = {
    id?: true
    createdAt?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    createdAt?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    createdAt?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: string
    createdAt: Date
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    submissions?: boolean | Patient$submissionsArgs<ExtArgs>
    careEpisodes?: boolean | Patient$careEpisodesArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    createdAt?: boolean
  }

  export type PatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt", ExtArgs["result"]["patient"]>
  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | Patient$submissionsArgs<ExtArgs>
    careEpisodes?: boolean | Patient$careEpisodesArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PatientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      careEpisodes: Prisma.$CareEpisodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients and returns the data updated in the database.
     * @param {PatientUpdateManyAndReturnArgs} args - Arguments to update many Patients.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submissions<T extends Patient$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    careEpisodes<T extends Patient$careEpisodesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$careEpisodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'String'>
    readonly createdAt: FieldRef<"Patient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient createManyAndReturn
   */
  export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient updateManyAndReturn
   */
  export type PatientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to delete.
     */
    limit?: number
  }

  /**
   * Patient.submissions
   */
  export type Patient$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Patient.careEpisodes
   */
  export type Patient$careEpisodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
    where?: CareEpisodeWhereInput
    orderBy?: CareEpisodeOrderByWithRelationInput | CareEpisodeOrderByWithRelationInput[]
    cursor?: CareEpisodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CareEpisodeScalarFieldEnum | CareEpisodeScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model CareEpisode
   */

  export type AggregateCareEpisode = {
    _count: CareEpisodeCountAggregateOutputType | null
    _min: CareEpisodeMinAggregateOutputType | null
    _max: CareEpisodeMaxAggregateOutputType | null
  }

  export type CareEpisodeMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    practiceId: string | null
    startAt: Date | null
    endAt: Date | null
  }

  export type CareEpisodeMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    practiceId: string | null
    startAt: Date | null
    endAt: Date | null
  }

  export type CareEpisodeCountAggregateOutputType = {
    id: number
    patientId: number
    practiceId: number
    startAt: number
    endAt: number
    _all: number
  }


  export type CareEpisodeMinAggregateInputType = {
    id?: true
    patientId?: true
    practiceId?: true
    startAt?: true
    endAt?: true
  }

  export type CareEpisodeMaxAggregateInputType = {
    id?: true
    patientId?: true
    practiceId?: true
    startAt?: true
    endAt?: true
  }

  export type CareEpisodeCountAggregateInputType = {
    id?: true
    patientId?: true
    practiceId?: true
    startAt?: true
    endAt?: true
    _all?: true
  }

  export type CareEpisodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CareEpisode to aggregate.
     */
    where?: CareEpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareEpisodes to fetch.
     */
    orderBy?: CareEpisodeOrderByWithRelationInput | CareEpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CareEpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareEpisodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareEpisodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CareEpisodes
    **/
    _count?: true | CareEpisodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CareEpisodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CareEpisodeMaxAggregateInputType
  }

  export type GetCareEpisodeAggregateType<T extends CareEpisodeAggregateArgs> = {
        [P in keyof T & keyof AggregateCareEpisode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCareEpisode[P]>
      : GetScalarType<T[P], AggregateCareEpisode[P]>
  }




  export type CareEpisodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CareEpisodeWhereInput
    orderBy?: CareEpisodeOrderByWithAggregationInput | CareEpisodeOrderByWithAggregationInput[]
    by: CareEpisodeScalarFieldEnum[] | CareEpisodeScalarFieldEnum
    having?: CareEpisodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CareEpisodeCountAggregateInputType | true
    _min?: CareEpisodeMinAggregateInputType
    _max?: CareEpisodeMaxAggregateInputType
  }

  export type CareEpisodeGroupByOutputType = {
    id: string
    patientId: string
    practiceId: string
    startAt: Date
    endAt: Date | null
    _count: CareEpisodeCountAggregateOutputType | null
    _min: CareEpisodeMinAggregateOutputType | null
    _max: CareEpisodeMaxAggregateOutputType | null
  }

  type GetCareEpisodeGroupByPayload<T extends CareEpisodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CareEpisodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CareEpisodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CareEpisodeGroupByOutputType[P]>
            : GetScalarType<T[P], CareEpisodeGroupByOutputType[P]>
        }
      >
    >


  export type CareEpisodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    practiceId?: boolean
    startAt?: boolean
    endAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["careEpisode"]>

  export type CareEpisodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    practiceId?: boolean
    startAt?: boolean
    endAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["careEpisode"]>

  export type CareEpisodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    practiceId?: boolean
    startAt?: boolean
    endAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["careEpisode"]>

  export type CareEpisodeSelectScalar = {
    id?: boolean
    patientId?: boolean
    practiceId?: boolean
    startAt?: boolean
    endAt?: boolean
  }

  export type CareEpisodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "practiceId" | "startAt" | "endAt", ExtArgs["result"]["careEpisode"]>
  export type CareEpisodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }
  export type CareEpisodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }
  export type CareEpisodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }

  export type $CareEpisodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CareEpisode"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      practice: Prisma.$PracticePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      practiceId: string
      startAt: Date
      endAt: Date | null
    }, ExtArgs["result"]["careEpisode"]>
    composites: {}
  }

  type CareEpisodeGetPayload<S extends boolean | null | undefined | CareEpisodeDefaultArgs> = $Result.GetResult<Prisma.$CareEpisodePayload, S>

  type CareEpisodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CareEpisodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CareEpisodeCountAggregateInputType | true
    }

  export interface CareEpisodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CareEpisode'], meta: { name: 'CareEpisode' } }
    /**
     * Find zero or one CareEpisode that matches the filter.
     * @param {CareEpisodeFindUniqueArgs} args - Arguments to find a CareEpisode
     * @example
     * // Get one CareEpisode
     * const careEpisode = await prisma.careEpisode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CareEpisodeFindUniqueArgs>(args: SelectSubset<T, CareEpisodeFindUniqueArgs<ExtArgs>>): Prisma__CareEpisodeClient<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CareEpisode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CareEpisodeFindUniqueOrThrowArgs} args - Arguments to find a CareEpisode
     * @example
     * // Get one CareEpisode
     * const careEpisode = await prisma.careEpisode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CareEpisodeFindUniqueOrThrowArgs>(args: SelectSubset<T, CareEpisodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CareEpisodeClient<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CareEpisode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareEpisodeFindFirstArgs} args - Arguments to find a CareEpisode
     * @example
     * // Get one CareEpisode
     * const careEpisode = await prisma.careEpisode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CareEpisodeFindFirstArgs>(args?: SelectSubset<T, CareEpisodeFindFirstArgs<ExtArgs>>): Prisma__CareEpisodeClient<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CareEpisode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareEpisodeFindFirstOrThrowArgs} args - Arguments to find a CareEpisode
     * @example
     * // Get one CareEpisode
     * const careEpisode = await prisma.careEpisode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CareEpisodeFindFirstOrThrowArgs>(args?: SelectSubset<T, CareEpisodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CareEpisodeClient<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CareEpisodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareEpisodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CareEpisodes
     * const careEpisodes = await prisma.careEpisode.findMany()
     * 
     * // Get first 10 CareEpisodes
     * const careEpisodes = await prisma.careEpisode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const careEpisodeWithIdOnly = await prisma.careEpisode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CareEpisodeFindManyArgs>(args?: SelectSubset<T, CareEpisodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CareEpisode.
     * @param {CareEpisodeCreateArgs} args - Arguments to create a CareEpisode.
     * @example
     * // Create one CareEpisode
     * const CareEpisode = await prisma.careEpisode.create({
     *   data: {
     *     // ... data to create a CareEpisode
     *   }
     * })
     * 
     */
    create<T extends CareEpisodeCreateArgs>(args: SelectSubset<T, CareEpisodeCreateArgs<ExtArgs>>): Prisma__CareEpisodeClient<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CareEpisodes.
     * @param {CareEpisodeCreateManyArgs} args - Arguments to create many CareEpisodes.
     * @example
     * // Create many CareEpisodes
     * const careEpisode = await prisma.careEpisode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CareEpisodeCreateManyArgs>(args?: SelectSubset<T, CareEpisodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CareEpisodes and returns the data saved in the database.
     * @param {CareEpisodeCreateManyAndReturnArgs} args - Arguments to create many CareEpisodes.
     * @example
     * // Create many CareEpisodes
     * const careEpisode = await prisma.careEpisode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CareEpisodes and only return the `id`
     * const careEpisodeWithIdOnly = await prisma.careEpisode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CareEpisodeCreateManyAndReturnArgs>(args?: SelectSubset<T, CareEpisodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CareEpisode.
     * @param {CareEpisodeDeleteArgs} args - Arguments to delete one CareEpisode.
     * @example
     * // Delete one CareEpisode
     * const CareEpisode = await prisma.careEpisode.delete({
     *   where: {
     *     // ... filter to delete one CareEpisode
     *   }
     * })
     * 
     */
    delete<T extends CareEpisodeDeleteArgs>(args: SelectSubset<T, CareEpisodeDeleteArgs<ExtArgs>>): Prisma__CareEpisodeClient<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CareEpisode.
     * @param {CareEpisodeUpdateArgs} args - Arguments to update one CareEpisode.
     * @example
     * // Update one CareEpisode
     * const careEpisode = await prisma.careEpisode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CareEpisodeUpdateArgs>(args: SelectSubset<T, CareEpisodeUpdateArgs<ExtArgs>>): Prisma__CareEpisodeClient<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CareEpisodes.
     * @param {CareEpisodeDeleteManyArgs} args - Arguments to filter CareEpisodes to delete.
     * @example
     * // Delete a few CareEpisodes
     * const { count } = await prisma.careEpisode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CareEpisodeDeleteManyArgs>(args?: SelectSubset<T, CareEpisodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CareEpisodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareEpisodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CareEpisodes
     * const careEpisode = await prisma.careEpisode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CareEpisodeUpdateManyArgs>(args: SelectSubset<T, CareEpisodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CareEpisodes and returns the data updated in the database.
     * @param {CareEpisodeUpdateManyAndReturnArgs} args - Arguments to update many CareEpisodes.
     * @example
     * // Update many CareEpisodes
     * const careEpisode = await prisma.careEpisode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CareEpisodes and only return the `id`
     * const careEpisodeWithIdOnly = await prisma.careEpisode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CareEpisodeUpdateManyAndReturnArgs>(args: SelectSubset<T, CareEpisodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CareEpisode.
     * @param {CareEpisodeUpsertArgs} args - Arguments to update or create a CareEpisode.
     * @example
     * // Update or create a CareEpisode
     * const careEpisode = await prisma.careEpisode.upsert({
     *   create: {
     *     // ... data to create a CareEpisode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CareEpisode we want to update
     *   }
     * })
     */
    upsert<T extends CareEpisodeUpsertArgs>(args: SelectSubset<T, CareEpisodeUpsertArgs<ExtArgs>>): Prisma__CareEpisodeClient<$Result.GetResult<Prisma.$CareEpisodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CareEpisodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareEpisodeCountArgs} args - Arguments to filter CareEpisodes to count.
     * @example
     * // Count the number of CareEpisodes
     * const count = await prisma.careEpisode.count({
     *   where: {
     *     // ... the filter for the CareEpisodes we want to count
     *   }
     * })
    **/
    count<T extends CareEpisodeCountArgs>(
      args?: Subset<T, CareEpisodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CareEpisodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CareEpisode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareEpisodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CareEpisodeAggregateArgs>(args: Subset<T, CareEpisodeAggregateArgs>): Prisma.PrismaPromise<GetCareEpisodeAggregateType<T>>

    /**
     * Group by CareEpisode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareEpisodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CareEpisodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CareEpisodeGroupByArgs['orderBy'] }
        : { orderBy?: CareEpisodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CareEpisodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCareEpisodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CareEpisode model
   */
  readonly fields: CareEpisodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CareEpisode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CareEpisodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    practice<T extends PracticeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PracticeDefaultArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CareEpisode model
   */
  interface CareEpisodeFieldRefs {
    readonly id: FieldRef<"CareEpisode", 'String'>
    readonly patientId: FieldRef<"CareEpisode", 'String'>
    readonly practiceId: FieldRef<"CareEpisode", 'String'>
    readonly startAt: FieldRef<"CareEpisode", 'DateTime'>
    readonly endAt: FieldRef<"CareEpisode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CareEpisode findUnique
   */
  export type CareEpisodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
    /**
     * Filter, which CareEpisode to fetch.
     */
    where: CareEpisodeWhereUniqueInput
  }

  /**
   * CareEpisode findUniqueOrThrow
   */
  export type CareEpisodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
    /**
     * Filter, which CareEpisode to fetch.
     */
    where: CareEpisodeWhereUniqueInput
  }

  /**
   * CareEpisode findFirst
   */
  export type CareEpisodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
    /**
     * Filter, which CareEpisode to fetch.
     */
    where?: CareEpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareEpisodes to fetch.
     */
    orderBy?: CareEpisodeOrderByWithRelationInput | CareEpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CareEpisodes.
     */
    cursor?: CareEpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareEpisodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareEpisodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CareEpisodes.
     */
    distinct?: CareEpisodeScalarFieldEnum | CareEpisodeScalarFieldEnum[]
  }

  /**
   * CareEpisode findFirstOrThrow
   */
  export type CareEpisodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
    /**
     * Filter, which CareEpisode to fetch.
     */
    where?: CareEpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareEpisodes to fetch.
     */
    orderBy?: CareEpisodeOrderByWithRelationInput | CareEpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CareEpisodes.
     */
    cursor?: CareEpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareEpisodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareEpisodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CareEpisodes.
     */
    distinct?: CareEpisodeScalarFieldEnum | CareEpisodeScalarFieldEnum[]
  }

  /**
   * CareEpisode findMany
   */
  export type CareEpisodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
    /**
     * Filter, which CareEpisodes to fetch.
     */
    where?: CareEpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareEpisodes to fetch.
     */
    orderBy?: CareEpisodeOrderByWithRelationInput | CareEpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CareEpisodes.
     */
    cursor?: CareEpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareEpisodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareEpisodes.
     */
    skip?: number
    distinct?: CareEpisodeScalarFieldEnum | CareEpisodeScalarFieldEnum[]
  }

  /**
   * CareEpisode create
   */
  export type CareEpisodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
    /**
     * The data needed to create a CareEpisode.
     */
    data: XOR<CareEpisodeCreateInput, CareEpisodeUncheckedCreateInput>
  }

  /**
   * CareEpisode createMany
   */
  export type CareEpisodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CareEpisodes.
     */
    data: CareEpisodeCreateManyInput | CareEpisodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CareEpisode createManyAndReturn
   */
  export type CareEpisodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * The data used to create many CareEpisodes.
     */
    data: CareEpisodeCreateManyInput | CareEpisodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CareEpisode update
   */
  export type CareEpisodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
    /**
     * The data needed to update a CareEpisode.
     */
    data: XOR<CareEpisodeUpdateInput, CareEpisodeUncheckedUpdateInput>
    /**
     * Choose, which CareEpisode to update.
     */
    where: CareEpisodeWhereUniqueInput
  }

  /**
   * CareEpisode updateMany
   */
  export type CareEpisodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CareEpisodes.
     */
    data: XOR<CareEpisodeUpdateManyMutationInput, CareEpisodeUncheckedUpdateManyInput>
    /**
     * Filter which CareEpisodes to update
     */
    where?: CareEpisodeWhereInput
    /**
     * Limit how many CareEpisodes to update.
     */
    limit?: number
  }

  /**
   * CareEpisode updateManyAndReturn
   */
  export type CareEpisodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * The data used to update CareEpisodes.
     */
    data: XOR<CareEpisodeUpdateManyMutationInput, CareEpisodeUncheckedUpdateManyInput>
    /**
     * Filter which CareEpisodes to update
     */
    where?: CareEpisodeWhereInput
    /**
     * Limit how many CareEpisodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CareEpisode upsert
   */
  export type CareEpisodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
    /**
     * The filter to search for the CareEpisode to update in case it exists.
     */
    where: CareEpisodeWhereUniqueInput
    /**
     * In case the CareEpisode found by the `where` argument doesn't exist, create a new CareEpisode with this data.
     */
    create: XOR<CareEpisodeCreateInput, CareEpisodeUncheckedCreateInput>
    /**
     * In case the CareEpisode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CareEpisodeUpdateInput, CareEpisodeUncheckedUpdateInput>
  }

  /**
   * CareEpisode delete
   */
  export type CareEpisodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
    /**
     * Filter which CareEpisode to delete.
     */
    where: CareEpisodeWhereUniqueInput
  }

  /**
   * CareEpisode deleteMany
   */
  export type CareEpisodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CareEpisodes to delete
     */
    where?: CareEpisodeWhereInput
    /**
     * Limit how many CareEpisodes to delete.
     */
    limit?: number
  }

  /**
   * CareEpisode without action
   */
  export type CareEpisodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareEpisode
     */
    select?: CareEpisodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareEpisode
     */
    omit?: CareEpisodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareEpisodeInclude<ExtArgs> | null
  }


  /**
   * Model Bundle
   */

  export type AggregateBundle = {
    _count: BundleCountAggregateOutputType | null
    _min: BundleMinAggregateOutputType | null
    _max: BundleMaxAggregateOutputType | null
  }

  export type BundleMinAggregateOutputType = {
    id: string | null
    networkId: string | null
    createdAt: Date | null
  }

  export type BundleMaxAggregateOutputType = {
    id: string | null
    networkId: string | null
    createdAt: Date | null
  }

  export type BundleCountAggregateOutputType = {
    id: number
    networkId: number
    meta: number
    data: number
    createdAt: number
    _all: number
  }


  export type BundleMinAggregateInputType = {
    id?: true
    networkId?: true
    createdAt?: true
  }

  export type BundleMaxAggregateInputType = {
    id?: true
    networkId?: true
    createdAt?: true
  }

  export type BundleCountAggregateInputType = {
    id?: true
    networkId?: true
    meta?: true
    data?: true
    createdAt?: true
    _all?: true
  }

  export type BundleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bundle to aggregate.
     */
    where?: BundleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bundles to fetch.
     */
    orderBy?: BundleOrderByWithRelationInput | BundleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BundleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bundles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bundles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bundles
    **/
    _count?: true | BundleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BundleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BundleMaxAggregateInputType
  }

  export type GetBundleAggregateType<T extends BundleAggregateArgs> = {
        [P in keyof T & keyof AggregateBundle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBundle[P]>
      : GetScalarType<T[P], AggregateBundle[P]>
  }




  export type BundleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BundleWhereInput
    orderBy?: BundleOrderByWithAggregationInput | BundleOrderByWithAggregationInput[]
    by: BundleScalarFieldEnum[] | BundleScalarFieldEnum
    having?: BundleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BundleCountAggregateInputType | true
    _min?: BundleMinAggregateInputType
    _max?: BundleMaxAggregateInputType
  }

  export type BundleGroupByOutputType = {
    id: string
    networkId: string
    meta: JsonValue | null
    data: JsonValue | null
    createdAt: Date
    _count: BundleCountAggregateOutputType | null
    _min: BundleMinAggregateOutputType | null
    _max: BundleMaxAggregateOutputType | null
  }

  type GetBundleGroupByPayload<T extends BundleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BundleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BundleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BundleGroupByOutputType[P]>
            : GetScalarType<T[P], BundleGroupByOutputType[P]>
        }
      >
    >


  export type BundleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    networkId?: boolean
    meta?: boolean
    data?: boolean
    createdAt?: boolean
    network?: boolean | NetworkDefaultArgs<ExtArgs>
    submissions?: boolean | Bundle$submissionsArgs<ExtArgs>
    networksAsCurrent?: boolean | Bundle$networksAsCurrentArgs<ExtArgs>
    _count?: boolean | BundleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bundle"]>

  export type BundleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    networkId?: boolean
    meta?: boolean
    data?: boolean
    createdAt?: boolean
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bundle"]>

  export type BundleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    networkId?: boolean
    meta?: boolean
    data?: boolean
    createdAt?: boolean
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bundle"]>

  export type BundleSelectScalar = {
    id?: boolean
    networkId?: boolean
    meta?: boolean
    data?: boolean
    createdAt?: boolean
  }

  export type BundleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "networkId" | "meta" | "data" | "createdAt", ExtArgs["result"]["bundle"]>
  export type BundleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    network?: boolean | NetworkDefaultArgs<ExtArgs>
    submissions?: boolean | Bundle$submissionsArgs<ExtArgs>
    networksAsCurrent?: boolean | Bundle$networksAsCurrentArgs<ExtArgs>
    _count?: boolean | BundleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BundleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }
  export type BundleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }

  export type $BundlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bundle"
    objects: {
      network: Prisma.$NetworkPayload<ExtArgs>
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      networksAsCurrent: Prisma.$NetworkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      networkId: string
      meta: Prisma.JsonValue | null
      data: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["bundle"]>
    composites: {}
  }

  type BundleGetPayload<S extends boolean | null | undefined | BundleDefaultArgs> = $Result.GetResult<Prisma.$BundlePayload, S>

  type BundleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BundleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BundleCountAggregateInputType | true
    }

  export interface BundleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bundle'], meta: { name: 'Bundle' } }
    /**
     * Find zero or one Bundle that matches the filter.
     * @param {BundleFindUniqueArgs} args - Arguments to find a Bundle
     * @example
     * // Get one Bundle
     * const bundle = await prisma.bundle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BundleFindUniqueArgs>(args: SelectSubset<T, BundleFindUniqueArgs<ExtArgs>>): Prisma__BundleClient<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bundle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BundleFindUniqueOrThrowArgs} args - Arguments to find a Bundle
     * @example
     * // Get one Bundle
     * const bundle = await prisma.bundle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BundleFindUniqueOrThrowArgs>(args: SelectSubset<T, BundleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BundleClient<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bundle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BundleFindFirstArgs} args - Arguments to find a Bundle
     * @example
     * // Get one Bundle
     * const bundle = await prisma.bundle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BundleFindFirstArgs>(args?: SelectSubset<T, BundleFindFirstArgs<ExtArgs>>): Prisma__BundleClient<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bundle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BundleFindFirstOrThrowArgs} args - Arguments to find a Bundle
     * @example
     * // Get one Bundle
     * const bundle = await prisma.bundle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BundleFindFirstOrThrowArgs>(args?: SelectSubset<T, BundleFindFirstOrThrowArgs<ExtArgs>>): Prisma__BundleClient<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bundles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BundleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bundles
     * const bundles = await prisma.bundle.findMany()
     * 
     * // Get first 10 Bundles
     * const bundles = await prisma.bundle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bundleWithIdOnly = await prisma.bundle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BundleFindManyArgs>(args?: SelectSubset<T, BundleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bundle.
     * @param {BundleCreateArgs} args - Arguments to create a Bundle.
     * @example
     * // Create one Bundle
     * const Bundle = await prisma.bundle.create({
     *   data: {
     *     // ... data to create a Bundle
     *   }
     * })
     * 
     */
    create<T extends BundleCreateArgs>(args: SelectSubset<T, BundleCreateArgs<ExtArgs>>): Prisma__BundleClient<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bundles.
     * @param {BundleCreateManyArgs} args - Arguments to create many Bundles.
     * @example
     * // Create many Bundles
     * const bundle = await prisma.bundle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BundleCreateManyArgs>(args?: SelectSubset<T, BundleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bundles and returns the data saved in the database.
     * @param {BundleCreateManyAndReturnArgs} args - Arguments to create many Bundles.
     * @example
     * // Create many Bundles
     * const bundle = await prisma.bundle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bundles and only return the `id`
     * const bundleWithIdOnly = await prisma.bundle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BundleCreateManyAndReturnArgs>(args?: SelectSubset<T, BundleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bundle.
     * @param {BundleDeleteArgs} args - Arguments to delete one Bundle.
     * @example
     * // Delete one Bundle
     * const Bundle = await prisma.bundle.delete({
     *   where: {
     *     // ... filter to delete one Bundle
     *   }
     * })
     * 
     */
    delete<T extends BundleDeleteArgs>(args: SelectSubset<T, BundleDeleteArgs<ExtArgs>>): Prisma__BundleClient<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bundle.
     * @param {BundleUpdateArgs} args - Arguments to update one Bundle.
     * @example
     * // Update one Bundle
     * const bundle = await prisma.bundle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BundleUpdateArgs>(args: SelectSubset<T, BundleUpdateArgs<ExtArgs>>): Prisma__BundleClient<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bundles.
     * @param {BundleDeleteManyArgs} args - Arguments to filter Bundles to delete.
     * @example
     * // Delete a few Bundles
     * const { count } = await prisma.bundle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BundleDeleteManyArgs>(args?: SelectSubset<T, BundleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bundles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BundleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bundles
     * const bundle = await prisma.bundle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BundleUpdateManyArgs>(args: SelectSubset<T, BundleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bundles and returns the data updated in the database.
     * @param {BundleUpdateManyAndReturnArgs} args - Arguments to update many Bundles.
     * @example
     * // Update many Bundles
     * const bundle = await prisma.bundle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bundles and only return the `id`
     * const bundleWithIdOnly = await prisma.bundle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BundleUpdateManyAndReturnArgs>(args: SelectSubset<T, BundleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bundle.
     * @param {BundleUpsertArgs} args - Arguments to update or create a Bundle.
     * @example
     * // Update or create a Bundle
     * const bundle = await prisma.bundle.upsert({
     *   create: {
     *     // ... data to create a Bundle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bundle we want to update
     *   }
     * })
     */
    upsert<T extends BundleUpsertArgs>(args: SelectSubset<T, BundleUpsertArgs<ExtArgs>>): Prisma__BundleClient<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bundles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BundleCountArgs} args - Arguments to filter Bundles to count.
     * @example
     * // Count the number of Bundles
     * const count = await prisma.bundle.count({
     *   where: {
     *     // ... the filter for the Bundles we want to count
     *   }
     * })
    **/
    count<T extends BundleCountArgs>(
      args?: Subset<T, BundleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BundleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bundle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BundleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BundleAggregateArgs>(args: Subset<T, BundleAggregateArgs>): Prisma.PrismaPromise<GetBundleAggregateType<T>>

    /**
     * Group by Bundle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BundleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BundleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BundleGroupByArgs['orderBy'] }
        : { orderBy?: BundleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BundleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBundleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bundle model
   */
  readonly fields: BundleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bundle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BundleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    network<T extends NetworkDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NetworkDefaultArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submissions<T extends Bundle$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Bundle$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    networksAsCurrent<T extends Bundle$networksAsCurrentArgs<ExtArgs> = {}>(args?: Subset<T, Bundle$networksAsCurrentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bundle model
   */
  interface BundleFieldRefs {
    readonly id: FieldRef<"Bundle", 'String'>
    readonly networkId: FieldRef<"Bundle", 'String'>
    readonly meta: FieldRef<"Bundle", 'Json'>
    readonly data: FieldRef<"Bundle", 'Json'>
    readonly createdAt: FieldRef<"Bundle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Bundle findUnique
   */
  export type BundleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
    /**
     * Filter, which Bundle to fetch.
     */
    where: BundleWhereUniqueInput
  }

  /**
   * Bundle findUniqueOrThrow
   */
  export type BundleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
    /**
     * Filter, which Bundle to fetch.
     */
    where: BundleWhereUniqueInput
  }

  /**
   * Bundle findFirst
   */
  export type BundleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
    /**
     * Filter, which Bundle to fetch.
     */
    where?: BundleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bundles to fetch.
     */
    orderBy?: BundleOrderByWithRelationInput | BundleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bundles.
     */
    cursor?: BundleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bundles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bundles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bundles.
     */
    distinct?: BundleScalarFieldEnum | BundleScalarFieldEnum[]
  }

  /**
   * Bundle findFirstOrThrow
   */
  export type BundleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
    /**
     * Filter, which Bundle to fetch.
     */
    where?: BundleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bundles to fetch.
     */
    orderBy?: BundleOrderByWithRelationInput | BundleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bundles.
     */
    cursor?: BundleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bundles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bundles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bundles.
     */
    distinct?: BundleScalarFieldEnum | BundleScalarFieldEnum[]
  }

  /**
   * Bundle findMany
   */
  export type BundleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
    /**
     * Filter, which Bundles to fetch.
     */
    where?: BundleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bundles to fetch.
     */
    orderBy?: BundleOrderByWithRelationInput | BundleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bundles.
     */
    cursor?: BundleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bundles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bundles.
     */
    skip?: number
    distinct?: BundleScalarFieldEnum | BundleScalarFieldEnum[]
  }

  /**
   * Bundle create
   */
  export type BundleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
    /**
     * The data needed to create a Bundle.
     */
    data: XOR<BundleCreateInput, BundleUncheckedCreateInput>
  }

  /**
   * Bundle createMany
   */
  export type BundleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bundles.
     */
    data: BundleCreateManyInput | BundleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bundle createManyAndReturn
   */
  export type BundleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * The data used to create many Bundles.
     */
    data: BundleCreateManyInput | BundleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bundle update
   */
  export type BundleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
    /**
     * The data needed to update a Bundle.
     */
    data: XOR<BundleUpdateInput, BundleUncheckedUpdateInput>
    /**
     * Choose, which Bundle to update.
     */
    where: BundleWhereUniqueInput
  }

  /**
   * Bundle updateMany
   */
  export type BundleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bundles.
     */
    data: XOR<BundleUpdateManyMutationInput, BundleUncheckedUpdateManyInput>
    /**
     * Filter which Bundles to update
     */
    where?: BundleWhereInput
    /**
     * Limit how many Bundles to update.
     */
    limit?: number
  }

  /**
   * Bundle updateManyAndReturn
   */
  export type BundleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * The data used to update Bundles.
     */
    data: XOR<BundleUpdateManyMutationInput, BundleUncheckedUpdateManyInput>
    /**
     * Filter which Bundles to update
     */
    where?: BundleWhereInput
    /**
     * Limit how many Bundles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bundle upsert
   */
  export type BundleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
    /**
     * The filter to search for the Bundle to update in case it exists.
     */
    where: BundleWhereUniqueInput
    /**
     * In case the Bundle found by the `where` argument doesn't exist, create a new Bundle with this data.
     */
    create: XOR<BundleCreateInput, BundleUncheckedCreateInput>
    /**
     * In case the Bundle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BundleUpdateInput, BundleUncheckedUpdateInput>
  }

  /**
   * Bundle delete
   */
  export type BundleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
    /**
     * Filter which Bundle to delete.
     */
    where: BundleWhereUniqueInput
  }

  /**
   * Bundle deleteMany
   */
  export type BundleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bundles to delete
     */
    where?: BundleWhereInput
    /**
     * Limit how many Bundles to delete.
     */
    limit?: number
  }

  /**
   * Bundle.submissions
   */
  export type Bundle$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Bundle.networksAsCurrent
   */
  export type Bundle$networksAsCurrentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    where?: NetworkWhereInput
    orderBy?: NetworkOrderByWithRelationInput | NetworkOrderByWithRelationInput[]
    cursor?: NetworkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NetworkScalarFieldEnum | NetworkScalarFieldEnum[]
  }

  /**
   * Bundle without action
   */
  export type BundleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bundle
     */
    select?: BundleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bundle
     */
    omit?: BundleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BundleInclude<ExtArgs> | null
  }


  /**
   * Model Submission
   */

  export type AggregateSubmission = {
    _count: SubmissionCountAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  export type SubmissionMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    bundleId: string | null
    bundleHash: string | null
    ciphertext: string | null
    iv: string | null
    tag: string | null
    wrappedDEK: string | null
    createdAt: Date | null
  }

  export type SubmissionMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    bundleId: string | null
    bundleHash: string | null
    ciphertext: string | null
    iv: string | null
    tag: string | null
    wrappedDEK: string | null
    createdAt: Date | null
  }

  export type SubmissionCountAggregateOutputType = {
    id: number
    patientId: number
    bundleId: number
    bundleHash: number
    ciphertext: number
    iv: number
    tag: number
    wrappedDEK: number
    createdAt: number
    _all: number
  }


  export type SubmissionMinAggregateInputType = {
    id?: true
    patientId?: true
    bundleId?: true
    bundleHash?: true
    ciphertext?: true
    iv?: true
    tag?: true
    wrappedDEK?: true
    createdAt?: true
  }

  export type SubmissionMaxAggregateInputType = {
    id?: true
    patientId?: true
    bundleId?: true
    bundleHash?: true
    ciphertext?: true
    iv?: true
    tag?: true
    wrappedDEK?: true
    createdAt?: true
  }

  export type SubmissionCountAggregateInputType = {
    id?: true
    patientId?: true
    bundleId?: true
    bundleHash?: true
    ciphertext?: true
    iv?: true
    tag?: true
    wrappedDEK?: true
    createdAt?: true
    _all?: true
  }

  export type SubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submission to aggregate.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submissions
    **/
    _count?: true | SubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionMaxAggregateInputType
  }

  export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmission[P]>
      : GetScalarType<T[P], AggregateSubmission[P]>
  }




  export type SubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithAggregationInput | SubmissionOrderByWithAggregationInput[]
    by: SubmissionScalarFieldEnum[] | SubmissionScalarFieldEnum
    having?: SubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCountAggregateInputType | true
    _min?: SubmissionMinAggregateInputType
    _max?: SubmissionMaxAggregateInputType
  }

  export type SubmissionGroupByOutputType = {
    id: string
    patientId: string
    bundleId: string
    bundleHash: string
    ciphertext: string
    iv: string
    tag: string
    wrappedDEK: string
    createdAt: Date
    _count: SubmissionCountAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  type GetSubmissionGroupByPayload<T extends SubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    bundleId?: boolean
    bundleHash?: boolean
    ciphertext?: boolean
    iv?: boolean
    tag?: boolean
    wrappedDEK?: boolean
    createdAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    bundle?: boolean | BundleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    bundleId?: boolean
    bundleHash?: boolean
    ciphertext?: boolean
    iv?: boolean
    tag?: boolean
    wrappedDEK?: boolean
    createdAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    bundle?: boolean | BundleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    bundleId?: boolean
    bundleHash?: boolean
    ciphertext?: boolean
    iv?: boolean
    tag?: boolean
    wrappedDEK?: boolean
    createdAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    bundle?: boolean | BundleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectScalar = {
    id?: boolean
    patientId?: boolean
    bundleId?: boolean
    bundleHash?: boolean
    ciphertext?: boolean
    iv?: boolean
    tag?: boolean
    wrappedDEK?: boolean
    createdAt?: boolean
  }

  export type SubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "bundleId" | "bundleHash" | "ciphertext" | "iv" | "tag" | "wrappedDEK" | "createdAt", ExtArgs["result"]["submission"]>
  export type SubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    bundle?: boolean | BundleDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    bundle?: boolean | BundleDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    bundle?: boolean | BundleDefaultArgs<ExtArgs>
  }

  export type $SubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submission"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      bundle: Prisma.$BundlePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      bundleId: string
      bundleHash: string
      ciphertext: string
      iv: string
      tag: string
      wrappedDEK: string
      createdAt: Date
    }, ExtArgs["result"]["submission"]>
    composites: {}
  }

  type SubmissionGetPayload<S extends boolean | null | undefined | SubmissionDefaultArgs> = $Result.GetResult<Prisma.$SubmissionPayload, S>

  type SubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionCountAggregateInputType | true
    }

  export interface SubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submission'], meta: { name: 'Submission' } }
    /**
     * Find zero or one Submission that matches the filter.
     * @param {SubmissionFindUniqueArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionFindUniqueArgs>(args: SelectSubset<T, SubmissionFindUniqueArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Submission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionFindFirstArgs>(args?: SelectSubset<T, SubmissionFindFirstArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submission.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissionWithIdOnly = await prisma.submission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissionFindManyArgs>(args?: SelectSubset<T, SubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Submission.
     * @param {SubmissionCreateArgs} args - Arguments to create a Submission.
     * @example
     * // Create one Submission
     * const Submission = await prisma.submission.create({
     *   data: {
     *     // ... data to create a Submission
     *   }
     * })
     * 
     */
    create<T extends SubmissionCreateArgs>(args: SelectSubset<T, SubmissionCreateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Submissions.
     * @param {SubmissionCreateManyArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionCreateManyArgs>(args?: SelectSubset<T, SubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Submissions and returns the data saved in the database.
     * @param {SubmissionCreateManyAndReturnArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Submission.
     * @param {SubmissionDeleteArgs} args - Arguments to delete one Submission.
     * @example
     * // Delete one Submission
     * const Submission = await prisma.submission.delete({
     *   where: {
     *     // ... filter to delete one Submission
     *   }
     * })
     * 
     */
    delete<T extends SubmissionDeleteArgs>(args: SelectSubset<T, SubmissionDeleteArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Submission.
     * @param {SubmissionUpdateArgs} args - Arguments to update one Submission.
     * @example
     * // Update one Submission
     * const submission = await prisma.submission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionUpdateArgs>(args: SelectSubset<T, SubmissionUpdateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Submissions.
     * @param {SubmissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionDeleteManyArgs>(args?: SelectSubset<T, SubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionUpdateManyArgs>(args: SelectSubset<T, SubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions and returns the data updated in the database.
     * @param {SubmissionUpdateManyAndReturnArgs} args - Arguments to update many Submissions.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Submission.
     * @param {SubmissionUpsertArgs} args - Arguments to update or create a Submission.
     * @example
     * // Update or create a Submission
     * const submission = await prisma.submission.upsert({
     *   create: {
     *     // ... data to create a Submission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submission we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionUpsertArgs>(args: SelectSubset<T, SubmissionUpsertArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submission.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends SubmissionCountArgs>(
      args?: Subset<T, SubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionAggregateArgs>(args: Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

    /**
     * Group by Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submission model
   */
  readonly fields: SubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bundle<T extends BundleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BundleDefaultArgs<ExtArgs>>): Prisma__BundleClient<$Result.GetResult<Prisma.$BundlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Submission model
   */
  interface SubmissionFieldRefs {
    readonly id: FieldRef<"Submission", 'String'>
    readonly patientId: FieldRef<"Submission", 'String'>
    readonly bundleId: FieldRef<"Submission", 'String'>
    readonly bundleHash: FieldRef<"Submission", 'String'>
    readonly ciphertext: FieldRef<"Submission", 'String'>
    readonly iv: FieldRef<"Submission", 'String'>
    readonly tag: FieldRef<"Submission", 'String'>
    readonly wrappedDEK: FieldRef<"Submission", 'String'>
    readonly createdAt: FieldRef<"Submission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Submission findUnique
   */
  export type SubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findUniqueOrThrow
   */
  export type SubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findFirst
   */
  export type SubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findFirstOrThrow
   */
  export type SubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findMany
   */
  export type SubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submissions to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission create
   */
  export type SubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Submission.
     */
    data: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
  }

  /**
   * Submission createMany
   */
  export type SubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Submission createManyAndReturn
   */
  export type SubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission update
   */
  export type SubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Submission.
     */
    data: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
    /**
     * Choose, which Submission to update.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission updateMany
   */
  export type SubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
  }

  /**
   * Submission updateManyAndReturn
   */
  export type SubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission upsert
   */
  export type SubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Submission to update in case it exists.
     */
    where: SubmissionWhereUniqueInput
    /**
     * In case the Submission found by the `where` argument doesn't exist, create a new Submission with this data.
     */
    create: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
    /**
     * In case the Submission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
  }

  /**
   * Submission delete
   */
  export type SubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter which Submission to delete.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission deleteMany
   */
  export type SubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissions to delete
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to delete.
     */
    limit?: number
  }

  /**
   * Submission without action
   */
  export type SubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    orgMemberships?: boolean | User$orgMembershipsArgs<ExtArgs>
    networkMemberships?: boolean | User$networkMembershipsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orgMemberships?: boolean | User$orgMembershipsArgs<ExtArgs>
    networkMemberships?: boolean | User$networkMembershipsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      orgMemberships: Prisma.$OrgMembershipPayload<ExtArgs>[]
      networkMemberships: Prisma.$NetworkMembershipPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orgMemberships<T extends User$orgMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$orgMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    networkMemberships<T extends User$networkMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$networkMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.orgMemberships
   */
  export type User$orgMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
    where?: OrgMembershipWhereInput
    orderBy?: OrgMembershipOrderByWithRelationInput | OrgMembershipOrderByWithRelationInput[]
    cursor?: OrgMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrgMembershipScalarFieldEnum | OrgMembershipScalarFieldEnum[]
  }

  /**
   * User.networkMemberships
   */
  export type User$networkMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
    where?: NetworkMembershipWhereInput
    orderBy?: NetworkMembershipOrderByWithRelationInput | NetworkMembershipOrderByWithRelationInput[]
    cursor?: NetworkMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NetworkMembershipScalarFieldEnum | NetworkMembershipScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model OrgMembership
   */

  export type AggregateOrgMembership = {
    _count: OrgMembershipCountAggregateOutputType | null
    _min: OrgMembershipMinAggregateOutputType | null
    _max: OrgMembershipMaxAggregateOutputType | null
  }

  export type OrgMembershipMinAggregateOutputType = {
    userId: string | null
    orgId: string | null
    role: $Enums.OrgRole | null
  }

  export type OrgMembershipMaxAggregateOutputType = {
    userId: string | null
    orgId: string | null
    role: $Enums.OrgRole | null
  }

  export type OrgMembershipCountAggregateOutputType = {
    userId: number
    orgId: number
    role: number
    _all: number
  }


  export type OrgMembershipMinAggregateInputType = {
    userId?: true
    orgId?: true
    role?: true
  }

  export type OrgMembershipMaxAggregateInputType = {
    userId?: true
    orgId?: true
    role?: true
  }

  export type OrgMembershipCountAggregateInputType = {
    userId?: true
    orgId?: true
    role?: true
    _all?: true
  }

  export type OrgMembershipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrgMembership to aggregate.
     */
    where?: OrgMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMemberships to fetch.
     */
    orderBy?: OrgMembershipOrderByWithRelationInput | OrgMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrgMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrgMemberships
    **/
    _count?: true | OrgMembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrgMembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrgMembershipMaxAggregateInputType
  }

  export type GetOrgMembershipAggregateType<T extends OrgMembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateOrgMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrgMembership[P]>
      : GetScalarType<T[P], AggregateOrgMembership[P]>
  }




  export type OrgMembershipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrgMembershipWhereInput
    orderBy?: OrgMembershipOrderByWithAggregationInput | OrgMembershipOrderByWithAggregationInput[]
    by: OrgMembershipScalarFieldEnum[] | OrgMembershipScalarFieldEnum
    having?: OrgMembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrgMembershipCountAggregateInputType | true
    _min?: OrgMembershipMinAggregateInputType
    _max?: OrgMembershipMaxAggregateInputType
  }

  export type OrgMembershipGroupByOutputType = {
    userId: string
    orgId: string
    role: $Enums.OrgRole
    _count: OrgMembershipCountAggregateOutputType | null
    _min: OrgMembershipMinAggregateOutputType | null
    _max: OrgMembershipMaxAggregateOutputType | null
  }

  type GetOrgMembershipGroupByPayload<T extends OrgMembershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrgMembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrgMembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrgMembershipGroupByOutputType[P]>
            : GetScalarType<T[P], OrgMembershipGroupByOutputType[P]>
        }
      >
    >


  export type OrgMembershipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    orgId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | OrgDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orgMembership"]>

  export type OrgMembershipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    orgId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | OrgDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orgMembership"]>

  export type OrgMembershipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    orgId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | OrgDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orgMembership"]>

  export type OrgMembershipSelectScalar = {
    userId?: boolean
    orgId?: boolean
    role?: boolean
  }

  export type OrgMembershipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "orgId" | "role", ExtArgs["result"]["orgMembership"]>
  export type OrgMembershipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | OrgDefaultArgs<ExtArgs>
  }
  export type OrgMembershipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | OrgDefaultArgs<ExtArgs>
  }
  export type OrgMembershipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | OrgDefaultArgs<ExtArgs>
  }

  export type $OrgMembershipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrgMembership"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      org: Prisma.$OrgPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      orgId: string
      role: $Enums.OrgRole
    }, ExtArgs["result"]["orgMembership"]>
    composites: {}
  }

  type OrgMembershipGetPayload<S extends boolean | null | undefined | OrgMembershipDefaultArgs> = $Result.GetResult<Prisma.$OrgMembershipPayload, S>

  type OrgMembershipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrgMembershipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrgMembershipCountAggregateInputType | true
    }

  export interface OrgMembershipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrgMembership'], meta: { name: 'OrgMembership' } }
    /**
     * Find zero or one OrgMembership that matches the filter.
     * @param {OrgMembershipFindUniqueArgs} args - Arguments to find a OrgMembership
     * @example
     * // Get one OrgMembership
     * const orgMembership = await prisma.orgMembership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrgMembershipFindUniqueArgs>(args: SelectSubset<T, OrgMembershipFindUniqueArgs<ExtArgs>>): Prisma__OrgMembershipClient<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrgMembership that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrgMembershipFindUniqueOrThrowArgs} args - Arguments to find a OrgMembership
     * @example
     * // Get one OrgMembership
     * const orgMembership = await prisma.orgMembership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrgMembershipFindUniqueOrThrowArgs>(args: SelectSubset<T, OrgMembershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrgMembershipClient<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrgMembership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMembershipFindFirstArgs} args - Arguments to find a OrgMembership
     * @example
     * // Get one OrgMembership
     * const orgMembership = await prisma.orgMembership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrgMembershipFindFirstArgs>(args?: SelectSubset<T, OrgMembershipFindFirstArgs<ExtArgs>>): Prisma__OrgMembershipClient<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrgMembership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMembershipFindFirstOrThrowArgs} args - Arguments to find a OrgMembership
     * @example
     * // Get one OrgMembership
     * const orgMembership = await prisma.orgMembership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrgMembershipFindFirstOrThrowArgs>(args?: SelectSubset<T, OrgMembershipFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrgMembershipClient<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrgMemberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMembershipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrgMemberships
     * const orgMemberships = await prisma.orgMembership.findMany()
     * 
     * // Get first 10 OrgMemberships
     * const orgMemberships = await prisma.orgMembership.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const orgMembershipWithUserIdOnly = await prisma.orgMembership.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends OrgMembershipFindManyArgs>(args?: SelectSubset<T, OrgMembershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrgMembership.
     * @param {OrgMembershipCreateArgs} args - Arguments to create a OrgMembership.
     * @example
     * // Create one OrgMembership
     * const OrgMembership = await prisma.orgMembership.create({
     *   data: {
     *     // ... data to create a OrgMembership
     *   }
     * })
     * 
     */
    create<T extends OrgMembershipCreateArgs>(args: SelectSubset<T, OrgMembershipCreateArgs<ExtArgs>>): Prisma__OrgMembershipClient<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrgMemberships.
     * @param {OrgMembershipCreateManyArgs} args - Arguments to create many OrgMemberships.
     * @example
     * // Create many OrgMemberships
     * const orgMembership = await prisma.orgMembership.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrgMembershipCreateManyArgs>(args?: SelectSubset<T, OrgMembershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrgMemberships and returns the data saved in the database.
     * @param {OrgMembershipCreateManyAndReturnArgs} args - Arguments to create many OrgMemberships.
     * @example
     * // Create many OrgMemberships
     * const orgMembership = await prisma.orgMembership.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrgMemberships and only return the `userId`
     * const orgMembershipWithUserIdOnly = await prisma.orgMembership.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrgMembershipCreateManyAndReturnArgs>(args?: SelectSubset<T, OrgMembershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrgMembership.
     * @param {OrgMembershipDeleteArgs} args - Arguments to delete one OrgMembership.
     * @example
     * // Delete one OrgMembership
     * const OrgMembership = await prisma.orgMembership.delete({
     *   where: {
     *     // ... filter to delete one OrgMembership
     *   }
     * })
     * 
     */
    delete<T extends OrgMembershipDeleteArgs>(args: SelectSubset<T, OrgMembershipDeleteArgs<ExtArgs>>): Prisma__OrgMembershipClient<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrgMembership.
     * @param {OrgMembershipUpdateArgs} args - Arguments to update one OrgMembership.
     * @example
     * // Update one OrgMembership
     * const orgMembership = await prisma.orgMembership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrgMembershipUpdateArgs>(args: SelectSubset<T, OrgMembershipUpdateArgs<ExtArgs>>): Prisma__OrgMembershipClient<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrgMemberships.
     * @param {OrgMembershipDeleteManyArgs} args - Arguments to filter OrgMemberships to delete.
     * @example
     * // Delete a few OrgMemberships
     * const { count } = await prisma.orgMembership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrgMembershipDeleteManyArgs>(args?: SelectSubset<T, OrgMembershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrgMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrgMemberships
     * const orgMembership = await prisma.orgMembership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrgMembershipUpdateManyArgs>(args: SelectSubset<T, OrgMembershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrgMemberships and returns the data updated in the database.
     * @param {OrgMembershipUpdateManyAndReturnArgs} args - Arguments to update many OrgMemberships.
     * @example
     * // Update many OrgMemberships
     * const orgMembership = await prisma.orgMembership.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrgMemberships and only return the `userId`
     * const orgMembershipWithUserIdOnly = await prisma.orgMembership.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrgMembershipUpdateManyAndReturnArgs>(args: SelectSubset<T, OrgMembershipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrgMembership.
     * @param {OrgMembershipUpsertArgs} args - Arguments to update or create a OrgMembership.
     * @example
     * // Update or create a OrgMembership
     * const orgMembership = await prisma.orgMembership.upsert({
     *   create: {
     *     // ... data to create a OrgMembership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrgMembership we want to update
     *   }
     * })
     */
    upsert<T extends OrgMembershipUpsertArgs>(args: SelectSubset<T, OrgMembershipUpsertArgs<ExtArgs>>): Prisma__OrgMembershipClient<$Result.GetResult<Prisma.$OrgMembershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrgMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMembershipCountArgs} args - Arguments to filter OrgMemberships to count.
     * @example
     * // Count the number of OrgMemberships
     * const count = await prisma.orgMembership.count({
     *   where: {
     *     // ... the filter for the OrgMemberships we want to count
     *   }
     * })
    **/
    count<T extends OrgMembershipCountArgs>(
      args?: Subset<T, OrgMembershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrgMembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrgMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrgMembershipAggregateArgs>(args: Subset<T, OrgMembershipAggregateArgs>): Prisma.PrismaPromise<GetOrgMembershipAggregateType<T>>

    /**
     * Group by OrgMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrgMembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrgMembershipGroupByArgs['orderBy'] }
        : { orderBy?: OrgMembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrgMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrgMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrgMembership model
   */
  readonly fields: OrgMembershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrgMembership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrgMembershipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    org<T extends OrgDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrgDefaultArgs<ExtArgs>>): Prisma__OrgClient<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrgMembership model
   */
  interface OrgMembershipFieldRefs {
    readonly userId: FieldRef<"OrgMembership", 'String'>
    readonly orgId: FieldRef<"OrgMembership", 'String'>
    readonly role: FieldRef<"OrgMembership", 'OrgRole'>
  }
    

  // Custom InputTypes
  /**
   * OrgMembership findUnique
   */
  export type OrgMembershipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
    /**
     * Filter, which OrgMembership to fetch.
     */
    where: OrgMembershipWhereUniqueInput
  }

  /**
   * OrgMembership findUniqueOrThrow
   */
  export type OrgMembershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
    /**
     * Filter, which OrgMembership to fetch.
     */
    where: OrgMembershipWhereUniqueInput
  }

  /**
   * OrgMembership findFirst
   */
  export type OrgMembershipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
    /**
     * Filter, which OrgMembership to fetch.
     */
    where?: OrgMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMemberships to fetch.
     */
    orderBy?: OrgMembershipOrderByWithRelationInput | OrgMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrgMemberships.
     */
    cursor?: OrgMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrgMemberships.
     */
    distinct?: OrgMembershipScalarFieldEnum | OrgMembershipScalarFieldEnum[]
  }

  /**
   * OrgMembership findFirstOrThrow
   */
  export type OrgMembershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
    /**
     * Filter, which OrgMembership to fetch.
     */
    where?: OrgMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMemberships to fetch.
     */
    orderBy?: OrgMembershipOrderByWithRelationInput | OrgMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrgMemberships.
     */
    cursor?: OrgMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrgMemberships.
     */
    distinct?: OrgMembershipScalarFieldEnum | OrgMembershipScalarFieldEnum[]
  }

  /**
   * OrgMembership findMany
   */
  export type OrgMembershipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
    /**
     * Filter, which OrgMemberships to fetch.
     */
    where?: OrgMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMemberships to fetch.
     */
    orderBy?: OrgMembershipOrderByWithRelationInput | OrgMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrgMemberships.
     */
    cursor?: OrgMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMemberships.
     */
    skip?: number
    distinct?: OrgMembershipScalarFieldEnum | OrgMembershipScalarFieldEnum[]
  }

  /**
   * OrgMembership create
   */
  export type OrgMembershipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
    /**
     * The data needed to create a OrgMembership.
     */
    data: XOR<OrgMembershipCreateInput, OrgMembershipUncheckedCreateInput>
  }

  /**
   * OrgMembership createMany
   */
  export type OrgMembershipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrgMemberships.
     */
    data: OrgMembershipCreateManyInput | OrgMembershipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrgMembership createManyAndReturn
   */
  export type OrgMembershipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * The data used to create many OrgMemberships.
     */
    data: OrgMembershipCreateManyInput | OrgMembershipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrgMembership update
   */
  export type OrgMembershipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
    /**
     * The data needed to update a OrgMembership.
     */
    data: XOR<OrgMembershipUpdateInput, OrgMembershipUncheckedUpdateInput>
    /**
     * Choose, which OrgMembership to update.
     */
    where: OrgMembershipWhereUniqueInput
  }

  /**
   * OrgMembership updateMany
   */
  export type OrgMembershipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrgMemberships.
     */
    data: XOR<OrgMembershipUpdateManyMutationInput, OrgMembershipUncheckedUpdateManyInput>
    /**
     * Filter which OrgMemberships to update
     */
    where?: OrgMembershipWhereInput
    /**
     * Limit how many OrgMemberships to update.
     */
    limit?: number
  }

  /**
   * OrgMembership updateManyAndReturn
   */
  export type OrgMembershipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * The data used to update OrgMemberships.
     */
    data: XOR<OrgMembershipUpdateManyMutationInput, OrgMembershipUncheckedUpdateManyInput>
    /**
     * Filter which OrgMemberships to update
     */
    where?: OrgMembershipWhereInput
    /**
     * Limit how many OrgMemberships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrgMembership upsert
   */
  export type OrgMembershipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
    /**
     * The filter to search for the OrgMembership to update in case it exists.
     */
    where: OrgMembershipWhereUniqueInput
    /**
     * In case the OrgMembership found by the `where` argument doesn't exist, create a new OrgMembership with this data.
     */
    create: XOR<OrgMembershipCreateInput, OrgMembershipUncheckedCreateInput>
    /**
     * In case the OrgMembership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrgMembershipUpdateInput, OrgMembershipUncheckedUpdateInput>
  }

  /**
   * OrgMembership delete
   */
  export type OrgMembershipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
    /**
     * Filter which OrgMembership to delete.
     */
    where: OrgMembershipWhereUniqueInput
  }

  /**
   * OrgMembership deleteMany
   */
  export type OrgMembershipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrgMemberships to delete
     */
    where?: OrgMembershipWhereInput
    /**
     * Limit how many OrgMemberships to delete.
     */
    limit?: number
  }

  /**
   * OrgMembership without action
   */
  export type OrgMembershipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMembership
     */
    select?: OrgMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrgMembership
     */
    omit?: OrgMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMembershipInclude<ExtArgs> | null
  }


  /**
   * Model NetworkMembership
   */

  export type AggregateNetworkMembership = {
    _count: NetworkMembershipCountAggregateOutputType | null
    _min: NetworkMembershipMinAggregateOutputType | null
    _max: NetworkMembershipMaxAggregateOutputType | null
  }

  export type NetworkMembershipMinAggregateOutputType = {
    userId: string | null
    networkId: string | null
    role: $Enums.NetworkRole | null
  }

  export type NetworkMembershipMaxAggregateOutputType = {
    userId: string | null
    networkId: string | null
    role: $Enums.NetworkRole | null
  }

  export type NetworkMembershipCountAggregateOutputType = {
    userId: number
    networkId: number
    role: number
    _all: number
  }


  export type NetworkMembershipMinAggregateInputType = {
    userId?: true
    networkId?: true
    role?: true
  }

  export type NetworkMembershipMaxAggregateInputType = {
    userId?: true
    networkId?: true
    role?: true
  }

  export type NetworkMembershipCountAggregateInputType = {
    userId?: true
    networkId?: true
    role?: true
    _all?: true
  }

  export type NetworkMembershipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NetworkMembership to aggregate.
     */
    where?: NetworkMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NetworkMemberships to fetch.
     */
    orderBy?: NetworkMembershipOrderByWithRelationInput | NetworkMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NetworkMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NetworkMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NetworkMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NetworkMemberships
    **/
    _count?: true | NetworkMembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NetworkMembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NetworkMembershipMaxAggregateInputType
  }

  export type GetNetworkMembershipAggregateType<T extends NetworkMembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateNetworkMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNetworkMembership[P]>
      : GetScalarType<T[P], AggregateNetworkMembership[P]>
  }




  export type NetworkMembershipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NetworkMembershipWhereInput
    orderBy?: NetworkMembershipOrderByWithAggregationInput | NetworkMembershipOrderByWithAggregationInput[]
    by: NetworkMembershipScalarFieldEnum[] | NetworkMembershipScalarFieldEnum
    having?: NetworkMembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NetworkMembershipCountAggregateInputType | true
    _min?: NetworkMembershipMinAggregateInputType
    _max?: NetworkMembershipMaxAggregateInputType
  }

  export type NetworkMembershipGroupByOutputType = {
    userId: string
    networkId: string
    role: $Enums.NetworkRole
    _count: NetworkMembershipCountAggregateOutputType | null
    _min: NetworkMembershipMinAggregateOutputType | null
    _max: NetworkMembershipMaxAggregateOutputType | null
  }

  type GetNetworkMembershipGroupByPayload<T extends NetworkMembershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NetworkMembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NetworkMembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NetworkMembershipGroupByOutputType[P]>
            : GetScalarType<T[P], NetworkMembershipGroupByOutputType[P]>
        }
      >
    >


  export type NetworkMembershipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    networkId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["networkMembership"]>

  export type NetworkMembershipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    networkId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["networkMembership"]>

  export type NetworkMembershipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    networkId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["networkMembership"]>

  export type NetworkMembershipSelectScalar = {
    userId?: boolean
    networkId?: boolean
    role?: boolean
  }

  export type NetworkMembershipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "networkId" | "role", ExtArgs["result"]["networkMembership"]>
  export type NetworkMembershipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }
  export type NetworkMembershipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }
  export type NetworkMembershipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    network?: boolean | NetworkDefaultArgs<ExtArgs>
  }

  export type $NetworkMembershipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NetworkMembership"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      network: Prisma.$NetworkPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      networkId: string
      role: $Enums.NetworkRole
    }, ExtArgs["result"]["networkMembership"]>
    composites: {}
  }

  type NetworkMembershipGetPayload<S extends boolean | null | undefined | NetworkMembershipDefaultArgs> = $Result.GetResult<Prisma.$NetworkMembershipPayload, S>

  type NetworkMembershipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NetworkMembershipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NetworkMembershipCountAggregateInputType | true
    }

  export interface NetworkMembershipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NetworkMembership'], meta: { name: 'NetworkMembership' } }
    /**
     * Find zero or one NetworkMembership that matches the filter.
     * @param {NetworkMembershipFindUniqueArgs} args - Arguments to find a NetworkMembership
     * @example
     * // Get one NetworkMembership
     * const networkMembership = await prisma.networkMembership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NetworkMembershipFindUniqueArgs>(args: SelectSubset<T, NetworkMembershipFindUniqueArgs<ExtArgs>>): Prisma__NetworkMembershipClient<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NetworkMembership that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NetworkMembershipFindUniqueOrThrowArgs} args - Arguments to find a NetworkMembership
     * @example
     * // Get one NetworkMembership
     * const networkMembership = await prisma.networkMembership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NetworkMembershipFindUniqueOrThrowArgs>(args: SelectSubset<T, NetworkMembershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NetworkMembershipClient<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NetworkMembership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMembershipFindFirstArgs} args - Arguments to find a NetworkMembership
     * @example
     * // Get one NetworkMembership
     * const networkMembership = await prisma.networkMembership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NetworkMembershipFindFirstArgs>(args?: SelectSubset<T, NetworkMembershipFindFirstArgs<ExtArgs>>): Prisma__NetworkMembershipClient<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NetworkMembership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMembershipFindFirstOrThrowArgs} args - Arguments to find a NetworkMembership
     * @example
     * // Get one NetworkMembership
     * const networkMembership = await prisma.networkMembership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NetworkMembershipFindFirstOrThrowArgs>(args?: SelectSubset<T, NetworkMembershipFindFirstOrThrowArgs<ExtArgs>>): Prisma__NetworkMembershipClient<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NetworkMemberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMembershipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NetworkMemberships
     * const networkMemberships = await prisma.networkMembership.findMany()
     * 
     * // Get first 10 NetworkMemberships
     * const networkMemberships = await prisma.networkMembership.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const networkMembershipWithUserIdOnly = await prisma.networkMembership.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends NetworkMembershipFindManyArgs>(args?: SelectSubset<T, NetworkMembershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NetworkMembership.
     * @param {NetworkMembershipCreateArgs} args - Arguments to create a NetworkMembership.
     * @example
     * // Create one NetworkMembership
     * const NetworkMembership = await prisma.networkMembership.create({
     *   data: {
     *     // ... data to create a NetworkMembership
     *   }
     * })
     * 
     */
    create<T extends NetworkMembershipCreateArgs>(args: SelectSubset<T, NetworkMembershipCreateArgs<ExtArgs>>): Prisma__NetworkMembershipClient<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NetworkMemberships.
     * @param {NetworkMembershipCreateManyArgs} args - Arguments to create many NetworkMemberships.
     * @example
     * // Create many NetworkMemberships
     * const networkMembership = await prisma.networkMembership.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NetworkMembershipCreateManyArgs>(args?: SelectSubset<T, NetworkMembershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NetworkMemberships and returns the data saved in the database.
     * @param {NetworkMembershipCreateManyAndReturnArgs} args - Arguments to create many NetworkMemberships.
     * @example
     * // Create many NetworkMemberships
     * const networkMembership = await prisma.networkMembership.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NetworkMemberships and only return the `userId`
     * const networkMembershipWithUserIdOnly = await prisma.networkMembership.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NetworkMembershipCreateManyAndReturnArgs>(args?: SelectSubset<T, NetworkMembershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NetworkMembership.
     * @param {NetworkMembershipDeleteArgs} args - Arguments to delete one NetworkMembership.
     * @example
     * // Delete one NetworkMembership
     * const NetworkMembership = await prisma.networkMembership.delete({
     *   where: {
     *     // ... filter to delete one NetworkMembership
     *   }
     * })
     * 
     */
    delete<T extends NetworkMembershipDeleteArgs>(args: SelectSubset<T, NetworkMembershipDeleteArgs<ExtArgs>>): Prisma__NetworkMembershipClient<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NetworkMembership.
     * @param {NetworkMembershipUpdateArgs} args - Arguments to update one NetworkMembership.
     * @example
     * // Update one NetworkMembership
     * const networkMembership = await prisma.networkMembership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NetworkMembershipUpdateArgs>(args: SelectSubset<T, NetworkMembershipUpdateArgs<ExtArgs>>): Prisma__NetworkMembershipClient<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NetworkMemberships.
     * @param {NetworkMembershipDeleteManyArgs} args - Arguments to filter NetworkMemberships to delete.
     * @example
     * // Delete a few NetworkMemberships
     * const { count } = await prisma.networkMembership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NetworkMembershipDeleteManyArgs>(args?: SelectSubset<T, NetworkMembershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NetworkMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NetworkMemberships
     * const networkMembership = await prisma.networkMembership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NetworkMembershipUpdateManyArgs>(args: SelectSubset<T, NetworkMembershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NetworkMemberships and returns the data updated in the database.
     * @param {NetworkMembershipUpdateManyAndReturnArgs} args - Arguments to update many NetworkMemberships.
     * @example
     * // Update many NetworkMemberships
     * const networkMembership = await prisma.networkMembership.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NetworkMemberships and only return the `userId`
     * const networkMembershipWithUserIdOnly = await prisma.networkMembership.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NetworkMembershipUpdateManyAndReturnArgs>(args: SelectSubset<T, NetworkMembershipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NetworkMembership.
     * @param {NetworkMembershipUpsertArgs} args - Arguments to update or create a NetworkMembership.
     * @example
     * // Update or create a NetworkMembership
     * const networkMembership = await prisma.networkMembership.upsert({
     *   create: {
     *     // ... data to create a NetworkMembership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NetworkMembership we want to update
     *   }
     * })
     */
    upsert<T extends NetworkMembershipUpsertArgs>(args: SelectSubset<T, NetworkMembershipUpsertArgs<ExtArgs>>): Prisma__NetworkMembershipClient<$Result.GetResult<Prisma.$NetworkMembershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NetworkMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMembershipCountArgs} args - Arguments to filter NetworkMemberships to count.
     * @example
     * // Count the number of NetworkMemberships
     * const count = await prisma.networkMembership.count({
     *   where: {
     *     // ... the filter for the NetworkMemberships we want to count
     *   }
     * })
    **/
    count<T extends NetworkMembershipCountArgs>(
      args?: Subset<T, NetworkMembershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NetworkMembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NetworkMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NetworkMembershipAggregateArgs>(args: Subset<T, NetworkMembershipAggregateArgs>): Prisma.PrismaPromise<GetNetworkMembershipAggregateType<T>>

    /**
     * Group by NetworkMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NetworkMembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NetworkMembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NetworkMembershipGroupByArgs['orderBy'] }
        : { orderBy?: NetworkMembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NetworkMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNetworkMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NetworkMembership model
   */
  readonly fields: NetworkMembershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NetworkMembership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NetworkMembershipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    network<T extends NetworkDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NetworkDefaultArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NetworkMembership model
   */
  interface NetworkMembershipFieldRefs {
    readonly userId: FieldRef<"NetworkMembership", 'String'>
    readonly networkId: FieldRef<"NetworkMembership", 'String'>
    readonly role: FieldRef<"NetworkMembership", 'NetworkRole'>
  }
    

  // Custom InputTypes
  /**
   * NetworkMembership findUnique
   */
  export type NetworkMembershipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
    /**
     * Filter, which NetworkMembership to fetch.
     */
    where: NetworkMembershipWhereUniqueInput
  }

  /**
   * NetworkMembership findUniqueOrThrow
   */
  export type NetworkMembershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
    /**
     * Filter, which NetworkMembership to fetch.
     */
    where: NetworkMembershipWhereUniqueInput
  }

  /**
   * NetworkMembership findFirst
   */
  export type NetworkMembershipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
    /**
     * Filter, which NetworkMembership to fetch.
     */
    where?: NetworkMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NetworkMemberships to fetch.
     */
    orderBy?: NetworkMembershipOrderByWithRelationInput | NetworkMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NetworkMemberships.
     */
    cursor?: NetworkMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NetworkMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NetworkMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NetworkMemberships.
     */
    distinct?: NetworkMembershipScalarFieldEnum | NetworkMembershipScalarFieldEnum[]
  }

  /**
   * NetworkMembership findFirstOrThrow
   */
  export type NetworkMembershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
    /**
     * Filter, which NetworkMembership to fetch.
     */
    where?: NetworkMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NetworkMemberships to fetch.
     */
    orderBy?: NetworkMembershipOrderByWithRelationInput | NetworkMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NetworkMemberships.
     */
    cursor?: NetworkMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NetworkMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NetworkMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NetworkMemberships.
     */
    distinct?: NetworkMembershipScalarFieldEnum | NetworkMembershipScalarFieldEnum[]
  }

  /**
   * NetworkMembership findMany
   */
  export type NetworkMembershipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
    /**
     * Filter, which NetworkMemberships to fetch.
     */
    where?: NetworkMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NetworkMemberships to fetch.
     */
    orderBy?: NetworkMembershipOrderByWithRelationInput | NetworkMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NetworkMemberships.
     */
    cursor?: NetworkMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NetworkMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NetworkMemberships.
     */
    skip?: number
    distinct?: NetworkMembershipScalarFieldEnum | NetworkMembershipScalarFieldEnum[]
  }

  /**
   * NetworkMembership create
   */
  export type NetworkMembershipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
    /**
     * The data needed to create a NetworkMembership.
     */
    data: XOR<NetworkMembershipCreateInput, NetworkMembershipUncheckedCreateInput>
  }

  /**
   * NetworkMembership createMany
   */
  export type NetworkMembershipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NetworkMemberships.
     */
    data: NetworkMembershipCreateManyInput | NetworkMembershipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NetworkMembership createManyAndReturn
   */
  export type NetworkMembershipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * The data used to create many NetworkMemberships.
     */
    data: NetworkMembershipCreateManyInput | NetworkMembershipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NetworkMembership update
   */
  export type NetworkMembershipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
    /**
     * The data needed to update a NetworkMembership.
     */
    data: XOR<NetworkMembershipUpdateInput, NetworkMembershipUncheckedUpdateInput>
    /**
     * Choose, which NetworkMembership to update.
     */
    where: NetworkMembershipWhereUniqueInput
  }

  /**
   * NetworkMembership updateMany
   */
  export type NetworkMembershipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NetworkMemberships.
     */
    data: XOR<NetworkMembershipUpdateManyMutationInput, NetworkMembershipUncheckedUpdateManyInput>
    /**
     * Filter which NetworkMemberships to update
     */
    where?: NetworkMembershipWhereInput
    /**
     * Limit how many NetworkMemberships to update.
     */
    limit?: number
  }

  /**
   * NetworkMembership updateManyAndReturn
   */
  export type NetworkMembershipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * The data used to update NetworkMemberships.
     */
    data: XOR<NetworkMembershipUpdateManyMutationInput, NetworkMembershipUncheckedUpdateManyInput>
    /**
     * Filter which NetworkMemberships to update
     */
    where?: NetworkMembershipWhereInput
    /**
     * Limit how many NetworkMemberships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NetworkMembership upsert
   */
  export type NetworkMembershipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
    /**
     * The filter to search for the NetworkMembership to update in case it exists.
     */
    where: NetworkMembershipWhereUniqueInput
    /**
     * In case the NetworkMembership found by the `where` argument doesn't exist, create a new NetworkMembership with this data.
     */
    create: XOR<NetworkMembershipCreateInput, NetworkMembershipUncheckedCreateInput>
    /**
     * In case the NetworkMembership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NetworkMembershipUpdateInput, NetworkMembershipUncheckedUpdateInput>
  }

  /**
   * NetworkMembership delete
   */
  export type NetworkMembershipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
    /**
     * Filter which NetworkMembership to delete.
     */
    where: NetworkMembershipWhereUniqueInput
  }

  /**
   * NetworkMembership deleteMany
   */
  export type NetworkMembershipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NetworkMemberships to delete
     */
    where?: NetworkMembershipWhereInput
    /**
     * Limit how many NetworkMemberships to delete.
     */
    limit?: number
  }

  /**
   * NetworkMembership without action
   */
  export type NetworkMembershipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NetworkMembership
     */
    select?: NetworkMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NetworkMembership
     */
    omit?: NetworkMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkMembershipInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    at: Date | null
    actorUserId: string | null
    action: string | null
    subjectType: string | null
    subjectId: string | null
    actorOrgId: string | null
    actorNetworkId: string | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    at: Date | null
    actorUserId: string | null
    action: string | null
    subjectType: string | null
    subjectId: string | null
    actorOrgId: string | null
    actorNetworkId: string | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    at: number
    actorUserId: number
    action: number
    subjectType: number
    subjectId: number
    details: number
    actorOrgId: number
    actorNetworkId: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    at?: true
    actorUserId?: true
    action?: true
    subjectType?: true
    subjectId?: true
    actorOrgId?: true
    actorNetworkId?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    at?: true
    actorUserId?: true
    action?: true
    subjectType?: true
    subjectId?: true
    actorOrgId?: true
    actorNetworkId?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    at?: true
    actorUserId?: true
    action?: true
    subjectType?: true
    subjectId?: true
    details?: true
    actorOrgId?: true
    actorNetworkId?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    at: Date
    actorUserId: string
    action: string
    subjectType: string
    subjectId: string | null
    details: JsonValue | null
    actorOrgId: string | null
    actorNetworkId: string | null
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    at?: boolean
    actorUserId?: boolean
    action?: boolean
    subjectType?: boolean
    subjectId?: boolean
    details?: boolean
    actorOrgId?: boolean
    actorNetworkId?: boolean
    actor?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | AuditLog$orgArgs<ExtArgs>
    network?: boolean | AuditLog$networkArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    at?: boolean
    actorUserId?: boolean
    action?: boolean
    subjectType?: boolean
    subjectId?: boolean
    details?: boolean
    actorOrgId?: boolean
    actorNetworkId?: boolean
    actor?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | AuditLog$orgArgs<ExtArgs>
    network?: boolean | AuditLog$networkArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    at?: boolean
    actorUserId?: boolean
    action?: boolean
    subjectType?: boolean
    subjectId?: boolean
    details?: boolean
    actorOrgId?: boolean
    actorNetworkId?: boolean
    actor?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | AuditLog$orgArgs<ExtArgs>
    network?: boolean | AuditLog$networkArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    at?: boolean
    actorUserId?: boolean
    action?: boolean
    subjectType?: boolean
    subjectId?: boolean
    details?: boolean
    actorOrgId?: boolean
    actorNetworkId?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "at" | "actorUserId" | "action" | "subjectType" | "subjectId" | "details" | "actorOrgId" | "actorNetworkId", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | AuditLog$orgArgs<ExtArgs>
    network?: boolean | AuditLog$networkArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | AuditLog$orgArgs<ExtArgs>
    network?: boolean | AuditLog$networkArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | UserDefaultArgs<ExtArgs>
    org?: boolean | AuditLog$orgArgs<ExtArgs>
    network?: boolean | AuditLog$networkArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      actor: Prisma.$UserPayload<ExtArgs>
      org: Prisma.$OrgPayload<ExtArgs> | null
      network: Prisma.$NetworkPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      at: Date
      actorUserId: string
      action: string
      subjectType: string
      subjectId: string | null
      details: Prisma.JsonValue | null
      actorOrgId: string | null
      actorNetworkId: string | null
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    actor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    org<T extends AuditLog$orgArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$orgArgs<ExtArgs>>): Prisma__OrgClient<$Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    network<T extends AuditLog$networkArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$networkArgs<ExtArgs>>): Prisma__NetworkClient<$Result.GetResult<Prisma.$NetworkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly at: FieldRef<"AuditLog", 'DateTime'>
    readonly actorUserId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly subjectType: FieldRef<"AuditLog", 'String'>
    readonly subjectId: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'Json'>
    readonly actorOrgId: FieldRef<"AuditLog", 'String'>
    readonly actorNetworkId: FieldRef<"AuditLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.org
   */
  export type AuditLog$orgArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Org
     */
    select?: OrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Org
     */
    omit?: OrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgInclude<ExtArgs> | null
    where?: OrgWhereInput
  }

  /**
   * AuditLog.network
   */
  export type AuditLog$networkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Network
     */
    select?: NetworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Network
     */
    omit?: NetworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NetworkInclude<ExtArgs> | null
    where?: NetworkWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const OrgScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type OrgScalarFieldEnum = (typeof OrgScalarFieldEnum)[keyof typeof OrgScalarFieldEnum]


  export const NetworkScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    orgId: 'orgId',
    currentBundleId: 'currentBundleId'
  };

  export type NetworkScalarFieldEnum = (typeof NetworkScalarFieldEnum)[keyof typeof NetworkScalarFieldEnum]


  export const PracticeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    networkId: 'networkId'
  };

  export type PracticeScalarFieldEnum = (typeof PracticeScalarFieldEnum)[keyof typeof PracticeScalarFieldEnum]


  export const PracticeKeyScalarFieldEnum: {
    id: 'id',
    practiceId: 'practiceId',
    publicKeyPem: 'publicKeyPem',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type PracticeKeyScalarFieldEnum = (typeof PracticeKeyScalarFieldEnum)[keyof typeof PracticeKeyScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const CareEpisodeScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    practiceId: 'practiceId',
    startAt: 'startAt',
    endAt: 'endAt'
  };

  export type CareEpisodeScalarFieldEnum = (typeof CareEpisodeScalarFieldEnum)[keyof typeof CareEpisodeScalarFieldEnum]


  export const BundleScalarFieldEnum: {
    id: 'id',
    networkId: 'networkId',
    meta: 'meta',
    data: 'data',
    createdAt: 'createdAt'
  };

  export type BundleScalarFieldEnum = (typeof BundleScalarFieldEnum)[keyof typeof BundleScalarFieldEnum]


  export const SubmissionScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    bundleId: 'bundleId',
    bundleHash: 'bundleHash',
    ciphertext: 'ciphertext',
    iv: 'iv',
    tag: 'tag',
    wrappedDEK: 'wrappedDEK',
    createdAt: 'createdAt'
  };

  export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OrgMembershipScalarFieldEnum: {
    userId: 'userId',
    orgId: 'orgId',
    role: 'role'
  };

  export type OrgMembershipScalarFieldEnum = (typeof OrgMembershipScalarFieldEnum)[keyof typeof OrgMembershipScalarFieldEnum]


  export const NetworkMembershipScalarFieldEnum: {
    userId: 'userId',
    networkId: 'networkId',
    role: 'role'
  };

  export type NetworkMembershipScalarFieldEnum = (typeof NetworkMembershipScalarFieldEnum)[keyof typeof NetworkMembershipScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    at: 'at',
    actorUserId: 'actorUserId',
    action: 'action',
    subjectType: 'subjectType',
    subjectId: 'subjectId',
    details: 'details',
    actorOrgId: 'actorOrgId',
    actorNetworkId: 'actorNetworkId'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'OrgRole'
   */
  export type EnumOrgRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrgRole'>
    


  /**
   * Reference to a field of type 'OrgRole[]'
   */
  export type ListEnumOrgRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrgRole[]'>
    


  /**
   * Reference to a field of type 'NetworkRole'
   */
  export type EnumNetworkRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NetworkRole'>
    


  /**
   * Reference to a field of type 'NetworkRole[]'
   */
  export type ListEnumNetworkRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NetworkRole[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type OrgWhereInput = {
    AND?: OrgWhereInput | OrgWhereInput[]
    OR?: OrgWhereInput[]
    NOT?: OrgWhereInput | OrgWhereInput[]
    id?: StringFilter<"Org"> | string
    name?: StringFilter<"Org"> | string
    createdAt?: DateTimeFilter<"Org"> | Date | string
    networks?: NetworkListRelationFilter
    orgMemberships?: OrgMembershipListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type OrgOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    networks?: NetworkOrderByRelationAggregateInput
    orgMemberships?: OrgMembershipOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type OrgWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: OrgWhereInput | OrgWhereInput[]
    OR?: OrgWhereInput[]
    NOT?: OrgWhereInput | OrgWhereInput[]
    createdAt?: DateTimeFilter<"Org"> | Date | string
    networks?: NetworkListRelationFilter
    orgMemberships?: OrgMembershipListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "name">

  export type OrgOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: OrgCountOrderByAggregateInput
    _max?: OrgMaxOrderByAggregateInput
    _min?: OrgMinOrderByAggregateInput
  }

  export type OrgScalarWhereWithAggregatesInput = {
    AND?: OrgScalarWhereWithAggregatesInput | OrgScalarWhereWithAggregatesInput[]
    OR?: OrgScalarWhereWithAggregatesInput[]
    NOT?: OrgScalarWhereWithAggregatesInput | OrgScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Org"> | string
    name?: StringWithAggregatesFilter<"Org"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Org"> | Date | string
  }

  export type NetworkWhereInput = {
    AND?: NetworkWhereInput | NetworkWhereInput[]
    OR?: NetworkWhereInput[]
    NOT?: NetworkWhereInput | NetworkWhereInput[]
    id?: StringFilter<"Network"> | string
    name?: StringFilter<"Network"> | string
    createdAt?: DateTimeFilter<"Network"> | Date | string
    orgId?: StringFilter<"Network"> | string
    currentBundleId?: StringNullableFilter<"Network"> | string | null
    org?: XOR<OrgScalarRelationFilter, OrgWhereInput>
    currentBundle?: XOR<BundleNullableScalarRelationFilter, BundleWhereInput> | null
    practices?: PracticeListRelationFilter
    bundles?: BundleListRelationFilter
    networkMemberships?: NetworkMembershipListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type NetworkOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    orgId?: SortOrder
    currentBundleId?: SortOrderInput | SortOrder
    org?: OrgOrderByWithRelationInput
    currentBundle?: BundleOrderByWithRelationInput
    practices?: PracticeOrderByRelationAggregateInput
    bundles?: BundleOrderByRelationAggregateInput
    networkMemberships?: NetworkMembershipOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type NetworkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NetworkWhereInput | NetworkWhereInput[]
    OR?: NetworkWhereInput[]
    NOT?: NetworkWhereInput | NetworkWhereInput[]
    name?: StringFilter<"Network"> | string
    createdAt?: DateTimeFilter<"Network"> | Date | string
    orgId?: StringFilter<"Network"> | string
    currentBundleId?: StringNullableFilter<"Network"> | string | null
    org?: XOR<OrgScalarRelationFilter, OrgWhereInput>
    currentBundle?: XOR<BundleNullableScalarRelationFilter, BundleWhereInput> | null
    practices?: PracticeListRelationFilter
    bundles?: BundleListRelationFilter
    networkMemberships?: NetworkMembershipListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id">

  export type NetworkOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    orgId?: SortOrder
    currentBundleId?: SortOrderInput | SortOrder
    _count?: NetworkCountOrderByAggregateInput
    _max?: NetworkMaxOrderByAggregateInput
    _min?: NetworkMinOrderByAggregateInput
  }

  export type NetworkScalarWhereWithAggregatesInput = {
    AND?: NetworkScalarWhereWithAggregatesInput | NetworkScalarWhereWithAggregatesInput[]
    OR?: NetworkScalarWhereWithAggregatesInput[]
    NOT?: NetworkScalarWhereWithAggregatesInput | NetworkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Network"> | string
    name?: StringWithAggregatesFilter<"Network"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Network"> | Date | string
    orgId?: StringWithAggregatesFilter<"Network"> | string
    currentBundleId?: StringNullableWithAggregatesFilter<"Network"> | string | null
  }

  export type PracticeWhereInput = {
    AND?: PracticeWhereInput | PracticeWhereInput[]
    OR?: PracticeWhereInput[]
    NOT?: PracticeWhereInput | PracticeWhereInput[]
    id?: StringFilter<"Practice"> | string
    name?: StringFilter<"Practice"> | string
    createdAt?: DateTimeFilter<"Practice"> | Date | string
    networkId?: StringFilter<"Practice"> | string
    network?: XOR<NetworkScalarRelationFilter, NetworkWhereInput>
    keys?: PracticeKeyListRelationFilter
    careEpisodes?: CareEpisodeListRelationFilter
  }

  export type PracticeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    networkId?: SortOrder
    network?: NetworkOrderByWithRelationInput
    keys?: PracticeKeyOrderByRelationAggregateInput
    careEpisodes?: CareEpisodeOrderByRelationAggregateInput
  }

  export type PracticeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PracticeWhereInput | PracticeWhereInput[]
    OR?: PracticeWhereInput[]
    NOT?: PracticeWhereInput | PracticeWhereInput[]
    name?: StringFilter<"Practice"> | string
    createdAt?: DateTimeFilter<"Practice"> | Date | string
    networkId?: StringFilter<"Practice"> | string
    network?: XOR<NetworkScalarRelationFilter, NetworkWhereInput>
    keys?: PracticeKeyListRelationFilter
    careEpisodes?: CareEpisodeListRelationFilter
  }, "id">

  export type PracticeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    networkId?: SortOrder
    _count?: PracticeCountOrderByAggregateInput
    _max?: PracticeMaxOrderByAggregateInput
    _min?: PracticeMinOrderByAggregateInput
  }

  export type PracticeScalarWhereWithAggregatesInput = {
    AND?: PracticeScalarWhereWithAggregatesInput | PracticeScalarWhereWithAggregatesInput[]
    OR?: PracticeScalarWhereWithAggregatesInput[]
    NOT?: PracticeScalarWhereWithAggregatesInput | PracticeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Practice"> | string
    name?: StringWithAggregatesFilter<"Practice"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Practice"> | Date | string
    networkId?: StringWithAggregatesFilter<"Practice"> | string
  }

  export type PracticeKeyWhereInput = {
    AND?: PracticeKeyWhereInput | PracticeKeyWhereInput[]
    OR?: PracticeKeyWhereInput[]
    NOT?: PracticeKeyWhereInput | PracticeKeyWhereInput[]
    id?: StringFilter<"PracticeKey"> | string
    practiceId?: StringFilter<"PracticeKey"> | string
    publicKeyPem?: StringFilter<"PracticeKey"> | string
    isActive?: BoolFilter<"PracticeKey"> | boolean
    createdAt?: DateTimeFilter<"PracticeKey"> | Date | string
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
  }

  export type PracticeKeyOrderByWithRelationInput = {
    id?: SortOrder
    practiceId?: SortOrder
    publicKeyPem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    practice?: PracticeOrderByWithRelationInput
  }

  export type PracticeKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PracticeKeyWhereInput | PracticeKeyWhereInput[]
    OR?: PracticeKeyWhereInput[]
    NOT?: PracticeKeyWhereInput | PracticeKeyWhereInput[]
    practiceId?: StringFilter<"PracticeKey"> | string
    publicKeyPem?: StringFilter<"PracticeKey"> | string
    isActive?: BoolFilter<"PracticeKey"> | boolean
    createdAt?: DateTimeFilter<"PracticeKey"> | Date | string
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
  }, "id">

  export type PracticeKeyOrderByWithAggregationInput = {
    id?: SortOrder
    practiceId?: SortOrder
    publicKeyPem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: PracticeKeyCountOrderByAggregateInput
    _max?: PracticeKeyMaxOrderByAggregateInput
    _min?: PracticeKeyMinOrderByAggregateInput
  }

  export type PracticeKeyScalarWhereWithAggregatesInput = {
    AND?: PracticeKeyScalarWhereWithAggregatesInput | PracticeKeyScalarWhereWithAggregatesInput[]
    OR?: PracticeKeyScalarWhereWithAggregatesInput[]
    NOT?: PracticeKeyScalarWhereWithAggregatesInput | PracticeKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PracticeKey"> | string
    practiceId?: StringWithAggregatesFilter<"PracticeKey"> | string
    publicKeyPem?: StringWithAggregatesFilter<"PracticeKey"> | string
    isActive?: BoolWithAggregatesFilter<"PracticeKey"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PracticeKey"> | Date | string
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    submissions?: SubmissionListRelationFilter
    careEpisodes?: CareEpisodeListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    submissions?: SubmissionOrderByRelationAggregateInput
    careEpisodes?: CareEpisodeOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    submissions?: SubmissionListRelationFilter
    careEpisodes?: CareEpisodeListRelationFilter
  }, "id">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Patient"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
  }

  export type CareEpisodeWhereInput = {
    AND?: CareEpisodeWhereInput | CareEpisodeWhereInput[]
    OR?: CareEpisodeWhereInput[]
    NOT?: CareEpisodeWhereInput | CareEpisodeWhereInput[]
    id?: StringFilter<"CareEpisode"> | string
    patientId?: StringFilter<"CareEpisode"> | string
    practiceId?: StringFilter<"CareEpisode"> | string
    startAt?: DateTimeFilter<"CareEpisode"> | Date | string
    endAt?: DateTimeNullableFilter<"CareEpisode"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
  }

  export type CareEpisodeOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    practiceId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    practice?: PracticeOrderByWithRelationInput
  }

  export type CareEpisodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CareEpisodeWhereInput | CareEpisodeWhereInput[]
    OR?: CareEpisodeWhereInput[]
    NOT?: CareEpisodeWhereInput | CareEpisodeWhereInput[]
    patientId?: StringFilter<"CareEpisode"> | string
    practiceId?: StringFilter<"CareEpisode"> | string
    startAt?: DateTimeFilter<"CareEpisode"> | Date | string
    endAt?: DateTimeNullableFilter<"CareEpisode"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
  }, "id">

  export type CareEpisodeOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    practiceId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrderInput | SortOrder
    _count?: CareEpisodeCountOrderByAggregateInput
    _max?: CareEpisodeMaxOrderByAggregateInput
    _min?: CareEpisodeMinOrderByAggregateInput
  }

  export type CareEpisodeScalarWhereWithAggregatesInput = {
    AND?: CareEpisodeScalarWhereWithAggregatesInput | CareEpisodeScalarWhereWithAggregatesInput[]
    OR?: CareEpisodeScalarWhereWithAggregatesInput[]
    NOT?: CareEpisodeScalarWhereWithAggregatesInput | CareEpisodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CareEpisode"> | string
    patientId?: StringWithAggregatesFilter<"CareEpisode"> | string
    practiceId?: StringWithAggregatesFilter<"CareEpisode"> | string
    startAt?: DateTimeWithAggregatesFilter<"CareEpisode"> | Date | string
    endAt?: DateTimeNullableWithAggregatesFilter<"CareEpisode"> | Date | string | null
  }

  export type BundleWhereInput = {
    AND?: BundleWhereInput | BundleWhereInput[]
    OR?: BundleWhereInput[]
    NOT?: BundleWhereInput | BundleWhereInput[]
    id?: StringFilter<"Bundle"> | string
    networkId?: StringFilter<"Bundle"> | string
    meta?: JsonNullableFilter<"Bundle">
    data?: JsonNullableFilter<"Bundle">
    createdAt?: DateTimeFilter<"Bundle"> | Date | string
    network?: XOR<NetworkScalarRelationFilter, NetworkWhereInput>
    submissions?: SubmissionListRelationFilter
    networksAsCurrent?: NetworkListRelationFilter
  }

  export type BundleOrderByWithRelationInput = {
    id?: SortOrder
    networkId?: SortOrder
    meta?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    network?: NetworkOrderByWithRelationInput
    submissions?: SubmissionOrderByRelationAggregateInput
    networksAsCurrent?: NetworkOrderByRelationAggregateInput
  }

  export type BundleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BundleWhereInput | BundleWhereInput[]
    OR?: BundleWhereInput[]
    NOT?: BundleWhereInput | BundleWhereInput[]
    networkId?: StringFilter<"Bundle"> | string
    meta?: JsonNullableFilter<"Bundle">
    data?: JsonNullableFilter<"Bundle">
    createdAt?: DateTimeFilter<"Bundle"> | Date | string
    network?: XOR<NetworkScalarRelationFilter, NetworkWhereInput>
    submissions?: SubmissionListRelationFilter
    networksAsCurrent?: NetworkListRelationFilter
  }, "id">

  export type BundleOrderByWithAggregationInput = {
    id?: SortOrder
    networkId?: SortOrder
    meta?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: BundleCountOrderByAggregateInput
    _max?: BundleMaxOrderByAggregateInput
    _min?: BundleMinOrderByAggregateInput
  }

  export type BundleScalarWhereWithAggregatesInput = {
    AND?: BundleScalarWhereWithAggregatesInput | BundleScalarWhereWithAggregatesInput[]
    OR?: BundleScalarWhereWithAggregatesInput[]
    NOT?: BundleScalarWhereWithAggregatesInput | BundleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bundle"> | string
    networkId?: StringWithAggregatesFilter<"Bundle"> | string
    meta?: JsonNullableWithAggregatesFilter<"Bundle">
    data?: JsonNullableWithAggregatesFilter<"Bundle">
    createdAt?: DateTimeWithAggregatesFilter<"Bundle"> | Date | string
  }

  export type SubmissionWhereInput = {
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    id?: StringFilter<"Submission"> | string
    patientId?: StringFilter<"Submission"> | string
    bundleId?: StringFilter<"Submission"> | string
    bundleHash?: StringFilter<"Submission"> | string
    ciphertext?: StringFilter<"Submission"> | string
    iv?: StringFilter<"Submission"> | string
    tag?: StringFilter<"Submission"> | string
    wrappedDEK?: StringFilter<"Submission"> | string
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    bundle?: XOR<BundleScalarRelationFilter, BundleWhereInput>
  }

  export type SubmissionOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    bundleId?: SortOrder
    bundleHash?: SortOrder
    ciphertext?: SortOrder
    iv?: SortOrder
    tag?: SortOrder
    wrappedDEK?: SortOrder
    createdAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    bundle?: BundleOrderByWithRelationInput
  }

  export type SubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    patientId?: StringFilter<"Submission"> | string
    bundleId?: StringFilter<"Submission"> | string
    bundleHash?: StringFilter<"Submission"> | string
    ciphertext?: StringFilter<"Submission"> | string
    iv?: StringFilter<"Submission"> | string
    tag?: StringFilter<"Submission"> | string
    wrappedDEK?: StringFilter<"Submission"> | string
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    bundle?: XOR<BundleScalarRelationFilter, BundleWhereInput>
  }, "id">

  export type SubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    bundleId?: SortOrder
    bundleHash?: SortOrder
    ciphertext?: SortOrder
    iv?: SortOrder
    tag?: SortOrder
    wrappedDEK?: SortOrder
    createdAt?: SortOrder
    _count?: SubmissionCountOrderByAggregateInput
    _max?: SubmissionMaxOrderByAggregateInput
    _min?: SubmissionMinOrderByAggregateInput
  }

  export type SubmissionScalarWhereWithAggregatesInput = {
    AND?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    OR?: SubmissionScalarWhereWithAggregatesInput[]
    NOT?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Submission"> | string
    patientId?: StringWithAggregatesFilter<"Submission"> | string
    bundleId?: StringWithAggregatesFilter<"Submission"> | string
    bundleHash?: StringWithAggregatesFilter<"Submission"> | string
    ciphertext?: StringWithAggregatesFilter<"Submission"> | string
    iv?: StringWithAggregatesFilter<"Submission"> | string
    tag?: StringWithAggregatesFilter<"Submission"> | string
    wrappedDEK?: StringWithAggregatesFilter<"Submission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    orgMemberships?: OrgMembershipListRelationFilter
    networkMemberships?: NetworkMembershipListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    orgMemberships?: OrgMembershipOrderByRelationAggregateInput
    networkMemberships?: NetworkMembershipOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    orgMemberships?: OrgMembershipListRelationFilter
    networkMemberships?: NetworkMembershipListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type OrgMembershipWhereInput = {
    AND?: OrgMembershipWhereInput | OrgMembershipWhereInput[]
    OR?: OrgMembershipWhereInput[]
    NOT?: OrgMembershipWhereInput | OrgMembershipWhereInput[]
    userId?: StringFilter<"OrgMembership"> | string
    orgId?: StringFilter<"OrgMembership"> | string
    role?: EnumOrgRoleFilter<"OrgMembership"> | $Enums.OrgRole
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    org?: XOR<OrgScalarRelationFilter, OrgWhereInput>
  }

  export type OrgMembershipOrderByWithRelationInput = {
    userId?: SortOrder
    orgId?: SortOrder
    role?: SortOrder
    user?: UserOrderByWithRelationInput
    org?: OrgOrderByWithRelationInput
  }

  export type OrgMembershipWhereUniqueInput = Prisma.AtLeast<{
    userId_orgId?: OrgMembershipUserIdOrgIdCompoundUniqueInput
    AND?: OrgMembershipWhereInput | OrgMembershipWhereInput[]
    OR?: OrgMembershipWhereInput[]
    NOT?: OrgMembershipWhereInput | OrgMembershipWhereInput[]
    userId?: StringFilter<"OrgMembership"> | string
    orgId?: StringFilter<"OrgMembership"> | string
    role?: EnumOrgRoleFilter<"OrgMembership"> | $Enums.OrgRole
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    org?: XOR<OrgScalarRelationFilter, OrgWhereInput>
  }, "userId_orgId">

  export type OrgMembershipOrderByWithAggregationInput = {
    userId?: SortOrder
    orgId?: SortOrder
    role?: SortOrder
    _count?: OrgMembershipCountOrderByAggregateInput
    _max?: OrgMembershipMaxOrderByAggregateInput
    _min?: OrgMembershipMinOrderByAggregateInput
  }

  export type OrgMembershipScalarWhereWithAggregatesInput = {
    AND?: OrgMembershipScalarWhereWithAggregatesInput | OrgMembershipScalarWhereWithAggregatesInput[]
    OR?: OrgMembershipScalarWhereWithAggregatesInput[]
    NOT?: OrgMembershipScalarWhereWithAggregatesInput | OrgMembershipScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"OrgMembership"> | string
    orgId?: StringWithAggregatesFilter<"OrgMembership"> | string
    role?: EnumOrgRoleWithAggregatesFilter<"OrgMembership"> | $Enums.OrgRole
  }

  export type NetworkMembershipWhereInput = {
    AND?: NetworkMembershipWhereInput | NetworkMembershipWhereInput[]
    OR?: NetworkMembershipWhereInput[]
    NOT?: NetworkMembershipWhereInput | NetworkMembershipWhereInput[]
    userId?: StringFilter<"NetworkMembership"> | string
    networkId?: StringFilter<"NetworkMembership"> | string
    role?: EnumNetworkRoleFilter<"NetworkMembership"> | $Enums.NetworkRole
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    network?: XOR<NetworkScalarRelationFilter, NetworkWhereInput>
  }

  export type NetworkMembershipOrderByWithRelationInput = {
    userId?: SortOrder
    networkId?: SortOrder
    role?: SortOrder
    user?: UserOrderByWithRelationInput
    network?: NetworkOrderByWithRelationInput
  }

  export type NetworkMembershipWhereUniqueInput = Prisma.AtLeast<{
    userId_networkId?: NetworkMembershipUserIdNetworkIdCompoundUniqueInput
    AND?: NetworkMembershipWhereInput | NetworkMembershipWhereInput[]
    OR?: NetworkMembershipWhereInput[]
    NOT?: NetworkMembershipWhereInput | NetworkMembershipWhereInput[]
    userId?: StringFilter<"NetworkMembership"> | string
    networkId?: StringFilter<"NetworkMembership"> | string
    role?: EnumNetworkRoleFilter<"NetworkMembership"> | $Enums.NetworkRole
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    network?: XOR<NetworkScalarRelationFilter, NetworkWhereInput>
  }, "userId_networkId">

  export type NetworkMembershipOrderByWithAggregationInput = {
    userId?: SortOrder
    networkId?: SortOrder
    role?: SortOrder
    _count?: NetworkMembershipCountOrderByAggregateInput
    _max?: NetworkMembershipMaxOrderByAggregateInput
    _min?: NetworkMembershipMinOrderByAggregateInput
  }

  export type NetworkMembershipScalarWhereWithAggregatesInput = {
    AND?: NetworkMembershipScalarWhereWithAggregatesInput | NetworkMembershipScalarWhereWithAggregatesInput[]
    OR?: NetworkMembershipScalarWhereWithAggregatesInput[]
    NOT?: NetworkMembershipScalarWhereWithAggregatesInput | NetworkMembershipScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"NetworkMembership"> | string
    networkId?: StringWithAggregatesFilter<"NetworkMembership"> | string
    role?: EnumNetworkRoleWithAggregatesFilter<"NetworkMembership"> | $Enums.NetworkRole
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    at?: DateTimeFilter<"AuditLog"> | Date | string
    actorUserId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    subjectType?: StringFilter<"AuditLog"> | string
    subjectId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    actorOrgId?: StringNullableFilter<"AuditLog"> | string | null
    actorNetworkId?: StringNullableFilter<"AuditLog"> | string | null
    actor?: XOR<UserScalarRelationFilter, UserWhereInput>
    org?: XOR<OrgNullableScalarRelationFilter, OrgWhereInput> | null
    network?: XOR<NetworkNullableScalarRelationFilter, NetworkWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    at?: SortOrder
    actorUserId?: SortOrder
    action?: SortOrder
    subjectType?: SortOrder
    subjectId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    actorOrgId?: SortOrderInput | SortOrder
    actorNetworkId?: SortOrderInput | SortOrder
    actor?: UserOrderByWithRelationInput
    org?: OrgOrderByWithRelationInput
    network?: NetworkOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    at?: DateTimeFilter<"AuditLog"> | Date | string
    actorUserId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    subjectType?: StringFilter<"AuditLog"> | string
    subjectId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    actorOrgId?: StringNullableFilter<"AuditLog"> | string | null
    actorNetworkId?: StringNullableFilter<"AuditLog"> | string | null
    actor?: XOR<UserScalarRelationFilter, UserWhereInput>
    org?: XOR<OrgNullableScalarRelationFilter, OrgWhereInput> | null
    network?: XOR<NetworkNullableScalarRelationFilter, NetworkWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    at?: SortOrder
    actorUserId?: SortOrder
    action?: SortOrder
    subjectType?: SortOrder
    subjectId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    actorOrgId?: SortOrderInput | SortOrder
    actorNetworkId?: SortOrderInput | SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    at?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
    actorUserId?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    subjectType?: StringWithAggregatesFilter<"AuditLog"> | string
    subjectId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    details?: JsonNullableWithAggregatesFilter<"AuditLog">
    actorOrgId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    actorNetworkId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
  }

  export type OrgCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    networks?: NetworkCreateNestedManyWithoutOrgInput
    orgMemberships?: OrgMembershipCreateNestedManyWithoutOrgInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrgInput
  }

  export type OrgUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    networks?: NetworkUncheckedCreateNestedManyWithoutOrgInput
    orgMemberships?: OrgMembershipUncheckedCreateNestedManyWithoutOrgInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrgInput
  }

  export type OrgUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networks?: NetworkUpdateManyWithoutOrgNestedInput
    orgMemberships?: OrgMembershipUpdateManyWithoutOrgNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrgNestedInput
  }

  export type OrgUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networks?: NetworkUncheckedUpdateManyWithoutOrgNestedInput
    orgMemberships?: OrgMembershipUncheckedUpdateManyWithoutOrgNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrgNestedInput
  }

  export type OrgCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
  }

  export type OrgUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrgUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NetworkCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    org: OrgCreateNestedOneWithoutNetworksInput
    currentBundle?: BundleCreateNestedOneWithoutNetworksAsCurrentInput
    practices?: PracticeCreateNestedManyWithoutNetworkInput
    bundles?: BundleCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogCreateNestedManyWithoutNetworkInput
  }

  export type NetworkUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    orgId: string
    currentBundleId?: string | null
    practices?: PracticeUncheckedCreateNestedManyWithoutNetworkInput
    bundles?: BundleUncheckedCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipUncheckedCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutNetworkInput
  }

  export type NetworkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    org?: OrgUpdateOneRequiredWithoutNetworksNestedInput
    currentBundle?: BundleUpdateOneWithoutNetworksAsCurrentNestedInput
    practices?: PracticeUpdateManyWithoutNetworkNestedInput
    bundles?: BundleUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgId?: StringFieldUpdateOperationsInput | string
    currentBundleId?: NullableStringFieldUpdateOperationsInput | string | null
    practices?: PracticeUncheckedUpdateManyWithoutNetworkNestedInput
    bundles?: BundleUncheckedUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUncheckedUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    orgId: string
    currentBundleId?: string | null
  }

  export type NetworkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NetworkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgId?: StringFieldUpdateOperationsInput | string
    currentBundleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PracticeCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    network: NetworkCreateNestedOneWithoutPracticesInput
    keys?: PracticeKeyCreateNestedManyWithoutPracticeInput
    careEpisodes?: CareEpisodeCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    networkId: string
    keys?: PracticeKeyUncheckedCreateNestedManyWithoutPracticeInput
    careEpisodes?: CareEpisodeUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: NetworkUpdateOneRequiredWithoutPracticesNestedInput
    keys?: PracticeKeyUpdateManyWithoutPracticeNestedInput
    careEpisodes?: CareEpisodeUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networkId?: StringFieldUpdateOperationsInput | string
    keys?: PracticeKeyUncheckedUpdateManyWithoutPracticeNestedInput
    careEpisodes?: CareEpisodeUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    networkId: string
  }

  export type PracticeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networkId?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeKeyCreateInput = {
    id?: string
    publicKeyPem: string
    isActive?: boolean
    createdAt?: Date | string
    practice: PracticeCreateNestedOneWithoutKeysInput
  }

  export type PracticeKeyUncheckedCreateInput = {
    id?: string
    practiceId: string
    publicKeyPem: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type PracticeKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKeyPem?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practice?: PracticeUpdateOneRequiredWithoutKeysNestedInput
  }

  export type PracticeKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    publicKeyPem?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeKeyCreateManyInput = {
    id?: string
    practiceId: string
    publicKeyPem: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type PracticeKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKeyPem?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    publicKeyPem?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateInput = {
    id: string
    createdAt?: Date | string
    submissions?: SubmissionCreateNestedManyWithoutPatientInput
    careEpisodes?: CareEpisodeCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id: string
    createdAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutPatientInput
    careEpisodes?: CareEpisodeUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUpdateManyWithoutPatientNestedInput
    careEpisodes?: CareEpisodeUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutPatientNestedInput
    careEpisodes?: CareEpisodeUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id: string
    createdAt?: Date | string
  }

  export type PatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareEpisodeCreateInput = {
    id?: string
    startAt?: Date | string
    endAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutCareEpisodesInput
    practice: PracticeCreateNestedOneWithoutCareEpisodesInput
  }

  export type CareEpisodeUncheckedCreateInput = {
    id?: string
    patientId: string
    practiceId: string
    startAt?: Date | string
    endAt?: Date | string | null
  }

  export type CareEpisodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutCareEpisodesNestedInput
    practice?: PracticeUpdateOneRequiredWithoutCareEpisodesNestedInput
  }

  export type CareEpisodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CareEpisodeCreateManyInput = {
    id?: string
    patientId: string
    practiceId: string
    startAt?: Date | string
    endAt?: Date | string | null
  }

  export type CareEpisodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CareEpisodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BundleCreateInput = {
    id?: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    network: NetworkCreateNestedOneWithoutBundlesInput
    submissions?: SubmissionCreateNestedManyWithoutBundleInput
    networksAsCurrent?: NetworkCreateNestedManyWithoutCurrentBundleInput
  }

  export type BundleUncheckedCreateInput = {
    id?: string
    networkId: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutBundleInput
    networksAsCurrent?: NetworkUncheckedCreateNestedManyWithoutCurrentBundleInput
  }

  export type BundleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: NetworkUpdateOneRequiredWithoutBundlesNestedInput
    submissions?: SubmissionUpdateManyWithoutBundleNestedInput
    networksAsCurrent?: NetworkUpdateManyWithoutCurrentBundleNestedInput
  }

  export type BundleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    networkId?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutBundleNestedInput
    networksAsCurrent?: NetworkUncheckedUpdateManyWithoutCurrentBundleNestedInput
  }

  export type BundleCreateManyInput = {
    id?: string
    networkId: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BundleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BundleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    networkId?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateInput = {
    id?: string
    bundleHash: string
    ciphertext: string
    iv: string
    tag: string
    wrappedDEK: string
    createdAt?: Date | string
    patient: PatientCreateNestedOneWithoutSubmissionsInput
    bundle: BundleCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateInput = {
    id?: string
    patientId: string
    bundleId: string
    bundleHash: string
    ciphertext: string
    iv: string
    tag: string
    wrappedDEK: string
    createdAt?: Date | string
  }

  export type SubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bundleHash?: StringFieldUpdateOperationsInput | string
    ciphertext?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    wrappedDEK?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutSubmissionsNestedInput
    bundle?: BundleUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    bundleId?: StringFieldUpdateOperationsInput | string
    bundleHash?: StringFieldUpdateOperationsInput | string
    ciphertext?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    wrappedDEK?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateManyInput = {
    id?: string
    patientId: string
    bundleId: string
    bundleHash: string
    ciphertext: string
    iv: string
    tag: string
    wrappedDEK: string
    createdAt?: Date | string
  }

  export type SubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    bundleHash?: StringFieldUpdateOperationsInput | string
    ciphertext?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    wrappedDEK?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    bundleId?: StringFieldUpdateOperationsInput | string
    bundleHash?: StringFieldUpdateOperationsInput | string
    ciphertext?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    wrappedDEK?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    orgMemberships?: OrgMembershipCreateNestedManyWithoutUserInput
    networkMemberships?: NetworkMembershipCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    orgMemberships?: OrgMembershipUncheckedCreateNestedManyWithoutUserInput
    networkMemberships?: NetworkMembershipUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgMemberships?: OrgMembershipUpdateManyWithoutUserNestedInput
    networkMemberships?: NetworkMembershipUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgMemberships?: OrgMembershipUncheckedUpdateManyWithoutUserNestedInput
    networkMemberships?: NetworkMembershipUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrgMembershipCreateInput = {
    role: $Enums.OrgRole
    user: UserCreateNestedOneWithoutOrgMembershipsInput
    org: OrgCreateNestedOneWithoutOrgMembershipsInput
  }

  export type OrgMembershipUncheckedCreateInput = {
    userId: string
    orgId: string
    role: $Enums.OrgRole
  }

  export type OrgMembershipUpdateInput = {
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
    user?: UserUpdateOneRequiredWithoutOrgMembershipsNestedInput
    org?: OrgUpdateOneRequiredWithoutOrgMembershipsNestedInput
  }

  export type OrgMembershipUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    orgId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type OrgMembershipCreateManyInput = {
    userId: string
    orgId: string
    role: $Enums.OrgRole
  }

  export type OrgMembershipUpdateManyMutationInput = {
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type OrgMembershipUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    orgId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type NetworkMembershipCreateInput = {
    role: $Enums.NetworkRole
    user: UserCreateNestedOneWithoutNetworkMembershipsInput
    network: NetworkCreateNestedOneWithoutNetworkMembershipsInput
  }

  export type NetworkMembershipUncheckedCreateInput = {
    userId: string
    networkId: string
    role: $Enums.NetworkRole
  }

  export type NetworkMembershipUpdateInput = {
    role?: EnumNetworkRoleFieldUpdateOperationsInput | $Enums.NetworkRole
    user?: UserUpdateOneRequiredWithoutNetworkMembershipsNestedInput
    network?: NetworkUpdateOneRequiredWithoutNetworkMembershipsNestedInput
  }

  export type NetworkMembershipUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    networkId?: StringFieldUpdateOperationsInput | string
    role?: EnumNetworkRoleFieldUpdateOperationsInput | $Enums.NetworkRole
  }

  export type NetworkMembershipCreateManyInput = {
    userId: string
    networkId: string
    role: $Enums.NetworkRole
  }

  export type NetworkMembershipUpdateManyMutationInput = {
    role?: EnumNetworkRoleFieldUpdateOperationsInput | $Enums.NetworkRole
  }

  export type NetworkMembershipUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    networkId?: StringFieldUpdateOperationsInput | string
    role?: EnumNetworkRoleFieldUpdateOperationsInput | $Enums.NetworkRole
  }

  export type AuditLogCreateInput = {
    id?: string
    at?: Date | string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actor: UserCreateNestedOneWithoutAuditLogsInput
    org?: OrgCreateNestedOneWithoutAuditLogsInput
    network?: NetworkCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    at?: Date | string
    actorUserId: string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: string | null
    actorNetworkId?: string | null
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actor?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    org?: OrgUpdateOneWithoutAuditLogsNestedInput
    network?: NetworkUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    actorUserId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    actorNetworkId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateManyInput = {
    id?: string
    at?: Date | string
    actorUserId: string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: string | null
    actorNetworkId?: string | null
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    actorUserId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    actorNetworkId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NetworkListRelationFilter = {
    every?: NetworkWhereInput
    some?: NetworkWhereInput
    none?: NetworkWhereInput
  }

  export type OrgMembershipListRelationFilter = {
    every?: OrgMembershipWhereInput
    some?: OrgMembershipWhereInput
    none?: OrgMembershipWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type NetworkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrgMembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrgCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type OrgMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type OrgMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type OrgScalarRelationFilter = {
    is?: OrgWhereInput
    isNot?: OrgWhereInput
  }

  export type BundleNullableScalarRelationFilter = {
    is?: BundleWhereInput | null
    isNot?: BundleWhereInput | null
  }

  export type PracticeListRelationFilter = {
    every?: PracticeWhereInput
    some?: PracticeWhereInput
    none?: PracticeWhereInput
  }

  export type BundleListRelationFilter = {
    every?: BundleWhereInput
    some?: BundleWhereInput
    none?: BundleWhereInput
  }

  export type NetworkMembershipListRelationFilter = {
    every?: NetworkMembershipWhereInput
    some?: NetworkMembershipWhereInput
    none?: NetworkMembershipWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PracticeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BundleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NetworkMembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NetworkCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    orgId?: SortOrder
    currentBundleId?: SortOrder
  }

  export type NetworkMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    orgId?: SortOrder
    currentBundleId?: SortOrder
  }

  export type NetworkMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    orgId?: SortOrder
    currentBundleId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NetworkScalarRelationFilter = {
    is?: NetworkWhereInput
    isNot?: NetworkWhereInput
  }

  export type PracticeKeyListRelationFilter = {
    every?: PracticeKeyWhereInput
    some?: PracticeKeyWhereInput
    none?: PracticeKeyWhereInput
  }

  export type CareEpisodeListRelationFilter = {
    every?: CareEpisodeWhereInput
    some?: CareEpisodeWhereInput
    none?: CareEpisodeWhereInput
  }

  export type PracticeKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CareEpisodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PracticeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    networkId?: SortOrder
  }

  export type PracticeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    networkId?: SortOrder
  }

  export type PracticeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    networkId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PracticeScalarRelationFilter = {
    is?: PracticeWhereInput
    isNot?: PracticeWhereInput
  }

  export type PracticeKeyCountOrderByAggregateInput = {
    id?: SortOrder
    practiceId?: SortOrder
    publicKeyPem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type PracticeKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    practiceId?: SortOrder
    publicKeyPem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type PracticeKeyMinOrderByAggregateInput = {
    id?: SortOrder
    practiceId?: SortOrder
    publicKeyPem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type SubmissionListRelationFilter = {
    every?: SubmissionWhereInput
    some?: SubmissionWhereInput
    none?: SubmissionWhereInput
  }

  export type SubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PatientScalarRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type CareEpisodeCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    practiceId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
  }

  export type CareEpisodeMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    practiceId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
  }

  export type CareEpisodeMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    practiceId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BundleCountOrderByAggregateInput = {
    id?: SortOrder
    networkId?: SortOrder
    meta?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
  }

  export type BundleMaxOrderByAggregateInput = {
    id?: SortOrder
    networkId?: SortOrder
    createdAt?: SortOrder
  }

  export type BundleMinOrderByAggregateInput = {
    id?: SortOrder
    networkId?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type BundleScalarRelationFilter = {
    is?: BundleWhereInput
    isNot?: BundleWhereInput
  }

  export type SubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    bundleId?: SortOrder
    bundleHash?: SortOrder
    ciphertext?: SortOrder
    iv?: SortOrder
    tag?: SortOrder
    wrappedDEK?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    bundleId?: SortOrder
    bundleHash?: SortOrder
    ciphertext?: SortOrder
    iv?: SortOrder
    tag?: SortOrder
    wrappedDEK?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    bundleId?: SortOrder
    bundleHash?: SortOrder
    ciphertext?: SortOrder
    iv?: SortOrder
    tag?: SortOrder
    wrappedDEK?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumOrgRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgRole | EnumOrgRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgRoleFilter<$PrismaModel> | $Enums.OrgRole
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type OrgMembershipUserIdOrgIdCompoundUniqueInput = {
    userId: string
    orgId: string
  }

  export type OrgMembershipCountOrderByAggregateInput = {
    userId?: SortOrder
    orgId?: SortOrder
    role?: SortOrder
  }

  export type OrgMembershipMaxOrderByAggregateInput = {
    userId?: SortOrder
    orgId?: SortOrder
    role?: SortOrder
  }

  export type OrgMembershipMinOrderByAggregateInput = {
    userId?: SortOrder
    orgId?: SortOrder
    role?: SortOrder
  }

  export type EnumOrgRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgRole | EnumOrgRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgRoleWithAggregatesFilter<$PrismaModel> | $Enums.OrgRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrgRoleFilter<$PrismaModel>
    _max?: NestedEnumOrgRoleFilter<$PrismaModel>
  }

  export type EnumNetworkRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.NetworkRole | EnumNetworkRoleFieldRefInput<$PrismaModel>
    in?: $Enums.NetworkRole[] | ListEnumNetworkRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.NetworkRole[] | ListEnumNetworkRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumNetworkRoleFilter<$PrismaModel> | $Enums.NetworkRole
  }

  export type NetworkMembershipUserIdNetworkIdCompoundUniqueInput = {
    userId: string
    networkId: string
  }

  export type NetworkMembershipCountOrderByAggregateInput = {
    userId?: SortOrder
    networkId?: SortOrder
    role?: SortOrder
  }

  export type NetworkMembershipMaxOrderByAggregateInput = {
    userId?: SortOrder
    networkId?: SortOrder
    role?: SortOrder
  }

  export type NetworkMembershipMinOrderByAggregateInput = {
    userId?: SortOrder
    networkId?: SortOrder
    role?: SortOrder
  }

  export type EnumNetworkRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NetworkRole | EnumNetworkRoleFieldRefInput<$PrismaModel>
    in?: $Enums.NetworkRole[] | ListEnumNetworkRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.NetworkRole[] | ListEnumNetworkRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumNetworkRoleWithAggregatesFilter<$PrismaModel> | $Enums.NetworkRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNetworkRoleFilter<$PrismaModel>
    _max?: NestedEnumNetworkRoleFilter<$PrismaModel>
  }

  export type OrgNullableScalarRelationFilter = {
    is?: OrgWhereInput | null
    isNot?: OrgWhereInput | null
  }

  export type NetworkNullableScalarRelationFilter = {
    is?: NetworkWhereInput | null
    isNot?: NetworkWhereInput | null
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    at?: SortOrder
    actorUserId?: SortOrder
    action?: SortOrder
    subjectType?: SortOrder
    subjectId?: SortOrder
    details?: SortOrder
    actorOrgId?: SortOrder
    actorNetworkId?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    at?: SortOrder
    actorUserId?: SortOrder
    action?: SortOrder
    subjectType?: SortOrder
    subjectId?: SortOrder
    actorOrgId?: SortOrder
    actorNetworkId?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    at?: SortOrder
    actorUserId?: SortOrder
    action?: SortOrder
    subjectType?: SortOrder
    subjectId?: SortOrder
    actorOrgId?: SortOrder
    actorNetworkId?: SortOrder
  }

  export type NetworkCreateNestedManyWithoutOrgInput = {
    create?: XOR<NetworkCreateWithoutOrgInput, NetworkUncheckedCreateWithoutOrgInput> | NetworkCreateWithoutOrgInput[] | NetworkUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: NetworkCreateOrConnectWithoutOrgInput | NetworkCreateOrConnectWithoutOrgInput[]
    createMany?: NetworkCreateManyOrgInputEnvelope
    connect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
  }

  export type OrgMembershipCreateNestedManyWithoutOrgInput = {
    create?: XOR<OrgMembershipCreateWithoutOrgInput, OrgMembershipUncheckedCreateWithoutOrgInput> | OrgMembershipCreateWithoutOrgInput[] | OrgMembershipUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: OrgMembershipCreateOrConnectWithoutOrgInput | OrgMembershipCreateOrConnectWithoutOrgInput[]
    createMany?: OrgMembershipCreateManyOrgInputEnvelope
    connect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutOrgInput = {
    create?: XOR<AuditLogCreateWithoutOrgInput, AuditLogUncheckedCreateWithoutOrgInput> | AuditLogCreateWithoutOrgInput[] | AuditLogUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrgInput | AuditLogCreateOrConnectWithoutOrgInput[]
    createMany?: AuditLogCreateManyOrgInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NetworkUncheckedCreateNestedManyWithoutOrgInput = {
    create?: XOR<NetworkCreateWithoutOrgInput, NetworkUncheckedCreateWithoutOrgInput> | NetworkCreateWithoutOrgInput[] | NetworkUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: NetworkCreateOrConnectWithoutOrgInput | NetworkCreateOrConnectWithoutOrgInput[]
    createMany?: NetworkCreateManyOrgInputEnvelope
    connect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
  }

  export type OrgMembershipUncheckedCreateNestedManyWithoutOrgInput = {
    create?: XOR<OrgMembershipCreateWithoutOrgInput, OrgMembershipUncheckedCreateWithoutOrgInput> | OrgMembershipCreateWithoutOrgInput[] | OrgMembershipUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: OrgMembershipCreateOrConnectWithoutOrgInput | OrgMembershipCreateOrConnectWithoutOrgInput[]
    createMany?: OrgMembershipCreateManyOrgInputEnvelope
    connect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutOrgInput = {
    create?: XOR<AuditLogCreateWithoutOrgInput, AuditLogUncheckedCreateWithoutOrgInput> | AuditLogCreateWithoutOrgInput[] | AuditLogUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrgInput | AuditLogCreateOrConnectWithoutOrgInput[]
    createMany?: AuditLogCreateManyOrgInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NetworkUpdateManyWithoutOrgNestedInput = {
    create?: XOR<NetworkCreateWithoutOrgInput, NetworkUncheckedCreateWithoutOrgInput> | NetworkCreateWithoutOrgInput[] | NetworkUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: NetworkCreateOrConnectWithoutOrgInput | NetworkCreateOrConnectWithoutOrgInput[]
    upsert?: NetworkUpsertWithWhereUniqueWithoutOrgInput | NetworkUpsertWithWhereUniqueWithoutOrgInput[]
    createMany?: NetworkCreateManyOrgInputEnvelope
    set?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    disconnect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    delete?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    connect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    update?: NetworkUpdateWithWhereUniqueWithoutOrgInput | NetworkUpdateWithWhereUniqueWithoutOrgInput[]
    updateMany?: NetworkUpdateManyWithWhereWithoutOrgInput | NetworkUpdateManyWithWhereWithoutOrgInput[]
    deleteMany?: NetworkScalarWhereInput | NetworkScalarWhereInput[]
  }

  export type OrgMembershipUpdateManyWithoutOrgNestedInput = {
    create?: XOR<OrgMembershipCreateWithoutOrgInput, OrgMembershipUncheckedCreateWithoutOrgInput> | OrgMembershipCreateWithoutOrgInput[] | OrgMembershipUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: OrgMembershipCreateOrConnectWithoutOrgInput | OrgMembershipCreateOrConnectWithoutOrgInput[]
    upsert?: OrgMembershipUpsertWithWhereUniqueWithoutOrgInput | OrgMembershipUpsertWithWhereUniqueWithoutOrgInput[]
    createMany?: OrgMembershipCreateManyOrgInputEnvelope
    set?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    disconnect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    delete?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    connect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    update?: OrgMembershipUpdateWithWhereUniqueWithoutOrgInput | OrgMembershipUpdateWithWhereUniqueWithoutOrgInput[]
    updateMany?: OrgMembershipUpdateManyWithWhereWithoutOrgInput | OrgMembershipUpdateManyWithWhereWithoutOrgInput[]
    deleteMany?: OrgMembershipScalarWhereInput | OrgMembershipScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutOrgNestedInput = {
    create?: XOR<AuditLogCreateWithoutOrgInput, AuditLogUncheckedCreateWithoutOrgInput> | AuditLogCreateWithoutOrgInput[] | AuditLogUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrgInput | AuditLogCreateOrConnectWithoutOrgInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutOrgInput | AuditLogUpsertWithWhereUniqueWithoutOrgInput[]
    createMany?: AuditLogCreateManyOrgInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutOrgInput | AuditLogUpdateWithWhereUniqueWithoutOrgInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutOrgInput | AuditLogUpdateManyWithWhereWithoutOrgInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NetworkUncheckedUpdateManyWithoutOrgNestedInput = {
    create?: XOR<NetworkCreateWithoutOrgInput, NetworkUncheckedCreateWithoutOrgInput> | NetworkCreateWithoutOrgInput[] | NetworkUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: NetworkCreateOrConnectWithoutOrgInput | NetworkCreateOrConnectWithoutOrgInput[]
    upsert?: NetworkUpsertWithWhereUniqueWithoutOrgInput | NetworkUpsertWithWhereUniqueWithoutOrgInput[]
    createMany?: NetworkCreateManyOrgInputEnvelope
    set?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    disconnect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    delete?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    connect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    update?: NetworkUpdateWithWhereUniqueWithoutOrgInput | NetworkUpdateWithWhereUniqueWithoutOrgInput[]
    updateMany?: NetworkUpdateManyWithWhereWithoutOrgInput | NetworkUpdateManyWithWhereWithoutOrgInput[]
    deleteMany?: NetworkScalarWhereInput | NetworkScalarWhereInput[]
  }

  export type OrgMembershipUncheckedUpdateManyWithoutOrgNestedInput = {
    create?: XOR<OrgMembershipCreateWithoutOrgInput, OrgMembershipUncheckedCreateWithoutOrgInput> | OrgMembershipCreateWithoutOrgInput[] | OrgMembershipUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: OrgMembershipCreateOrConnectWithoutOrgInput | OrgMembershipCreateOrConnectWithoutOrgInput[]
    upsert?: OrgMembershipUpsertWithWhereUniqueWithoutOrgInput | OrgMembershipUpsertWithWhereUniqueWithoutOrgInput[]
    createMany?: OrgMembershipCreateManyOrgInputEnvelope
    set?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    disconnect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    delete?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    connect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    update?: OrgMembershipUpdateWithWhereUniqueWithoutOrgInput | OrgMembershipUpdateWithWhereUniqueWithoutOrgInput[]
    updateMany?: OrgMembershipUpdateManyWithWhereWithoutOrgInput | OrgMembershipUpdateManyWithWhereWithoutOrgInput[]
    deleteMany?: OrgMembershipScalarWhereInput | OrgMembershipScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutOrgNestedInput = {
    create?: XOR<AuditLogCreateWithoutOrgInput, AuditLogUncheckedCreateWithoutOrgInput> | AuditLogCreateWithoutOrgInput[] | AuditLogUncheckedCreateWithoutOrgInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrgInput | AuditLogCreateOrConnectWithoutOrgInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutOrgInput | AuditLogUpsertWithWhereUniqueWithoutOrgInput[]
    createMany?: AuditLogCreateManyOrgInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutOrgInput | AuditLogUpdateWithWhereUniqueWithoutOrgInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutOrgInput | AuditLogUpdateManyWithWhereWithoutOrgInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type OrgCreateNestedOneWithoutNetworksInput = {
    create?: XOR<OrgCreateWithoutNetworksInput, OrgUncheckedCreateWithoutNetworksInput>
    connectOrCreate?: OrgCreateOrConnectWithoutNetworksInput
    connect?: OrgWhereUniqueInput
  }

  export type BundleCreateNestedOneWithoutNetworksAsCurrentInput = {
    create?: XOR<BundleCreateWithoutNetworksAsCurrentInput, BundleUncheckedCreateWithoutNetworksAsCurrentInput>
    connectOrCreate?: BundleCreateOrConnectWithoutNetworksAsCurrentInput
    connect?: BundleWhereUniqueInput
  }

  export type PracticeCreateNestedManyWithoutNetworkInput = {
    create?: XOR<PracticeCreateWithoutNetworkInput, PracticeUncheckedCreateWithoutNetworkInput> | PracticeCreateWithoutNetworkInput[] | PracticeUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutNetworkInput | PracticeCreateOrConnectWithoutNetworkInput[]
    createMany?: PracticeCreateManyNetworkInputEnvelope
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
  }

  export type BundleCreateNestedManyWithoutNetworkInput = {
    create?: XOR<BundleCreateWithoutNetworkInput, BundleUncheckedCreateWithoutNetworkInput> | BundleCreateWithoutNetworkInput[] | BundleUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: BundleCreateOrConnectWithoutNetworkInput | BundleCreateOrConnectWithoutNetworkInput[]
    createMany?: BundleCreateManyNetworkInputEnvelope
    connect?: BundleWhereUniqueInput | BundleWhereUniqueInput[]
  }

  export type NetworkMembershipCreateNestedManyWithoutNetworkInput = {
    create?: XOR<NetworkMembershipCreateWithoutNetworkInput, NetworkMembershipUncheckedCreateWithoutNetworkInput> | NetworkMembershipCreateWithoutNetworkInput[] | NetworkMembershipUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: NetworkMembershipCreateOrConnectWithoutNetworkInput | NetworkMembershipCreateOrConnectWithoutNetworkInput[]
    createMany?: NetworkMembershipCreateManyNetworkInputEnvelope
    connect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutNetworkInput = {
    create?: XOR<AuditLogCreateWithoutNetworkInput, AuditLogUncheckedCreateWithoutNetworkInput> | AuditLogCreateWithoutNetworkInput[] | AuditLogUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutNetworkInput | AuditLogCreateOrConnectWithoutNetworkInput[]
    createMany?: AuditLogCreateManyNetworkInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type PracticeUncheckedCreateNestedManyWithoutNetworkInput = {
    create?: XOR<PracticeCreateWithoutNetworkInput, PracticeUncheckedCreateWithoutNetworkInput> | PracticeCreateWithoutNetworkInput[] | PracticeUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutNetworkInput | PracticeCreateOrConnectWithoutNetworkInput[]
    createMany?: PracticeCreateManyNetworkInputEnvelope
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
  }

  export type BundleUncheckedCreateNestedManyWithoutNetworkInput = {
    create?: XOR<BundleCreateWithoutNetworkInput, BundleUncheckedCreateWithoutNetworkInput> | BundleCreateWithoutNetworkInput[] | BundleUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: BundleCreateOrConnectWithoutNetworkInput | BundleCreateOrConnectWithoutNetworkInput[]
    createMany?: BundleCreateManyNetworkInputEnvelope
    connect?: BundleWhereUniqueInput | BundleWhereUniqueInput[]
  }

  export type NetworkMembershipUncheckedCreateNestedManyWithoutNetworkInput = {
    create?: XOR<NetworkMembershipCreateWithoutNetworkInput, NetworkMembershipUncheckedCreateWithoutNetworkInput> | NetworkMembershipCreateWithoutNetworkInput[] | NetworkMembershipUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: NetworkMembershipCreateOrConnectWithoutNetworkInput | NetworkMembershipCreateOrConnectWithoutNetworkInput[]
    createMany?: NetworkMembershipCreateManyNetworkInputEnvelope
    connect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutNetworkInput = {
    create?: XOR<AuditLogCreateWithoutNetworkInput, AuditLogUncheckedCreateWithoutNetworkInput> | AuditLogCreateWithoutNetworkInput[] | AuditLogUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutNetworkInput | AuditLogCreateOrConnectWithoutNetworkInput[]
    createMany?: AuditLogCreateManyNetworkInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type OrgUpdateOneRequiredWithoutNetworksNestedInput = {
    create?: XOR<OrgCreateWithoutNetworksInput, OrgUncheckedCreateWithoutNetworksInput>
    connectOrCreate?: OrgCreateOrConnectWithoutNetworksInput
    upsert?: OrgUpsertWithoutNetworksInput
    connect?: OrgWhereUniqueInput
    update?: XOR<XOR<OrgUpdateToOneWithWhereWithoutNetworksInput, OrgUpdateWithoutNetworksInput>, OrgUncheckedUpdateWithoutNetworksInput>
  }

  export type BundleUpdateOneWithoutNetworksAsCurrentNestedInput = {
    create?: XOR<BundleCreateWithoutNetworksAsCurrentInput, BundleUncheckedCreateWithoutNetworksAsCurrentInput>
    connectOrCreate?: BundleCreateOrConnectWithoutNetworksAsCurrentInput
    upsert?: BundleUpsertWithoutNetworksAsCurrentInput
    disconnect?: BundleWhereInput | boolean
    delete?: BundleWhereInput | boolean
    connect?: BundleWhereUniqueInput
    update?: XOR<XOR<BundleUpdateToOneWithWhereWithoutNetworksAsCurrentInput, BundleUpdateWithoutNetworksAsCurrentInput>, BundleUncheckedUpdateWithoutNetworksAsCurrentInput>
  }

  export type PracticeUpdateManyWithoutNetworkNestedInput = {
    create?: XOR<PracticeCreateWithoutNetworkInput, PracticeUncheckedCreateWithoutNetworkInput> | PracticeCreateWithoutNetworkInput[] | PracticeUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutNetworkInput | PracticeCreateOrConnectWithoutNetworkInput[]
    upsert?: PracticeUpsertWithWhereUniqueWithoutNetworkInput | PracticeUpsertWithWhereUniqueWithoutNetworkInput[]
    createMany?: PracticeCreateManyNetworkInputEnvelope
    set?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    disconnect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    delete?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    update?: PracticeUpdateWithWhereUniqueWithoutNetworkInput | PracticeUpdateWithWhereUniqueWithoutNetworkInput[]
    updateMany?: PracticeUpdateManyWithWhereWithoutNetworkInput | PracticeUpdateManyWithWhereWithoutNetworkInput[]
    deleteMany?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
  }

  export type BundleUpdateManyWithoutNetworkNestedInput = {
    create?: XOR<BundleCreateWithoutNetworkInput, BundleUncheckedCreateWithoutNetworkInput> | BundleCreateWithoutNetworkInput[] | BundleUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: BundleCreateOrConnectWithoutNetworkInput | BundleCreateOrConnectWithoutNetworkInput[]
    upsert?: BundleUpsertWithWhereUniqueWithoutNetworkInput | BundleUpsertWithWhereUniqueWithoutNetworkInput[]
    createMany?: BundleCreateManyNetworkInputEnvelope
    set?: BundleWhereUniqueInput | BundleWhereUniqueInput[]
    disconnect?: BundleWhereUniqueInput | BundleWhereUniqueInput[]
    delete?: BundleWhereUniqueInput | BundleWhereUniqueInput[]
    connect?: BundleWhereUniqueInput | BundleWhereUniqueInput[]
    update?: BundleUpdateWithWhereUniqueWithoutNetworkInput | BundleUpdateWithWhereUniqueWithoutNetworkInput[]
    updateMany?: BundleUpdateManyWithWhereWithoutNetworkInput | BundleUpdateManyWithWhereWithoutNetworkInput[]
    deleteMany?: BundleScalarWhereInput | BundleScalarWhereInput[]
  }

  export type NetworkMembershipUpdateManyWithoutNetworkNestedInput = {
    create?: XOR<NetworkMembershipCreateWithoutNetworkInput, NetworkMembershipUncheckedCreateWithoutNetworkInput> | NetworkMembershipCreateWithoutNetworkInput[] | NetworkMembershipUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: NetworkMembershipCreateOrConnectWithoutNetworkInput | NetworkMembershipCreateOrConnectWithoutNetworkInput[]
    upsert?: NetworkMembershipUpsertWithWhereUniqueWithoutNetworkInput | NetworkMembershipUpsertWithWhereUniqueWithoutNetworkInput[]
    createMany?: NetworkMembershipCreateManyNetworkInputEnvelope
    set?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    disconnect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    delete?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    connect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    update?: NetworkMembershipUpdateWithWhereUniqueWithoutNetworkInput | NetworkMembershipUpdateWithWhereUniqueWithoutNetworkInput[]
    updateMany?: NetworkMembershipUpdateManyWithWhereWithoutNetworkInput | NetworkMembershipUpdateManyWithWhereWithoutNetworkInput[]
    deleteMany?: NetworkMembershipScalarWhereInput | NetworkMembershipScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutNetworkNestedInput = {
    create?: XOR<AuditLogCreateWithoutNetworkInput, AuditLogUncheckedCreateWithoutNetworkInput> | AuditLogCreateWithoutNetworkInput[] | AuditLogUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutNetworkInput | AuditLogCreateOrConnectWithoutNetworkInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutNetworkInput | AuditLogUpsertWithWhereUniqueWithoutNetworkInput[]
    createMany?: AuditLogCreateManyNetworkInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutNetworkInput | AuditLogUpdateWithWhereUniqueWithoutNetworkInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutNetworkInput | AuditLogUpdateManyWithWhereWithoutNetworkInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PracticeUncheckedUpdateManyWithoutNetworkNestedInput = {
    create?: XOR<PracticeCreateWithoutNetworkInput, PracticeUncheckedCreateWithoutNetworkInput> | PracticeCreateWithoutNetworkInput[] | PracticeUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutNetworkInput | PracticeCreateOrConnectWithoutNetworkInput[]
    upsert?: PracticeUpsertWithWhereUniqueWithoutNetworkInput | PracticeUpsertWithWhereUniqueWithoutNetworkInput[]
    createMany?: PracticeCreateManyNetworkInputEnvelope
    set?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    disconnect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    delete?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    update?: PracticeUpdateWithWhereUniqueWithoutNetworkInput | PracticeUpdateWithWhereUniqueWithoutNetworkInput[]
    updateMany?: PracticeUpdateManyWithWhereWithoutNetworkInput | PracticeUpdateManyWithWhereWithoutNetworkInput[]
    deleteMany?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
  }

  export type BundleUncheckedUpdateManyWithoutNetworkNestedInput = {
    create?: XOR<BundleCreateWithoutNetworkInput, BundleUncheckedCreateWithoutNetworkInput> | BundleCreateWithoutNetworkInput[] | BundleUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: BundleCreateOrConnectWithoutNetworkInput | BundleCreateOrConnectWithoutNetworkInput[]
    upsert?: BundleUpsertWithWhereUniqueWithoutNetworkInput | BundleUpsertWithWhereUniqueWithoutNetworkInput[]
    createMany?: BundleCreateManyNetworkInputEnvelope
    set?: BundleWhereUniqueInput | BundleWhereUniqueInput[]
    disconnect?: BundleWhereUniqueInput | BundleWhereUniqueInput[]
    delete?: BundleWhereUniqueInput | BundleWhereUniqueInput[]
    connect?: BundleWhereUniqueInput | BundleWhereUniqueInput[]
    update?: BundleUpdateWithWhereUniqueWithoutNetworkInput | BundleUpdateWithWhereUniqueWithoutNetworkInput[]
    updateMany?: BundleUpdateManyWithWhereWithoutNetworkInput | BundleUpdateManyWithWhereWithoutNetworkInput[]
    deleteMany?: BundleScalarWhereInput | BundleScalarWhereInput[]
  }

  export type NetworkMembershipUncheckedUpdateManyWithoutNetworkNestedInput = {
    create?: XOR<NetworkMembershipCreateWithoutNetworkInput, NetworkMembershipUncheckedCreateWithoutNetworkInput> | NetworkMembershipCreateWithoutNetworkInput[] | NetworkMembershipUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: NetworkMembershipCreateOrConnectWithoutNetworkInput | NetworkMembershipCreateOrConnectWithoutNetworkInput[]
    upsert?: NetworkMembershipUpsertWithWhereUniqueWithoutNetworkInput | NetworkMembershipUpsertWithWhereUniqueWithoutNetworkInput[]
    createMany?: NetworkMembershipCreateManyNetworkInputEnvelope
    set?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    disconnect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    delete?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    connect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    update?: NetworkMembershipUpdateWithWhereUniqueWithoutNetworkInput | NetworkMembershipUpdateWithWhereUniqueWithoutNetworkInput[]
    updateMany?: NetworkMembershipUpdateManyWithWhereWithoutNetworkInput | NetworkMembershipUpdateManyWithWhereWithoutNetworkInput[]
    deleteMany?: NetworkMembershipScalarWhereInput | NetworkMembershipScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutNetworkNestedInput = {
    create?: XOR<AuditLogCreateWithoutNetworkInput, AuditLogUncheckedCreateWithoutNetworkInput> | AuditLogCreateWithoutNetworkInput[] | AuditLogUncheckedCreateWithoutNetworkInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutNetworkInput | AuditLogCreateOrConnectWithoutNetworkInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutNetworkInput | AuditLogUpsertWithWhereUniqueWithoutNetworkInput[]
    createMany?: AuditLogCreateManyNetworkInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutNetworkInput | AuditLogUpdateWithWhereUniqueWithoutNetworkInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutNetworkInput | AuditLogUpdateManyWithWhereWithoutNetworkInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NetworkCreateNestedOneWithoutPracticesInput = {
    create?: XOR<NetworkCreateWithoutPracticesInput, NetworkUncheckedCreateWithoutPracticesInput>
    connectOrCreate?: NetworkCreateOrConnectWithoutPracticesInput
    connect?: NetworkWhereUniqueInput
  }

  export type PracticeKeyCreateNestedManyWithoutPracticeInput = {
    create?: XOR<PracticeKeyCreateWithoutPracticeInput, PracticeKeyUncheckedCreateWithoutPracticeInput> | PracticeKeyCreateWithoutPracticeInput[] | PracticeKeyUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PracticeKeyCreateOrConnectWithoutPracticeInput | PracticeKeyCreateOrConnectWithoutPracticeInput[]
    createMany?: PracticeKeyCreateManyPracticeInputEnvelope
    connect?: PracticeKeyWhereUniqueInput | PracticeKeyWhereUniqueInput[]
  }

  export type CareEpisodeCreateNestedManyWithoutPracticeInput = {
    create?: XOR<CareEpisodeCreateWithoutPracticeInput, CareEpisodeUncheckedCreateWithoutPracticeInput> | CareEpisodeCreateWithoutPracticeInput[] | CareEpisodeUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: CareEpisodeCreateOrConnectWithoutPracticeInput | CareEpisodeCreateOrConnectWithoutPracticeInput[]
    createMany?: CareEpisodeCreateManyPracticeInputEnvelope
    connect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
  }

  export type PracticeKeyUncheckedCreateNestedManyWithoutPracticeInput = {
    create?: XOR<PracticeKeyCreateWithoutPracticeInput, PracticeKeyUncheckedCreateWithoutPracticeInput> | PracticeKeyCreateWithoutPracticeInput[] | PracticeKeyUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PracticeKeyCreateOrConnectWithoutPracticeInput | PracticeKeyCreateOrConnectWithoutPracticeInput[]
    createMany?: PracticeKeyCreateManyPracticeInputEnvelope
    connect?: PracticeKeyWhereUniqueInput | PracticeKeyWhereUniqueInput[]
  }

  export type CareEpisodeUncheckedCreateNestedManyWithoutPracticeInput = {
    create?: XOR<CareEpisodeCreateWithoutPracticeInput, CareEpisodeUncheckedCreateWithoutPracticeInput> | CareEpisodeCreateWithoutPracticeInput[] | CareEpisodeUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: CareEpisodeCreateOrConnectWithoutPracticeInput | CareEpisodeCreateOrConnectWithoutPracticeInput[]
    createMany?: CareEpisodeCreateManyPracticeInputEnvelope
    connect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
  }

  export type NetworkUpdateOneRequiredWithoutPracticesNestedInput = {
    create?: XOR<NetworkCreateWithoutPracticesInput, NetworkUncheckedCreateWithoutPracticesInput>
    connectOrCreate?: NetworkCreateOrConnectWithoutPracticesInput
    upsert?: NetworkUpsertWithoutPracticesInput
    connect?: NetworkWhereUniqueInput
    update?: XOR<XOR<NetworkUpdateToOneWithWhereWithoutPracticesInput, NetworkUpdateWithoutPracticesInput>, NetworkUncheckedUpdateWithoutPracticesInput>
  }

  export type PracticeKeyUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<PracticeKeyCreateWithoutPracticeInput, PracticeKeyUncheckedCreateWithoutPracticeInput> | PracticeKeyCreateWithoutPracticeInput[] | PracticeKeyUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PracticeKeyCreateOrConnectWithoutPracticeInput | PracticeKeyCreateOrConnectWithoutPracticeInput[]
    upsert?: PracticeKeyUpsertWithWhereUniqueWithoutPracticeInput | PracticeKeyUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: PracticeKeyCreateManyPracticeInputEnvelope
    set?: PracticeKeyWhereUniqueInput | PracticeKeyWhereUniqueInput[]
    disconnect?: PracticeKeyWhereUniqueInput | PracticeKeyWhereUniqueInput[]
    delete?: PracticeKeyWhereUniqueInput | PracticeKeyWhereUniqueInput[]
    connect?: PracticeKeyWhereUniqueInput | PracticeKeyWhereUniqueInput[]
    update?: PracticeKeyUpdateWithWhereUniqueWithoutPracticeInput | PracticeKeyUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: PracticeKeyUpdateManyWithWhereWithoutPracticeInput | PracticeKeyUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: PracticeKeyScalarWhereInput | PracticeKeyScalarWhereInput[]
  }

  export type CareEpisodeUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<CareEpisodeCreateWithoutPracticeInput, CareEpisodeUncheckedCreateWithoutPracticeInput> | CareEpisodeCreateWithoutPracticeInput[] | CareEpisodeUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: CareEpisodeCreateOrConnectWithoutPracticeInput | CareEpisodeCreateOrConnectWithoutPracticeInput[]
    upsert?: CareEpisodeUpsertWithWhereUniqueWithoutPracticeInput | CareEpisodeUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: CareEpisodeCreateManyPracticeInputEnvelope
    set?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    disconnect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    delete?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    connect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    update?: CareEpisodeUpdateWithWhereUniqueWithoutPracticeInput | CareEpisodeUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: CareEpisodeUpdateManyWithWhereWithoutPracticeInput | CareEpisodeUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: CareEpisodeScalarWhereInput | CareEpisodeScalarWhereInput[]
  }

  export type PracticeKeyUncheckedUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<PracticeKeyCreateWithoutPracticeInput, PracticeKeyUncheckedCreateWithoutPracticeInput> | PracticeKeyCreateWithoutPracticeInput[] | PracticeKeyUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PracticeKeyCreateOrConnectWithoutPracticeInput | PracticeKeyCreateOrConnectWithoutPracticeInput[]
    upsert?: PracticeKeyUpsertWithWhereUniqueWithoutPracticeInput | PracticeKeyUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: PracticeKeyCreateManyPracticeInputEnvelope
    set?: PracticeKeyWhereUniqueInput | PracticeKeyWhereUniqueInput[]
    disconnect?: PracticeKeyWhereUniqueInput | PracticeKeyWhereUniqueInput[]
    delete?: PracticeKeyWhereUniqueInput | PracticeKeyWhereUniqueInput[]
    connect?: PracticeKeyWhereUniqueInput | PracticeKeyWhereUniqueInput[]
    update?: PracticeKeyUpdateWithWhereUniqueWithoutPracticeInput | PracticeKeyUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: PracticeKeyUpdateManyWithWhereWithoutPracticeInput | PracticeKeyUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: PracticeKeyScalarWhereInput | PracticeKeyScalarWhereInput[]
  }

  export type CareEpisodeUncheckedUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<CareEpisodeCreateWithoutPracticeInput, CareEpisodeUncheckedCreateWithoutPracticeInput> | CareEpisodeCreateWithoutPracticeInput[] | CareEpisodeUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: CareEpisodeCreateOrConnectWithoutPracticeInput | CareEpisodeCreateOrConnectWithoutPracticeInput[]
    upsert?: CareEpisodeUpsertWithWhereUniqueWithoutPracticeInput | CareEpisodeUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: CareEpisodeCreateManyPracticeInputEnvelope
    set?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    disconnect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    delete?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    connect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    update?: CareEpisodeUpdateWithWhereUniqueWithoutPracticeInput | CareEpisodeUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: CareEpisodeUpdateManyWithWhereWithoutPracticeInput | CareEpisodeUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: CareEpisodeScalarWhereInput | CareEpisodeScalarWhereInput[]
  }

  export type PracticeCreateNestedOneWithoutKeysInput = {
    create?: XOR<PracticeCreateWithoutKeysInput, PracticeUncheckedCreateWithoutKeysInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutKeysInput
    connect?: PracticeWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PracticeUpdateOneRequiredWithoutKeysNestedInput = {
    create?: XOR<PracticeCreateWithoutKeysInput, PracticeUncheckedCreateWithoutKeysInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutKeysInput
    upsert?: PracticeUpsertWithoutKeysInput
    connect?: PracticeWhereUniqueInput
    update?: XOR<XOR<PracticeUpdateToOneWithWhereWithoutKeysInput, PracticeUpdateWithoutKeysInput>, PracticeUncheckedUpdateWithoutKeysInput>
  }

  export type SubmissionCreateNestedManyWithoutPatientInput = {
    create?: XOR<SubmissionCreateWithoutPatientInput, SubmissionUncheckedCreateWithoutPatientInput> | SubmissionCreateWithoutPatientInput[] | SubmissionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutPatientInput | SubmissionCreateOrConnectWithoutPatientInput[]
    createMany?: SubmissionCreateManyPatientInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type CareEpisodeCreateNestedManyWithoutPatientInput = {
    create?: XOR<CareEpisodeCreateWithoutPatientInput, CareEpisodeUncheckedCreateWithoutPatientInput> | CareEpisodeCreateWithoutPatientInput[] | CareEpisodeUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: CareEpisodeCreateOrConnectWithoutPatientInput | CareEpisodeCreateOrConnectWithoutPatientInput[]
    createMany?: CareEpisodeCreateManyPatientInputEnvelope
    connect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<SubmissionCreateWithoutPatientInput, SubmissionUncheckedCreateWithoutPatientInput> | SubmissionCreateWithoutPatientInput[] | SubmissionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutPatientInput | SubmissionCreateOrConnectWithoutPatientInput[]
    createMany?: SubmissionCreateManyPatientInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type CareEpisodeUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<CareEpisodeCreateWithoutPatientInput, CareEpisodeUncheckedCreateWithoutPatientInput> | CareEpisodeCreateWithoutPatientInput[] | CareEpisodeUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: CareEpisodeCreateOrConnectWithoutPatientInput | CareEpisodeCreateOrConnectWithoutPatientInput[]
    createMany?: CareEpisodeCreateManyPatientInputEnvelope
    connect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
  }

  export type SubmissionUpdateManyWithoutPatientNestedInput = {
    create?: XOR<SubmissionCreateWithoutPatientInput, SubmissionUncheckedCreateWithoutPatientInput> | SubmissionCreateWithoutPatientInput[] | SubmissionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutPatientInput | SubmissionCreateOrConnectWithoutPatientInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutPatientInput | SubmissionUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: SubmissionCreateManyPatientInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutPatientInput | SubmissionUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutPatientInput | SubmissionUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type CareEpisodeUpdateManyWithoutPatientNestedInput = {
    create?: XOR<CareEpisodeCreateWithoutPatientInput, CareEpisodeUncheckedCreateWithoutPatientInput> | CareEpisodeCreateWithoutPatientInput[] | CareEpisodeUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: CareEpisodeCreateOrConnectWithoutPatientInput | CareEpisodeCreateOrConnectWithoutPatientInput[]
    upsert?: CareEpisodeUpsertWithWhereUniqueWithoutPatientInput | CareEpisodeUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: CareEpisodeCreateManyPatientInputEnvelope
    set?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    disconnect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    delete?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    connect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    update?: CareEpisodeUpdateWithWhereUniqueWithoutPatientInput | CareEpisodeUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: CareEpisodeUpdateManyWithWhereWithoutPatientInput | CareEpisodeUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: CareEpisodeScalarWhereInput | CareEpisodeScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<SubmissionCreateWithoutPatientInput, SubmissionUncheckedCreateWithoutPatientInput> | SubmissionCreateWithoutPatientInput[] | SubmissionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutPatientInput | SubmissionCreateOrConnectWithoutPatientInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutPatientInput | SubmissionUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: SubmissionCreateManyPatientInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutPatientInput | SubmissionUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutPatientInput | SubmissionUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type CareEpisodeUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<CareEpisodeCreateWithoutPatientInput, CareEpisodeUncheckedCreateWithoutPatientInput> | CareEpisodeCreateWithoutPatientInput[] | CareEpisodeUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: CareEpisodeCreateOrConnectWithoutPatientInput | CareEpisodeCreateOrConnectWithoutPatientInput[]
    upsert?: CareEpisodeUpsertWithWhereUniqueWithoutPatientInput | CareEpisodeUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: CareEpisodeCreateManyPatientInputEnvelope
    set?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    disconnect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    delete?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    connect?: CareEpisodeWhereUniqueInput | CareEpisodeWhereUniqueInput[]
    update?: CareEpisodeUpdateWithWhereUniqueWithoutPatientInput | CareEpisodeUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: CareEpisodeUpdateManyWithWhereWithoutPatientInput | CareEpisodeUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: CareEpisodeScalarWhereInput | CareEpisodeScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutCareEpisodesInput = {
    create?: XOR<PatientCreateWithoutCareEpisodesInput, PatientUncheckedCreateWithoutCareEpisodesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutCareEpisodesInput
    connect?: PatientWhereUniqueInput
  }

  export type PracticeCreateNestedOneWithoutCareEpisodesInput = {
    create?: XOR<PracticeCreateWithoutCareEpisodesInput, PracticeUncheckedCreateWithoutCareEpisodesInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutCareEpisodesInput
    connect?: PracticeWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PatientUpdateOneRequiredWithoutCareEpisodesNestedInput = {
    create?: XOR<PatientCreateWithoutCareEpisodesInput, PatientUncheckedCreateWithoutCareEpisodesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutCareEpisodesInput
    upsert?: PatientUpsertWithoutCareEpisodesInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutCareEpisodesInput, PatientUpdateWithoutCareEpisodesInput>, PatientUncheckedUpdateWithoutCareEpisodesInput>
  }

  export type PracticeUpdateOneRequiredWithoutCareEpisodesNestedInput = {
    create?: XOR<PracticeCreateWithoutCareEpisodesInput, PracticeUncheckedCreateWithoutCareEpisodesInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutCareEpisodesInput
    upsert?: PracticeUpsertWithoutCareEpisodesInput
    connect?: PracticeWhereUniqueInput
    update?: XOR<XOR<PracticeUpdateToOneWithWhereWithoutCareEpisodesInput, PracticeUpdateWithoutCareEpisodesInput>, PracticeUncheckedUpdateWithoutCareEpisodesInput>
  }

  export type NetworkCreateNestedOneWithoutBundlesInput = {
    create?: XOR<NetworkCreateWithoutBundlesInput, NetworkUncheckedCreateWithoutBundlesInput>
    connectOrCreate?: NetworkCreateOrConnectWithoutBundlesInput
    connect?: NetworkWhereUniqueInput
  }

  export type SubmissionCreateNestedManyWithoutBundleInput = {
    create?: XOR<SubmissionCreateWithoutBundleInput, SubmissionUncheckedCreateWithoutBundleInput> | SubmissionCreateWithoutBundleInput[] | SubmissionUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutBundleInput | SubmissionCreateOrConnectWithoutBundleInput[]
    createMany?: SubmissionCreateManyBundleInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type NetworkCreateNestedManyWithoutCurrentBundleInput = {
    create?: XOR<NetworkCreateWithoutCurrentBundleInput, NetworkUncheckedCreateWithoutCurrentBundleInput> | NetworkCreateWithoutCurrentBundleInput[] | NetworkUncheckedCreateWithoutCurrentBundleInput[]
    connectOrCreate?: NetworkCreateOrConnectWithoutCurrentBundleInput | NetworkCreateOrConnectWithoutCurrentBundleInput[]
    createMany?: NetworkCreateManyCurrentBundleInputEnvelope
    connect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutBundleInput = {
    create?: XOR<SubmissionCreateWithoutBundleInput, SubmissionUncheckedCreateWithoutBundleInput> | SubmissionCreateWithoutBundleInput[] | SubmissionUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutBundleInput | SubmissionCreateOrConnectWithoutBundleInput[]
    createMany?: SubmissionCreateManyBundleInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type NetworkUncheckedCreateNestedManyWithoutCurrentBundleInput = {
    create?: XOR<NetworkCreateWithoutCurrentBundleInput, NetworkUncheckedCreateWithoutCurrentBundleInput> | NetworkCreateWithoutCurrentBundleInput[] | NetworkUncheckedCreateWithoutCurrentBundleInput[]
    connectOrCreate?: NetworkCreateOrConnectWithoutCurrentBundleInput | NetworkCreateOrConnectWithoutCurrentBundleInput[]
    createMany?: NetworkCreateManyCurrentBundleInputEnvelope
    connect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
  }

  export type NetworkUpdateOneRequiredWithoutBundlesNestedInput = {
    create?: XOR<NetworkCreateWithoutBundlesInput, NetworkUncheckedCreateWithoutBundlesInput>
    connectOrCreate?: NetworkCreateOrConnectWithoutBundlesInput
    upsert?: NetworkUpsertWithoutBundlesInput
    connect?: NetworkWhereUniqueInput
    update?: XOR<XOR<NetworkUpdateToOneWithWhereWithoutBundlesInput, NetworkUpdateWithoutBundlesInput>, NetworkUncheckedUpdateWithoutBundlesInput>
  }

  export type SubmissionUpdateManyWithoutBundleNestedInput = {
    create?: XOR<SubmissionCreateWithoutBundleInput, SubmissionUncheckedCreateWithoutBundleInput> | SubmissionCreateWithoutBundleInput[] | SubmissionUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutBundleInput | SubmissionCreateOrConnectWithoutBundleInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutBundleInput | SubmissionUpsertWithWhereUniqueWithoutBundleInput[]
    createMany?: SubmissionCreateManyBundleInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutBundleInput | SubmissionUpdateWithWhereUniqueWithoutBundleInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutBundleInput | SubmissionUpdateManyWithWhereWithoutBundleInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type NetworkUpdateManyWithoutCurrentBundleNestedInput = {
    create?: XOR<NetworkCreateWithoutCurrentBundleInput, NetworkUncheckedCreateWithoutCurrentBundleInput> | NetworkCreateWithoutCurrentBundleInput[] | NetworkUncheckedCreateWithoutCurrentBundleInput[]
    connectOrCreate?: NetworkCreateOrConnectWithoutCurrentBundleInput | NetworkCreateOrConnectWithoutCurrentBundleInput[]
    upsert?: NetworkUpsertWithWhereUniqueWithoutCurrentBundleInput | NetworkUpsertWithWhereUniqueWithoutCurrentBundleInput[]
    createMany?: NetworkCreateManyCurrentBundleInputEnvelope
    set?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    disconnect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    delete?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    connect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    update?: NetworkUpdateWithWhereUniqueWithoutCurrentBundleInput | NetworkUpdateWithWhereUniqueWithoutCurrentBundleInput[]
    updateMany?: NetworkUpdateManyWithWhereWithoutCurrentBundleInput | NetworkUpdateManyWithWhereWithoutCurrentBundleInput[]
    deleteMany?: NetworkScalarWhereInput | NetworkScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutBundleNestedInput = {
    create?: XOR<SubmissionCreateWithoutBundleInput, SubmissionUncheckedCreateWithoutBundleInput> | SubmissionCreateWithoutBundleInput[] | SubmissionUncheckedCreateWithoutBundleInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutBundleInput | SubmissionCreateOrConnectWithoutBundleInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutBundleInput | SubmissionUpsertWithWhereUniqueWithoutBundleInput[]
    createMany?: SubmissionCreateManyBundleInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutBundleInput | SubmissionUpdateWithWhereUniqueWithoutBundleInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutBundleInput | SubmissionUpdateManyWithWhereWithoutBundleInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type NetworkUncheckedUpdateManyWithoutCurrentBundleNestedInput = {
    create?: XOR<NetworkCreateWithoutCurrentBundleInput, NetworkUncheckedCreateWithoutCurrentBundleInput> | NetworkCreateWithoutCurrentBundleInput[] | NetworkUncheckedCreateWithoutCurrentBundleInput[]
    connectOrCreate?: NetworkCreateOrConnectWithoutCurrentBundleInput | NetworkCreateOrConnectWithoutCurrentBundleInput[]
    upsert?: NetworkUpsertWithWhereUniqueWithoutCurrentBundleInput | NetworkUpsertWithWhereUniqueWithoutCurrentBundleInput[]
    createMany?: NetworkCreateManyCurrentBundleInputEnvelope
    set?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    disconnect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    delete?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    connect?: NetworkWhereUniqueInput | NetworkWhereUniqueInput[]
    update?: NetworkUpdateWithWhereUniqueWithoutCurrentBundleInput | NetworkUpdateWithWhereUniqueWithoutCurrentBundleInput[]
    updateMany?: NetworkUpdateManyWithWhereWithoutCurrentBundleInput | NetworkUpdateManyWithWhereWithoutCurrentBundleInput[]
    deleteMany?: NetworkScalarWhereInput | NetworkScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<PatientCreateWithoutSubmissionsInput, PatientUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutSubmissionsInput
    connect?: PatientWhereUniqueInput
  }

  export type BundleCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<BundleCreateWithoutSubmissionsInput, BundleUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: BundleCreateOrConnectWithoutSubmissionsInput
    connect?: BundleWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<PatientCreateWithoutSubmissionsInput, PatientUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutSubmissionsInput
    upsert?: PatientUpsertWithoutSubmissionsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutSubmissionsInput, PatientUpdateWithoutSubmissionsInput>, PatientUncheckedUpdateWithoutSubmissionsInput>
  }

  export type BundleUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<BundleCreateWithoutSubmissionsInput, BundleUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: BundleCreateOrConnectWithoutSubmissionsInput
    upsert?: BundleUpsertWithoutSubmissionsInput
    connect?: BundleWhereUniqueInput
    update?: XOR<XOR<BundleUpdateToOneWithWhereWithoutSubmissionsInput, BundleUpdateWithoutSubmissionsInput>, BundleUncheckedUpdateWithoutSubmissionsInput>
  }

  export type OrgMembershipCreateNestedManyWithoutUserInput = {
    create?: XOR<OrgMembershipCreateWithoutUserInput, OrgMembershipUncheckedCreateWithoutUserInput> | OrgMembershipCreateWithoutUserInput[] | OrgMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrgMembershipCreateOrConnectWithoutUserInput | OrgMembershipCreateOrConnectWithoutUserInput[]
    createMany?: OrgMembershipCreateManyUserInputEnvelope
    connect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
  }

  export type NetworkMembershipCreateNestedManyWithoutUserInput = {
    create?: XOR<NetworkMembershipCreateWithoutUserInput, NetworkMembershipUncheckedCreateWithoutUserInput> | NetworkMembershipCreateWithoutUserInput[] | NetworkMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NetworkMembershipCreateOrConnectWithoutUserInput | NetworkMembershipCreateOrConnectWithoutUserInput[]
    createMany?: NetworkMembershipCreateManyUserInputEnvelope
    connect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutActorInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type OrgMembershipUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrgMembershipCreateWithoutUserInput, OrgMembershipUncheckedCreateWithoutUserInput> | OrgMembershipCreateWithoutUserInput[] | OrgMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrgMembershipCreateOrConnectWithoutUserInput | OrgMembershipCreateOrConnectWithoutUserInput[]
    createMany?: OrgMembershipCreateManyUserInputEnvelope
    connect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
  }

  export type NetworkMembershipUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NetworkMembershipCreateWithoutUserInput, NetworkMembershipUncheckedCreateWithoutUserInput> | NetworkMembershipCreateWithoutUserInput[] | NetworkMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NetworkMembershipCreateOrConnectWithoutUserInput | NetworkMembershipCreateOrConnectWithoutUserInput[]
    createMany?: NetworkMembershipCreateManyUserInputEnvelope
    connect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutActorInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type OrgMembershipUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrgMembershipCreateWithoutUserInput, OrgMembershipUncheckedCreateWithoutUserInput> | OrgMembershipCreateWithoutUserInput[] | OrgMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrgMembershipCreateOrConnectWithoutUserInput | OrgMembershipCreateOrConnectWithoutUserInput[]
    upsert?: OrgMembershipUpsertWithWhereUniqueWithoutUserInput | OrgMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrgMembershipCreateManyUserInputEnvelope
    set?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    disconnect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    delete?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    connect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    update?: OrgMembershipUpdateWithWhereUniqueWithoutUserInput | OrgMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrgMembershipUpdateManyWithWhereWithoutUserInput | OrgMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrgMembershipScalarWhereInput | OrgMembershipScalarWhereInput[]
  }

  export type NetworkMembershipUpdateManyWithoutUserNestedInput = {
    create?: XOR<NetworkMembershipCreateWithoutUserInput, NetworkMembershipUncheckedCreateWithoutUserInput> | NetworkMembershipCreateWithoutUserInput[] | NetworkMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NetworkMembershipCreateOrConnectWithoutUserInput | NetworkMembershipCreateOrConnectWithoutUserInput[]
    upsert?: NetworkMembershipUpsertWithWhereUniqueWithoutUserInput | NetworkMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NetworkMembershipCreateManyUserInputEnvelope
    set?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    disconnect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    delete?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    connect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    update?: NetworkMembershipUpdateWithWhereUniqueWithoutUserInput | NetworkMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NetworkMembershipUpdateManyWithWhereWithoutUserInput | NetworkMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NetworkMembershipScalarWhereInput | NetworkMembershipScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutActorNestedInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutActorInput | AuditLogUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutActorInput | AuditLogUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutActorInput | AuditLogUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type OrgMembershipUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrgMembershipCreateWithoutUserInput, OrgMembershipUncheckedCreateWithoutUserInput> | OrgMembershipCreateWithoutUserInput[] | OrgMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrgMembershipCreateOrConnectWithoutUserInput | OrgMembershipCreateOrConnectWithoutUserInput[]
    upsert?: OrgMembershipUpsertWithWhereUniqueWithoutUserInput | OrgMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrgMembershipCreateManyUserInputEnvelope
    set?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    disconnect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    delete?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    connect?: OrgMembershipWhereUniqueInput | OrgMembershipWhereUniqueInput[]
    update?: OrgMembershipUpdateWithWhereUniqueWithoutUserInput | OrgMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrgMembershipUpdateManyWithWhereWithoutUserInput | OrgMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrgMembershipScalarWhereInput | OrgMembershipScalarWhereInput[]
  }

  export type NetworkMembershipUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NetworkMembershipCreateWithoutUserInput, NetworkMembershipUncheckedCreateWithoutUserInput> | NetworkMembershipCreateWithoutUserInput[] | NetworkMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NetworkMembershipCreateOrConnectWithoutUserInput | NetworkMembershipCreateOrConnectWithoutUserInput[]
    upsert?: NetworkMembershipUpsertWithWhereUniqueWithoutUserInput | NetworkMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NetworkMembershipCreateManyUserInputEnvelope
    set?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    disconnect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    delete?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    connect?: NetworkMembershipWhereUniqueInput | NetworkMembershipWhereUniqueInput[]
    update?: NetworkMembershipUpdateWithWhereUniqueWithoutUserInput | NetworkMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NetworkMembershipUpdateManyWithWhereWithoutUserInput | NetworkMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NetworkMembershipScalarWhereInput | NetworkMembershipScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutActorNestedInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutActorInput | AuditLogUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutActorInput | AuditLogUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutActorInput | AuditLogUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOrgMembershipsInput = {
    create?: XOR<UserCreateWithoutOrgMembershipsInput, UserUncheckedCreateWithoutOrgMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrgMembershipsInput
    connect?: UserWhereUniqueInput
  }

  export type OrgCreateNestedOneWithoutOrgMembershipsInput = {
    create?: XOR<OrgCreateWithoutOrgMembershipsInput, OrgUncheckedCreateWithoutOrgMembershipsInput>
    connectOrCreate?: OrgCreateOrConnectWithoutOrgMembershipsInput
    connect?: OrgWhereUniqueInput
  }

  export type EnumOrgRoleFieldUpdateOperationsInput = {
    set?: $Enums.OrgRole
  }

  export type UserUpdateOneRequiredWithoutOrgMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutOrgMembershipsInput, UserUncheckedCreateWithoutOrgMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrgMembershipsInput
    upsert?: UserUpsertWithoutOrgMembershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrgMembershipsInput, UserUpdateWithoutOrgMembershipsInput>, UserUncheckedUpdateWithoutOrgMembershipsInput>
  }

  export type OrgUpdateOneRequiredWithoutOrgMembershipsNestedInput = {
    create?: XOR<OrgCreateWithoutOrgMembershipsInput, OrgUncheckedCreateWithoutOrgMembershipsInput>
    connectOrCreate?: OrgCreateOrConnectWithoutOrgMembershipsInput
    upsert?: OrgUpsertWithoutOrgMembershipsInput
    connect?: OrgWhereUniqueInput
    update?: XOR<XOR<OrgUpdateToOneWithWhereWithoutOrgMembershipsInput, OrgUpdateWithoutOrgMembershipsInput>, OrgUncheckedUpdateWithoutOrgMembershipsInput>
  }

  export type UserCreateNestedOneWithoutNetworkMembershipsInput = {
    create?: XOR<UserCreateWithoutNetworkMembershipsInput, UserUncheckedCreateWithoutNetworkMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNetworkMembershipsInput
    connect?: UserWhereUniqueInput
  }

  export type NetworkCreateNestedOneWithoutNetworkMembershipsInput = {
    create?: XOR<NetworkCreateWithoutNetworkMembershipsInput, NetworkUncheckedCreateWithoutNetworkMembershipsInput>
    connectOrCreate?: NetworkCreateOrConnectWithoutNetworkMembershipsInput
    connect?: NetworkWhereUniqueInput
  }

  export type EnumNetworkRoleFieldUpdateOperationsInput = {
    set?: $Enums.NetworkRole
  }

  export type UserUpdateOneRequiredWithoutNetworkMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutNetworkMembershipsInput, UserUncheckedCreateWithoutNetworkMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNetworkMembershipsInput
    upsert?: UserUpsertWithoutNetworkMembershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNetworkMembershipsInput, UserUpdateWithoutNetworkMembershipsInput>, UserUncheckedUpdateWithoutNetworkMembershipsInput>
  }

  export type NetworkUpdateOneRequiredWithoutNetworkMembershipsNestedInput = {
    create?: XOR<NetworkCreateWithoutNetworkMembershipsInput, NetworkUncheckedCreateWithoutNetworkMembershipsInput>
    connectOrCreate?: NetworkCreateOrConnectWithoutNetworkMembershipsInput
    upsert?: NetworkUpsertWithoutNetworkMembershipsInput
    connect?: NetworkWhereUniqueInput
    update?: XOR<XOR<NetworkUpdateToOneWithWhereWithoutNetworkMembershipsInput, NetworkUpdateWithoutNetworkMembershipsInput>, NetworkUncheckedUpdateWithoutNetworkMembershipsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type OrgCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<OrgCreateWithoutAuditLogsInput, OrgUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: OrgCreateOrConnectWithoutAuditLogsInput
    connect?: OrgWhereUniqueInput
  }

  export type NetworkCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<NetworkCreateWithoutAuditLogsInput, NetworkUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: NetworkCreateOrConnectWithoutAuditLogsInput
    connect?: NetworkWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type OrgUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<OrgCreateWithoutAuditLogsInput, OrgUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: OrgCreateOrConnectWithoutAuditLogsInput
    upsert?: OrgUpsertWithoutAuditLogsInput
    disconnect?: OrgWhereInput | boolean
    delete?: OrgWhereInput | boolean
    connect?: OrgWhereUniqueInput
    update?: XOR<XOR<OrgUpdateToOneWithWhereWithoutAuditLogsInput, OrgUpdateWithoutAuditLogsInput>, OrgUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NetworkUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<NetworkCreateWithoutAuditLogsInput, NetworkUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: NetworkCreateOrConnectWithoutAuditLogsInput
    upsert?: NetworkUpsertWithoutAuditLogsInput
    disconnect?: NetworkWhereInput | boolean
    delete?: NetworkWhereInput | boolean
    connect?: NetworkWhereUniqueInput
    update?: XOR<XOR<NetworkUpdateToOneWithWhereWithoutAuditLogsInput, NetworkUpdateWithoutAuditLogsInput>, NetworkUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumOrgRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgRole | EnumOrgRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgRoleFilter<$PrismaModel> | $Enums.OrgRole
  }

  export type NestedEnumOrgRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgRole | EnumOrgRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgRole[] | ListEnumOrgRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgRoleWithAggregatesFilter<$PrismaModel> | $Enums.OrgRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrgRoleFilter<$PrismaModel>
    _max?: NestedEnumOrgRoleFilter<$PrismaModel>
  }

  export type NestedEnumNetworkRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.NetworkRole | EnumNetworkRoleFieldRefInput<$PrismaModel>
    in?: $Enums.NetworkRole[] | ListEnumNetworkRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.NetworkRole[] | ListEnumNetworkRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumNetworkRoleFilter<$PrismaModel> | $Enums.NetworkRole
  }

  export type NestedEnumNetworkRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NetworkRole | EnumNetworkRoleFieldRefInput<$PrismaModel>
    in?: $Enums.NetworkRole[] | ListEnumNetworkRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.NetworkRole[] | ListEnumNetworkRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumNetworkRoleWithAggregatesFilter<$PrismaModel> | $Enums.NetworkRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNetworkRoleFilter<$PrismaModel>
    _max?: NestedEnumNetworkRoleFilter<$PrismaModel>
  }

  export type NetworkCreateWithoutOrgInput = {
    id?: string
    name: string
    createdAt?: Date | string
    currentBundle?: BundleCreateNestedOneWithoutNetworksAsCurrentInput
    practices?: PracticeCreateNestedManyWithoutNetworkInput
    bundles?: BundleCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogCreateNestedManyWithoutNetworkInput
  }

  export type NetworkUncheckedCreateWithoutOrgInput = {
    id?: string
    name: string
    createdAt?: Date | string
    currentBundleId?: string | null
    practices?: PracticeUncheckedCreateNestedManyWithoutNetworkInput
    bundles?: BundleUncheckedCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipUncheckedCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutNetworkInput
  }

  export type NetworkCreateOrConnectWithoutOrgInput = {
    where: NetworkWhereUniqueInput
    create: XOR<NetworkCreateWithoutOrgInput, NetworkUncheckedCreateWithoutOrgInput>
  }

  export type NetworkCreateManyOrgInputEnvelope = {
    data: NetworkCreateManyOrgInput | NetworkCreateManyOrgInput[]
    skipDuplicates?: boolean
  }

  export type OrgMembershipCreateWithoutOrgInput = {
    role: $Enums.OrgRole
    user: UserCreateNestedOneWithoutOrgMembershipsInput
  }

  export type OrgMembershipUncheckedCreateWithoutOrgInput = {
    userId: string
    role: $Enums.OrgRole
  }

  export type OrgMembershipCreateOrConnectWithoutOrgInput = {
    where: OrgMembershipWhereUniqueInput
    create: XOR<OrgMembershipCreateWithoutOrgInput, OrgMembershipUncheckedCreateWithoutOrgInput>
  }

  export type OrgMembershipCreateManyOrgInputEnvelope = {
    data: OrgMembershipCreateManyOrgInput | OrgMembershipCreateManyOrgInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutOrgInput = {
    id?: string
    at?: Date | string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actor: UserCreateNestedOneWithoutAuditLogsInput
    network?: NetworkCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutOrgInput = {
    id?: string
    at?: Date | string
    actorUserId: string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorNetworkId?: string | null
  }

  export type AuditLogCreateOrConnectWithoutOrgInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutOrgInput, AuditLogUncheckedCreateWithoutOrgInput>
  }

  export type AuditLogCreateManyOrgInputEnvelope = {
    data: AuditLogCreateManyOrgInput | AuditLogCreateManyOrgInput[]
    skipDuplicates?: boolean
  }

  export type NetworkUpsertWithWhereUniqueWithoutOrgInput = {
    where: NetworkWhereUniqueInput
    update: XOR<NetworkUpdateWithoutOrgInput, NetworkUncheckedUpdateWithoutOrgInput>
    create: XOR<NetworkCreateWithoutOrgInput, NetworkUncheckedCreateWithoutOrgInput>
  }

  export type NetworkUpdateWithWhereUniqueWithoutOrgInput = {
    where: NetworkWhereUniqueInput
    data: XOR<NetworkUpdateWithoutOrgInput, NetworkUncheckedUpdateWithoutOrgInput>
  }

  export type NetworkUpdateManyWithWhereWithoutOrgInput = {
    where: NetworkScalarWhereInput
    data: XOR<NetworkUpdateManyMutationInput, NetworkUncheckedUpdateManyWithoutOrgInput>
  }

  export type NetworkScalarWhereInput = {
    AND?: NetworkScalarWhereInput | NetworkScalarWhereInput[]
    OR?: NetworkScalarWhereInput[]
    NOT?: NetworkScalarWhereInput | NetworkScalarWhereInput[]
    id?: StringFilter<"Network"> | string
    name?: StringFilter<"Network"> | string
    createdAt?: DateTimeFilter<"Network"> | Date | string
    orgId?: StringFilter<"Network"> | string
    currentBundleId?: StringNullableFilter<"Network"> | string | null
  }

  export type OrgMembershipUpsertWithWhereUniqueWithoutOrgInput = {
    where: OrgMembershipWhereUniqueInput
    update: XOR<OrgMembershipUpdateWithoutOrgInput, OrgMembershipUncheckedUpdateWithoutOrgInput>
    create: XOR<OrgMembershipCreateWithoutOrgInput, OrgMembershipUncheckedCreateWithoutOrgInput>
  }

  export type OrgMembershipUpdateWithWhereUniqueWithoutOrgInput = {
    where: OrgMembershipWhereUniqueInput
    data: XOR<OrgMembershipUpdateWithoutOrgInput, OrgMembershipUncheckedUpdateWithoutOrgInput>
  }

  export type OrgMembershipUpdateManyWithWhereWithoutOrgInput = {
    where: OrgMembershipScalarWhereInput
    data: XOR<OrgMembershipUpdateManyMutationInput, OrgMembershipUncheckedUpdateManyWithoutOrgInput>
  }

  export type OrgMembershipScalarWhereInput = {
    AND?: OrgMembershipScalarWhereInput | OrgMembershipScalarWhereInput[]
    OR?: OrgMembershipScalarWhereInput[]
    NOT?: OrgMembershipScalarWhereInput | OrgMembershipScalarWhereInput[]
    userId?: StringFilter<"OrgMembership"> | string
    orgId?: StringFilter<"OrgMembership"> | string
    role?: EnumOrgRoleFilter<"OrgMembership"> | $Enums.OrgRole
  }

  export type AuditLogUpsertWithWhereUniqueWithoutOrgInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutOrgInput, AuditLogUncheckedUpdateWithoutOrgInput>
    create: XOR<AuditLogCreateWithoutOrgInput, AuditLogUncheckedCreateWithoutOrgInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutOrgInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutOrgInput, AuditLogUncheckedUpdateWithoutOrgInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutOrgInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutOrgInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    at?: DateTimeFilter<"AuditLog"> | Date | string
    actorUserId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    subjectType?: StringFilter<"AuditLog"> | string
    subjectId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    actorOrgId?: StringNullableFilter<"AuditLog"> | string | null
    actorNetworkId?: StringNullableFilter<"AuditLog"> | string | null
  }

  export type OrgCreateWithoutNetworksInput = {
    id?: string
    name: string
    createdAt?: Date | string
    orgMemberships?: OrgMembershipCreateNestedManyWithoutOrgInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrgInput
  }

  export type OrgUncheckedCreateWithoutNetworksInput = {
    id?: string
    name: string
    createdAt?: Date | string
    orgMemberships?: OrgMembershipUncheckedCreateNestedManyWithoutOrgInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrgInput
  }

  export type OrgCreateOrConnectWithoutNetworksInput = {
    where: OrgWhereUniqueInput
    create: XOR<OrgCreateWithoutNetworksInput, OrgUncheckedCreateWithoutNetworksInput>
  }

  export type BundleCreateWithoutNetworksAsCurrentInput = {
    id?: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    network: NetworkCreateNestedOneWithoutBundlesInput
    submissions?: SubmissionCreateNestedManyWithoutBundleInput
  }

  export type BundleUncheckedCreateWithoutNetworksAsCurrentInput = {
    id?: string
    networkId: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutBundleInput
  }

  export type BundleCreateOrConnectWithoutNetworksAsCurrentInput = {
    where: BundleWhereUniqueInput
    create: XOR<BundleCreateWithoutNetworksAsCurrentInput, BundleUncheckedCreateWithoutNetworksAsCurrentInput>
  }

  export type PracticeCreateWithoutNetworkInput = {
    id?: string
    name: string
    createdAt?: Date | string
    keys?: PracticeKeyCreateNestedManyWithoutPracticeInput
    careEpisodes?: CareEpisodeCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateWithoutNetworkInput = {
    id?: string
    name: string
    createdAt?: Date | string
    keys?: PracticeKeyUncheckedCreateNestedManyWithoutPracticeInput
    careEpisodes?: CareEpisodeUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeCreateOrConnectWithoutNetworkInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutNetworkInput, PracticeUncheckedCreateWithoutNetworkInput>
  }

  export type PracticeCreateManyNetworkInputEnvelope = {
    data: PracticeCreateManyNetworkInput | PracticeCreateManyNetworkInput[]
    skipDuplicates?: boolean
  }

  export type BundleCreateWithoutNetworkInput = {
    id?: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    submissions?: SubmissionCreateNestedManyWithoutBundleInput
    networksAsCurrent?: NetworkCreateNestedManyWithoutCurrentBundleInput
  }

  export type BundleUncheckedCreateWithoutNetworkInput = {
    id?: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutBundleInput
    networksAsCurrent?: NetworkUncheckedCreateNestedManyWithoutCurrentBundleInput
  }

  export type BundleCreateOrConnectWithoutNetworkInput = {
    where: BundleWhereUniqueInput
    create: XOR<BundleCreateWithoutNetworkInput, BundleUncheckedCreateWithoutNetworkInput>
  }

  export type BundleCreateManyNetworkInputEnvelope = {
    data: BundleCreateManyNetworkInput | BundleCreateManyNetworkInput[]
    skipDuplicates?: boolean
  }

  export type NetworkMembershipCreateWithoutNetworkInput = {
    role: $Enums.NetworkRole
    user: UserCreateNestedOneWithoutNetworkMembershipsInput
  }

  export type NetworkMembershipUncheckedCreateWithoutNetworkInput = {
    userId: string
    role: $Enums.NetworkRole
  }

  export type NetworkMembershipCreateOrConnectWithoutNetworkInput = {
    where: NetworkMembershipWhereUniqueInput
    create: XOR<NetworkMembershipCreateWithoutNetworkInput, NetworkMembershipUncheckedCreateWithoutNetworkInput>
  }

  export type NetworkMembershipCreateManyNetworkInputEnvelope = {
    data: NetworkMembershipCreateManyNetworkInput | NetworkMembershipCreateManyNetworkInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutNetworkInput = {
    id?: string
    at?: Date | string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actor: UserCreateNestedOneWithoutAuditLogsInput
    org?: OrgCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutNetworkInput = {
    id?: string
    at?: Date | string
    actorUserId: string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: string | null
  }

  export type AuditLogCreateOrConnectWithoutNetworkInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutNetworkInput, AuditLogUncheckedCreateWithoutNetworkInput>
  }

  export type AuditLogCreateManyNetworkInputEnvelope = {
    data: AuditLogCreateManyNetworkInput | AuditLogCreateManyNetworkInput[]
    skipDuplicates?: boolean
  }

  export type OrgUpsertWithoutNetworksInput = {
    update: XOR<OrgUpdateWithoutNetworksInput, OrgUncheckedUpdateWithoutNetworksInput>
    create: XOR<OrgCreateWithoutNetworksInput, OrgUncheckedCreateWithoutNetworksInput>
    where?: OrgWhereInput
  }

  export type OrgUpdateToOneWithWhereWithoutNetworksInput = {
    where?: OrgWhereInput
    data: XOR<OrgUpdateWithoutNetworksInput, OrgUncheckedUpdateWithoutNetworksInput>
  }

  export type OrgUpdateWithoutNetworksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgMemberships?: OrgMembershipUpdateManyWithoutOrgNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrgNestedInput
  }

  export type OrgUncheckedUpdateWithoutNetworksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgMemberships?: OrgMembershipUncheckedUpdateManyWithoutOrgNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrgNestedInput
  }

  export type BundleUpsertWithoutNetworksAsCurrentInput = {
    update: XOR<BundleUpdateWithoutNetworksAsCurrentInput, BundleUncheckedUpdateWithoutNetworksAsCurrentInput>
    create: XOR<BundleCreateWithoutNetworksAsCurrentInput, BundleUncheckedCreateWithoutNetworksAsCurrentInput>
    where?: BundleWhereInput
  }

  export type BundleUpdateToOneWithWhereWithoutNetworksAsCurrentInput = {
    where?: BundleWhereInput
    data: XOR<BundleUpdateWithoutNetworksAsCurrentInput, BundleUncheckedUpdateWithoutNetworksAsCurrentInput>
  }

  export type BundleUpdateWithoutNetworksAsCurrentInput = {
    id?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: NetworkUpdateOneRequiredWithoutBundlesNestedInput
    submissions?: SubmissionUpdateManyWithoutBundleNestedInput
  }

  export type BundleUncheckedUpdateWithoutNetworksAsCurrentInput = {
    id?: StringFieldUpdateOperationsInput | string
    networkId?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutBundleNestedInput
  }

  export type PracticeUpsertWithWhereUniqueWithoutNetworkInput = {
    where: PracticeWhereUniqueInput
    update: XOR<PracticeUpdateWithoutNetworkInput, PracticeUncheckedUpdateWithoutNetworkInput>
    create: XOR<PracticeCreateWithoutNetworkInput, PracticeUncheckedCreateWithoutNetworkInput>
  }

  export type PracticeUpdateWithWhereUniqueWithoutNetworkInput = {
    where: PracticeWhereUniqueInput
    data: XOR<PracticeUpdateWithoutNetworkInput, PracticeUncheckedUpdateWithoutNetworkInput>
  }

  export type PracticeUpdateManyWithWhereWithoutNetworkInput = {
    where: PracticeScalarWhereInput
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyWithoutNetworkInput>
  }

  export type PracticeScalarWhereInput = {
    AND?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
    OR?: PracticeScalarWhereInput[]
    NOT?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
    id?: StringFilter<"Practice"> | string
    name?: StringFilter<"Practice"> | string
    createdAt?: DateTimeFilter<"Practice"> | Date | string
    networkId?: StringFilter<"Practice"> | string
  }

  export type BundleUpsertWithWhereUniqueWithoutNetworkInput = {
    where: BundleWhereUniqueInput
    update: XOR<BundleUpdateWithoutNetworkInput, BundleUncheckedUpdateWithoutNetworkInput>
    create: XOR<BundleCreateWithoutNetworkInput, BundleUncheckedCreateWithoutNetworkInput>
  }

  export type BundleUpdateWithWhereUniqueWithoutNetworkInput = {
    where: BundleWhereUniqueInput
    data: XOR<BundleUpdateWithoutNetworkInput, BundleUncheckedUpdateWithoutNetworkInput>
  }

  export type BundleUpdateManyWithWhereWithoutNetworkInput = {
    where: BundleScalarWhereInput
    data: XOR<BundleUpdateManyMutationInput, BundleUncheckedUpdateManyWithoutNetworkInput>
  }

  export type BundleScalarWhereInput = {
    AND?: BundleScalarWhereInput | BundleScalarWhereInput[]
    OR?: BundleScalarWhereInput[]
    NOT?: BundleScalarWhereInput | BundleScalarWhereInput[]
    id?: StringFilter<"Bundle"> | string
    networkId?: StringFilter<"Bundle"> | string
    meta?: JsonNullableFilter<"Bundle">
    data?: JsonNullableFilter<"Bundle">
    createdAt?: DateTimeFilter<"Bundle"> | Date | string
  }

  export type NetworkMembershipUpsertWithWhereUniqueWithoutNetworkInput = {
    where: NetworkMembershipWhereUniqueInput
    update: XOR<NetworkMembershipUpdateWithoutNetworkInput, NetworkMembershipUncheckedUpdateWithoutNetworkInput>
    create: XOR<NetworkMembershipCreateWithoutNetworkInput, NetworkMembershipUncheckedCreateWithoutNetworkInput>
  }

  export type NetworkMembershipUpdateWithWhereUniqueWithoutNetworkInput = {
    where: NetworkMembershipWhereUniqueInput
    data: XOR<NetworkMembershipUpdateWithoutNetworkInput, NetworkMembershipUncheckedUpdateWithoutNetworkInput>
  }

  export type NetworkMembershipUpdateManyWithWhereWithoutNetworkInput = {
    where: NetworkMembershipScalarWhereInput
    data: XOR<NetworkMembershipUpdateManyMutationInput, NetworkMembershipUncheckedUpdateManyWithoutNetworkInput>
  }

  export type NetworkMembershipScalarWhereInput = {
    AND?: NetworkMembershipScalarWhereInput | NetworkMembershipScalarWhereInput[]
    OR?: NetworkMembershipScalarWhereInput[]
    NOT?: NetworkMembershipScalarWhereInput | NetworkMembershipScalarWhereInput[]
    userId?: StringFilter<"NetworkMembership"> | string
    networkId?: StringFilter<"NetworkMembership"> | string
    role?: EnumNetworkRoleFilter<"NetworkMembership"> | $Enums.NetworkRole
  }

  export type AuditLogUpsertWithWhereUniqueWithoutNetworkInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutNetworkInput, AuditLogUncheckedUpdateWithoutNetworkInput>
    create: XOR<AuditLogCreateWithoutNetworkInput, AuditLogUncheckedCreateWithoutNetworkInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutNetworkInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutNetworkInput, AuditLogUncheckedUpdateWithoutNetworkInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutNetworkInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutNetworkInput>
  }

  export type NetworkCreateWithoutPracticesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    org: OrgCreateNestedOneWithoutNetworksInput
    currentBundle?: BundleCreateNestedOneWithoutNetworksAsCurrentInput
    bundles?: BundleCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogCreateNestedManyWithoutNetworkInput
  }

  export type NetworkUncheckedCreateWithoutPracticesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    orgId: string
    currentBundleId?: string | null
    bundles?: BundleUncheckedCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipUncheckedCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutNetworkInput
  }

  export type NetworkCreateOrConnectWithoutPracticesInput = {
    where: NetworkWhereUniqueInput
    create: XOR<NetworkCreateWithoutPracticesInput, NetworkUncheckedCreateWithoutPracticesInput>
  }

  export type PracticeKeyCreateWithoutPracticeInput = {
    id?: string
    publicKeyPem: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type PracticeKeyUncheckedCreateWithoutPracticeInput = {
    id?: string
    publicKeyPem: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type PracticeKeyCreateOrConnectWithoutPracticeInput = {
    where: PracticeKeyWhereUniqueInput
    create: XOR<PracticeKeyCreateWithoutPracticeInput, PracticeKeyUncheckedCreateWithoutPracticeInput>
  }

  export type PracticeKeyCreateManyPracticeInputEnvelope = {
    data: PracticeKeyCreateManyPracticeInput | PracticeKeyCreateManyPracticeInput[]
    skipDuplicates?: boolean
  }

  export type CareEpisodeCreateWithoutPracticeInput = {
    id?: string
    startAt?: Date | string
    endAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutCareEpisodesInput
  }

  export type CareEpisodeUncheckedCreateWithoutPracticeInput = {
    id?: string
    patientId: string
    startAt?: Date | string
    endAt?: Date | string | null
  }

  export type CareEpisodeCreateOrConnectWithoutPracticeInput = {
    where: CareEpisodeWhereUniqueInput
    create: XOR<CareEpisodeCreateWithoutPracticeInput, CareEpisodeUncheckedCreateWithoutPracticeInput>
  }

  export type CareEpisodeCreateManyPracticeInputEnvelope = {
    data: CareEpisodeCreateManyPracticeInput | CareEpisodeCreateManyPracticeInput[]
    skipDuplicates?: boolean
  }

  export type NetworkUpsertWithoutPracticesInput = {
    update: XOR<NetworkUpdateWithoutPracticesInput, NetworkUncheckedUpdateWithoutPracticesInput>
    create: XOR<NetworkCreateWithoutPracticesInput, NetworkUncheckedCreateWithoutPracticesInput>
    where?: NetworkWhereInput
  }

  export type NetworkUpdateToOneWithWhereWithoutPracticesInput = {
    where?: NetworkWhereInput
    data: XOR<NetworkUpdateWithoutPracticesInput, NetworkUncheckedUpdateWithoutPracticesInput>
  }

  export type NetworkUpdateWithoutPracticesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    org?: OrgUpdateOneRequiredWithoutNetworksNestedInput
    currentBundle?: BundleUpdateOneWithoutNetworksAsCurrentNestedInput
    bundles?: BundleUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateWithoutPracticesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgId?: StringFieldUpdateOperationsInput | string
    currentBundleId?: NullableStringFieldUpdateOperationsInput | string | null
    bundles?: BundleUncheckedUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUncheckedUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutNetworkNestedInput
  }

  export type PracticeKeyUpsertWithWhereUniqueWithoutPracticeInput = {
    where: PracticeKeyWhereUniqueInput
    update: XOR<PracticeKeyUpdateWithoutPracticeInput, PracticeKeyUncheckedUpdateWithoutPracticeInput>
    create: XOR<PracticeKeyCreateWithoutPracticeInput, PracticeKeyUncheckedCreateWithoutPracticeInput>
  }

  export type PracticeKeyUpdateWithWhereUniqueWithoutPracticeInput = {
    where: PracticeKeyWhereUniqueInput
    data: XOR<PracticeKeyUpdateWithoutPracticeInput, PracticeKeyUncheckedUpdateWithoutPracticeInput>
  }

  export type PracticeKeyUpdateManyWithWhereWithoutPracticeInput = {
    where: PracticeKeyScalarWhereInput
    data: XOR<PracticeKeyUpdateManyMutationInput, PracticeKeyUncheckedUpdateManyWithoutPracticeInput>
  }

  export type PracticeKeyScalarWhereInput = {
    AND?: PracticeKeyScalarWhereInput | PracticeKeyScalarWhereInput[]
    OR?: PracticeKeyScalarWhereInput[]
    NOT?: PracticeKeyScalarWhereInput | PracticeKeyScalarWhereInput[]
    id?: StringFilter<"PracticeKey"> | string
    practiceId?: StringFilter<"PracticeKey"> | string
    publicKeyPem?: StringFilter<"PracticeKey"> | string
    isActive?: BoolFilter<"PracticeKey"> | boolean
    createdAt?: DateTimeFilter<"PracticeKey"> | Date | string
  }

  export type CareEpisodeUpsertWithWhereUniqueWithoutPracticeInput = {
    where: CareEpisodeWhereUniqueInput
    update: XOR<CareEpisodeUpdateWithoutPracticeInput, CareEpisodeUncheckedUpdateWithoutPracticeInput>
    create: XOR<CareEpisodeCreateWithoutPracticeInput, CareEpisodeUncheckedCreateWithoutPracticeInput>
  }

  export type CareEpisodeUpdateWithWhereUniqueWithoutPracticeInput = {
    where: CareEpisodeWhereUniqueInput
    data: XOR<CareEpisodeUpdateWithoutPracticeInput, CareEpisodeUncheckedUpdateWithoutPracticeInput>
  }

  export type CareEpisodeUpdateManyWithWhereWithoutPracticeInput = {
    where: CareEpisodeScalarWhereInput
    data: XOR<CareEpisodeUpdateManyMutationInput, CareEpisodeUncheckedUpdateManyWithoutPracticeInput>
  }

  export type CareEpisodeScalarWhereInput = {
    AND?: CareEpisodeScalarWhereInput | CareEpisodeScalarWhereInput[]
    OR?: CareEpisodeScalarWhereInput[]
    NOT?: CareEpisodeScalarWhereInput | CareEpisodeScalarWhereInput[]
    id?: StringFilter<"CareEpisode"> | string
    patientId?: StringFilter<"CareEpisode"> | string
    practiceId?: StringFilter<"CareEpisode"> | string
    startAt?: DateTimeFilter<"CareEpisode"> | Date | string
    endAt?: DateTimeNullableFilter<"CareEpisode"> | Date | string | null
  }

  export type PracticeCreateWithoutKeysInput = {
    id?: string
    name: string
    createdAt?: Date | string
    network: NetworkCreateNestedOneWithoutPracticesInput
    careEpisodes?: CareEpisodeCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateWithoutKeysInput = {
    id?: string
    name: string
    createdAt?: Date | string
    networkId: string
    careEpisodes?: CareEpisodeUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeCreateOrConnectWithoutKeysInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutKeysInput, PracticeUncheckedCreateWithoutKeysInput>
  }

  export type PracticeUpsertWithoutKeysInput = {
    update: XOR<PracticeUpdateWithoutKeysInput, PracticeUncheckedUpdateWithoutKeysInput>
    create: XOR<PracticeCreateWithoutKeysInput, PracticeUncheckedCreateWithoutKeysInput>
    where?: PracticeWhereInput
  }

  export type PracticeUpdateToOneWithWhereWithoutKeysInput = {
    where?: PracticeWhereInput
    data: XOR<PracticeUpdateWithoutKeysInput, PracticeUncheckedUpdateWithoutKeysInput>
  }

  export type PracticeUpdateWithoutKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: NetworkUpdateOneRequiredWithoutPracticesNestedInput
    careEpisodes?: CareEpisodeUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateWithoutKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networkId?: StringFieldUpdateOperationsInput | string
    careEpisodes?: CareEpisodeUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type SubmissionCreateWithoutPatientInput = {
    id?: string
    bundleHash: string
    ciphertext: string
    iv: string
    tag: string
    wrappedDEK: string
    createdAt?: Date | string
    bundle: BundleCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutPatientInput = {
    id?: string
    bundleId: string
    bundleHash: string
    ciphertext: string
    iv: string
    tag: string
    wrappedDEK: string
    createdAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutPatientInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutPatientInput, SubmissionUncheckedCreateWithoutPatientInput>
  }

  export type SubmissionCreateManyPatientInputEnvelope = {
    data: SubmissionCreateManyPatientInput | SubmissionCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type CareEpisodeCreateWithoutPatientInput = {
    id?: string
    startAt?: Date | string
    endAt?: Date | string | null
    practice: PracticeCreateNestedOneWithoutCareEpisodesInput
  }

  export type CareEpisodeUncheckedCreateWithoutPatientInput = {
    id?: string
    practiceId: string
    startAt?: Date | string
    endAt?: Date | string | null
  }

  export type CareEpisodeCreateOrConnectWithoutPatientInput = {
    where: CareEpisodeWhereUniqueInput
    create: XOR<CareEpisodeCreateWithoutPatientInput, CareEpisodeUncheckedCreateWithoutPatientInput>
  }

  export type CareEpisodeCreateManyPatientInputEnvelope = {
    data: CareEpisodeCreateManyPatientInput | CareEpisodeCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionUpsertWithWhereUniqueWithoutPatientInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutPatientInput, SubmissionUncheckedUpdateWithoutPatientInput>
    create: XOR<SubmissionCreateWithoutPatientInput, SubmissionUncheckedCreateWithoutPatientInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutPatientInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutPatientInput, SubmissionUncheckedUpdateWithoutPatientInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutPatientInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutPatientInput>
  }

  export type SubmissionScalarWhereInput = {
    AND?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    OR?: SubmissionScalarWhereInput[]
    NOT?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    id?: StringFilter<"Submission"> | string
    patientId?: StringFilter<"Submission"> | string
    bundleId?: StringFilter<"Submission"> | string
    bundleHash?: StringFilter<"Submission"> | string
    ciphertext?: StringFilter<"Submission"> | string
    iv?: StringFilter<"Submission"> | string
    tag?: StringFilter<"Submission"> | string
    wrappedDEK?: StringFilter<"Submission"> | string
    createdAt?: DateTimeFilter<"Submission"> | Date | string
  }

  export type CareEpisodeUpsertWithWhereUniqueWithoutPatientInput = {
    where: CareEpisodeWhereUniqueInput
    update: XOR<CareEpisodeUpdateWithoutPatientInput, CareEpisodeUncheckedUpdateWithoutPatientInput>
    create: XOR<CareEpisodeCreateWithoutPatientInput, CareEpisodeUncheckedCreateWithoutPatientInput>
  }

  export type CareEpisodeUpdateWithWhereUniqueWithoutPatientInput = {
    where: CareEpisodeWhereUniqueInput
    data: XOR<CareEpisodeUpdateWithoutPatientInput, CareEpisodeUncheckedUpdateWithoutPatientInput>
  }

  export type CareEpisodeUpdateManyWithWhereWithoutPatientInput = {
    where: CareEpisodeScalarWhereInput
    data: XOR<CareEpisodeUpdateManyMutationInput, CareEpisodeUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientCreateWithoutCareEpisodesInput = {
    id: string
    createdAt?: Date | string
    submissions?: SubmissionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutCareEpisodesInput = {
    id: string
    createdAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutCareEpisodesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutCareEpisodesInput, PatientUncheckedCreateWithoutCareEpisodesInput>
  }

  export type PracticeCreateWithoutCareEpisodesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    network: NetworkCreateNestedOneWithoutPracticesInput
    keys?: PracticeKeyCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateWithoutCareEpisodesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    networkId: string
    keys?: PracticeKeyUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeCreateOrConnectWithoutCareEpisodesInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutCareEpisodesInput, PracticeUncheckedCreateWithoutCareEpisodesInput>
  }

  export type PatientUpsertWithoutCareEpisodesInput = {
    update: XOR<PatientUpdateWithoutCareEpisodesInput, PatientUncheckedUpdateWithoutCareEpisodesInput>
    create: XOR<PatientCreateWithoutCareEpisodesInput, PatientUncheckedCreateWithoutCareEpisodesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutCareEpisodesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutCareEpisodesInput, PatientUncheckedUpdateWithoutCareEpisodesInput>
  }

  export type PatientUpdateWithoutCareEpisodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutCareEpisodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PracticeUpsertWithoutCareEpisodesInput = {
    update: XOR<PracticeUpdateWithoutCareEpisodesInput, PracticeUncheckedUpdateWithoutCareEpisodesInput>
    create: XOR<PracticeCreateWithoutCareEpisodesInput, PracticeUncheckedCreateWithoutCareEpisodesInput>
    where?: PracticeWhereInput
  }

  export type PracticeUpdateToOneWithWhereWithoutCareEpisodesInput = {
    where?: PracticeWhereInput
    data: XOR<PracticeUpdateWithoutCareEpisodesInput, PracticeUncheckedUpdateWithoutCareEpisodesInput>
  }

  export type PracticeUpdateWithoutCareEpisodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: NetworkUpdateOneRequiredWithoutPracticesNestedInput
    keys?: PracticeKeyUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateWithoutCareEpisodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networkId?: StringFieldUpdateOperationsInput | string
    keys?: PracticeKeyUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type NetworkCreateWithoutBundlesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    org: OrgCreateNestedOneWithoutNetworksInput
    currentBundle?: BundleCreateNestedOneWithoutNetworksAsCurrentInput
    practices?: PracticeCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogCreateNestedManyWithoutNetworkInput
  }

  export type NetworkUncheckedCreateWithoutBundlesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    orgId: string
    currentBundleId?: string | null
    practices?: PracticeUncheckedCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipUncheckedCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutNetworkInput
  }

  export type NetworkCreateOrConnectWithoutBundlesInput = {
    where: NetworkWhereUniqueInput
    create: XOR<NetworkCreateWithoutBundlesInput, NetworkUncheckedCreateWithoutBundlesInput>
  }

  export type SubmissionCreateWithoutBundleInput = {
    id?: string
    bundleHash: string
    ciphertext: string
    iv: string
    tag: string
    wrappedDEK: string
    createdAt?: Date | string
    patient: PatientCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutBundleInput = {
    id?: string
    patientId: string
    bundleHash: string
    ciphertext: string
    iv: string
    tag: string
    wrappedDEK: string
    createdAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutBundleInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutBundleInput, SubmissionUncheckedCreateWithoutBundleInput>
  }

  export type SubmissionCreateManyBundleInputEnvelope = {
    data: SubmissionCreateManyBundleInput | SubmissionCreateManyBundleInput[]
    skipDuplicates?: boolean
  }

  export type NetworkCreateWithoutCurrentBundleInput = {
    id?: string
    name: string
    createdAt?: Date | string
    org: OrgCreateNestedOneWithoutNetworksInput
    practices?: PracticeCreateNestedManyWithoutNetworkInput
    bundles?: BundleCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogCreateNestedManyWithoutNetworkInput
  }

  export type NetworkUncheckedCreateWithoutCurrentBundleInput = {
    id?: string
    name: string
    createdAt?: Date | string
    orgId: string
    practices?: PracticeUncheckedCreateNestedManyWithoutNetworkInput
    bundles?: BundleUncheckedCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipUncheckedCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutNetworkInput
  }

  export type NetworkCreateOrConnectWithoutCurrentBundleInput = {
    where: NetworkWhereUniqueInput
    create: XOR<NetworkCreateWithoutCurrentBundleInput, NetworkUncheckedCreateWithoutCurrentBundleInput>
  }

  export type NetworkCreateManyCurrentBundleInputEnvelope = {
    data: NetworkCreateManyCurrentBundleInput | NetworkCreateManyCurrentBundleInput[]
    skipDuplicates?: boolean
  }

  export type NetworkUpsertWithoutBundlesInput = {
    update: XOR<NetworkUpdateWithoutBundlesInput, NetworkUncheckedUpdateWithoutBundlesInput>
    create: XOR<NetworkCreateWithoutBundlesInput, NetworkUncheckedCreateWithoutBundlesInput>
    where?: NetworkWhereInput
  }

  export type NetworkUpdateToOneWithWhereWithoutBundlesInput = {
    where?: NetworkWhereInput
    data: XOR<NetworkUpdateWithoutBundlesInput, NetworkUncheckedUpdateWithoutBundlesInput>
  }

  export type NetworkUpdateWithoutBundlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    org?: OrgUpdateOneRequiredWithoutNetworksNestedInput
    currentBundle?: BundleUpdateOneWithoutNetworksAsCurrentNestedInput
    practices?: PracticeUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateWithoutBundlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgId?: StringFieldUpdateOperationsInput | string
    currentBundleId?: NullableStringFieldUpdateOperationsInput | string | null
    practices?: PracticeUncheckedUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUncheckedUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutNetworkNestedInput
  }

  export type SubmissionUpsertWithWhereUniqueWithoutBundleInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutBundleInput, SubmissionUncheckedUpdateWithoutBundleInput>
    create: XOR<SubmissionCreateWithoutBundleInput, SubmissionUncheckedCreateWithoutBundleInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutBundleInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutBundleInput, SubmissionUncheckedUpdateWithoutBundleInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutBundleInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutBundleInput>
  }

  export type NetworkUpsertWithWhereUniqueWithoutCurrentBundleInput = {
    where: NetworkWhereUniqueInput
    update: XOR<NetworkUpdateWithoutCurrentBundleInput, NetworkUncheckedUpdateWithoutCurrentBundleInput>
    create: XOR<NetworkCreateWithoutCurrentBundleInput, NetworkUncheckedCreateWithoutCurrentBundleInput>
  }

  export type NetworkUpdateWithWhereUniqueWithoutCurrentBundleInput = {
    where: NetworkWhereUniqueInput
    data: XOR<NetworkUpdateWithoutCurrentBundleInput, NetworkUncheckedUpdateWithoutCurrentBundleInput>
  }

  export type NetworkUpdateManyWithWhereWithoutCurrentBundleInput = {
    where: NetworkScalarWhereInput
    data: XOR<NetworkUpdateManyMutationInput, NetworkUncheckedUpdateManyWithoutCurrentBundleInput>
  }

  export type PatientCreateWithoutSubmissionsInput = {
    id: string
    createdAt?: Date | string
    careEpisodes?: CareEpisodeCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutSubmissionsInput = {
    id: string
    createdAt?: Date | string
    careEpisodes?: CareEpisodeUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutSubmissionsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutSubmissionsInput, PatientUncheckedCreateWithoutSubmissionsInput>
  }

  export type BundleCreateWithoutSubmissionsInput = {
    id?: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    network: NetworkCreateNestedOneWithoutBundlesInput
    networksAsCurrent?: NetworkCreateNestedManyWithoutCurrentBundleInput
  }

  export type BundleUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    networkId: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    networksAsCurrent?: NetworkUncheckedCreateNestedManyWithoutCurrentBundleInput
  }

  export type BundleCreateOrConnectWithoutSubmissionsInput = {
    where: BundleWhereUniqueInput
    create: XOR<BundleCreateWithoutSubmissionsInput, BundleUncheckedCreateWithoutSubmissionsInput>
  }

  export type PatientUpsertWithoutSubmissionsInput = {
    update: XOR<PatientUpdateWithoutSubmissionsInput, PatientUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<PatientCreateWithoutSubmissionsInput, PatientUncheckedCreateWithoutSubmissionsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutSubmissionsInput, PatientUncheckedUpdateWithoutSubmissionsInput>
  }

  export type PatientUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    careEpisodes?: CareEpisodeUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    careEpisodes?: CareEpisodeUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type BundleUpsertWithoutSubmissionsInput = {
    update: XOR<BundleUpdateWithoutSubmissionsInput, BundleUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<BundleCreateWithoutSubmissionsInput, BundleUncheckedCreateWithoutSubmissionsInput>
    where?: BundleWhereInput
  }

  export type BundleUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: BundleWhereInput
    data: XOR<BundleUpdateWithoutSubmissionsInput, BundleUncheckedUpdateWithoutSubmissionsInput>
  }

  export type BundleUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: NetworkUpdateOneRequiredWithoutBundlesNestedInput
    networksAsCurrent?: NetworkUpdateManyWithoutCurrentBundleNestedInput
  }

  export type BundleUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    networkId?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networksAsCurrent?: NetworkUncheckedUpdateManyWithoutCurrentBundleNestedInput
  }

  export type OrgMembershipCreateWithoutUserInput = {
    role: $Enums.OrgRole
    org: OrgCreateNestedOneWithoutOrgMembershipsInput
  }

  export type OrgMembershipUncheckedCreateWithoutUserInput = {
    orgId: string
    role: $Enums.OrgRole
  }

  export type OrgMembershipCreateOrConnectWithoutUserInput = {
    where: OrgMembershipWhereUniqueInput
    create: XOR<OrgMembershipCreateWithoutUserInput, OrgMembershipUncheckedCreateWithoutUserInput>
  }

  export type OrgMembershipCreateManyUserInputEnvelope = {
    data: OrgMembershipCreateManyUserInput | OrgMembershipCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NetworkMembershipCreateWithoutUserInput = {
    role: $Enums.NetworkRole
    network: NetworkCreateNestedOneWithoutNetworkMembershipsInput
  }

  export type NetworkMembershipUncheckedCreateWithoutUserInput = {
    networkId: string
    role: $Enums.NetworkRole
  }

  export type NetworkMembershipCreateOrConnectWithoutUserInput = {
    where: NetworkMembershipWhereUniqueInput
    create: XOR<NetworkMembershipCreateWithoutUserInput, NetworkMembershipUncheckedCreateWithoutUserInput>
  }

  export type NetworkMembershipCreateManyUserInputEnvelope = {
    data: NetworkMembershipCreateManyUserInput | NetworkMembershipCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutActorInput = {
    id?: string
    at?: Date | string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    org?: OrgCreateNestedOneWithoutAuditLogsInput
    network?: NetworkCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutActorInput = {
    id?: string
    at?: Date | string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: string | null
    actorNetworkId?: string | null
  }

  export type AuditLogCreateOrConnectWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput>
  }

  export type AuditLogCreateManyActorInputEnvelope = {
    data: AuditLogCreateManyActorInput | AuditLogCreateManyActorInput[]
    skipDuplicates?: boolean
  }

  export type OrgMembershipUpsertWithWhereUniqueWithoutUserInput = {
    where: OrgMembershipWhereUniqueInput
    update: XOR<OrgMembershipUpdateWithoutUserInput, OrgMembershipUncheckedUpdateWithoutUserInput>
    create: XOR<OrgMembershipCreateWithoutUserInput, OrgMembershipUncheckedCreateWithoutUserInput>
  }

  export type OrgMembershipUpdateWithWhereUniqueWithoutUserInput = {
    where: OrgMembershipWhereUniqueInput
    data: XOR<OrgMembershipUpdateWithoutUserInput, OrgMembershipUncheckedUpdateWithoutUserInput>
  }

  export type OrgMembershipUpdateManyWithWhereWithoutUserInput = {
    where: OrgMembershipScalarWhereInput
    data: XOR<OrgMembershipUpdateManyMutationInput, OrgMembershipUncheckedUpdateManyWithoutUserInput>
  }

  export type NetworkMembershipUpsertWithWhereUniqueWithoutUserInput = {
    where: NetworkMembershipWhereUniqueInput
    update: XOR<NetworkMembershipUpdateWithoutUserInput, NetworkMembershipUncheckedUpdateWithoutUserInput>
    create: XOR<NetworkMembershipCreateWithoutUserInput, NetworkMembershipUncheckedCreateWithoutUserInput>
  }

  export type NetworkMembershipUpdateWithWhereUniqueWithoutUserInput = {
    where: NetworkMembershipWhereUniqueInput
    data: XOR<NetworkMembershipUpdateWithoutUserInput, NetworkMembershipUncheckedUpdateWithoutUserInput>
  }

  export type NetworkMembershipUpdateManyWithWhereWithoutUserInput = {
    where: NetworkMembershipScalarWhereInput
    data: XOR<NetworkMembershipUpdateManyMutationInput, NetworkMembershipUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogUpsertWithWhereUniqueWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutActorInput, AuditLogUncheckedUpdateWithoutActorInput>
    create: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutActorInput, AuditLogUncheckedUpdateWithoutActorInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutActorInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutActorInput>
  }

  export type UserCreateWithoutOrgMembershipsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    networkMemberships?: NetworkMembershipCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
  }

  export type UserUncheckedCreateWithoutOrgMembershipsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    networkMemberships?: NetworkMembershipUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
  }

  export type UserCreateOrConnectWithoutOrgMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrgMembershipsInput, UserUncheckedCreateWithoutOrgMembershipsInput>
  }

  export type OrgCreateWithoutOrgMembershipsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    networks?: NetworkCreateNestedManyWithoutOrgInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrgInput
  }

  export type OrgUncheckedCreateWithoutOrgMembershipsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    networks?: NetworkUncheckedCreateNestedManyWithoutOrgInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrgInput
  }

  export type OrgCreateOrConnectWithoutOrgMembershipsInput = {
    where: OrgWhereUniqueInput
    create: XOR<OrgCreateWithoutOrgMembershipsInput, OrgUncheckedCreateWithoutOrgMembershipsInput>
  }

  export type UserUpsertWithoutOrgMembershipsInput = {
    update: XOR<UserUpdateWithoutOrgMembershipsInput, UserUncheckedUpdateWithoutOrgMembershipsInput>
    create: XOR<UserCreateWithoutOrgMembershipsInput, UserUncheckedCreateWithoutOrgMembershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrgMembershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrgMembershipsInput, UserUncheckedUpdateWithoutOrgMembershipsInput>
  }

  export type UserUpdateWithoutOrgMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networkMemberships?: NetworkMembershipUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
  }

  export type UserUncheckedUpdateWithoutOrgMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networkMemberships?: NetworkMembershipUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
  }

  export type OrgUpsertWithoutOrgMembershipsInput = {
    update: XOR<OrgUpdateWithoutOrgMembershipsInput, OrgUncheckedUpdateWithoutOrgMembershipsInput>
    create: XOR<OrgCreateWithoutOrgMembershipsInput, OrgUncheckedCreateWithoutOrgMembershipsInput>
    where?: OrgWhereInput
  }

  export type OrgUpdateToOneWithWhereWithoutOrgMembershipsInput = {
    where?: OrgWhereInput
    data: XOR<OrgUpdateWithoutOrgMembershipsInput, OrgUncheckedUpdateWithoutOrgMembershipsInput>
  }

  export type OrgUpdateWithoutOrgMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networks?: NetworkUpdateManyWithoutOrgNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrgNestedInput
  }

  export type OrgUncheckedUpdateWithoutOrgMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networks?: NetworkUncheckedUpdateManyWithoutOrgNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrgNestedInput
  }

  export type UserCreateWithoutNetworkMembershipsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    orgMemberships?: OrgMembershipCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
  }

  export type UserUncheckedCreateWithoutNetworkMembershipsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    orgMemberships?: OrgMembershipUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
  }

  export type UserCreateOrConnectWithoutNetworkMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNetworkMembershipsInput, UserUncheckedCreateWithoutNetworkMembershipsInput>
  }

  export type NetworkCreateWithoutNetworkMembershipsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    org: OrgCreateNestedOneWithoutNetworksInput
    currentBundle?: BundleCreateNestedOneWithoutNetworksAsCurrentInput
    practices?: PracticeCreateNestedManyWithoutNetworkInput
    bundles?: BundleCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogCreateNestedManyWithoutNetworkInput
  }

  export type NetworkUncheckedCreateWithoutNetworkMembershipsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    orgId: string
    currentBundleId?: string | null
    practices?: PracticeUncheckedCreateNestedManyWithoutNetworkInput
    bundles?: BundleUncheckedCreateNestedManyWithoutNetworkInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutNetworkInput
  }

  export type NetworkCreateOrConnectWithoutNetworkMembershipsInput = {
    where: NetworkWhereUniqueInput
    create: XOR<NetworkCreateWithoutNetworkMembershipsInput, NetworkUncheckedCreateWithoutNetworkMembershipsInput>
  }

  export type UserUpsertWithoutNetworkMembershipsInput = {
    update: XOR<UserUpdateWithoutNetworkMembershipsInput, UserUncheckedUpdateWithoutNetworkMembershipsInput>
    create: XOR<UserCreateWithoutNetworkMembershipsInput, UserUncheckedCreateWithoutNetworkMembershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNetworkMembershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNetworkMembershipsInput, UserUncheckedUpdateWithoutNetworkMembershipsInput>
  }

  export type UserUpdateWithoutNetworkMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgMemberships?: OrgMembershipUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
  }

  export type UserUncheckedUpdateWithoutNetworkMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgMemberships?: OrgMembershipUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
  }

  export type NetworkUpsertWithoutNetworkMembershipsInput = {
    update: XOR<NetworkUpdateWithoutNetworkMembershipsInput, NetworkUncheckedUpdateWithoutNetworkMembershipsInput>
    create: XOR<NetworkCreateWithoutNetworkMembershipsInput, NetworkUncheckedCreateWithoutNetworkMembershipsInput>
    where?: NetworkWhereInput
  }

  export type NetworkUpdateToOneWithWhereWithoutNetworkMembershipsInput = {
    where?: NetworkWhereInput
    data: XOR<NetworkUpdateWithoutNetworkMembershipsInput, NetworkUncheckedUpdateWithoutNetworkMembershipsInput>
  }

  export type NetworkUpdateWithoutNetworkMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    org?: OrgUpdateOneRequiredWithoutNetworksNestedInput
    currentBundle?: BundleUpdateOneWithoutNetworksAsCurrentNestedInput
    practices?: PracticeUpdateManyWithoutNetworkNestedInput
    bundles?: BundleUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateWithoutNetworkMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgId?: StringFieldUpdateOperationsInput | string
    currentBundleId?: NullableStringFieldUpdateOperationsInput | string | null
    practices?: PracticeUncheckedUpdateManyWithoutNetworkNestedInput
    bundles?: BundleUncheckedUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutNetworkNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    orgMemberships?: OrgMembershipCreateNestedManyWithoutUserInput
    networkMemberships?: NetworkMembershipCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    orgMemberships?: OrgMembershipUncheckedCreateNestedManyWithoutUserInput
    networkMemberships?: NetworkMembershipUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type OrgCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    networks?: NetworkCreateNestedManyWithoutOrgInput
    orgMemberships?: OrgMembershipCreateNestedManyWithoutOrgInput
  }

  export type OrgUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    networks?: NetworkUncheckedCreateNestedManyWithoutOrgInput
    orgMemberships?: OrgMembershipUncheckedCreateNestedManyWithoutOrgInput
  }

  export type OrgCreateOrConnectWithoutAuditLogsInput = {
    where: OrgWhereUniqueInput
    create: XOR<OrgCreateWithoutAuditLogsInput, OrgUncheckedCreateWithoutAuditLogsInput>
  }

  export type NetworkCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    org: OrgCreateNestedOneWithoutNetworksInput
    currentBundle?: BundleCreateNestedOneWithoutNetworksAsCurrentInput
    practices?: PracticeCreateNestedManyWithoutNetworkInput
    bundles?: BundleCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipCreateNestedManyWithoutNetworkInput
  }

  export type NetworkUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    orgId: string
    currentBundleId?: string | null
    practices?: PracticeUncheckedCreateNestedManyWithoutNetworkInput
    bundles?: BundleUncheckedCreateNestedManyWithoutNetworkInput
    networkMemberships?: NetworkMembershipUncheckedCreateNestedManyWithoutNetworkInput
  }

  export type NetworkCreateOrConnectWithoutAuditLogsInput = {
    where: NetworkWhereUniqueInput
    create: XOR<NetworkCreateWithoutAuditLogsInput, NetworkUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgMemberships?: OrgMembershipUpdateManyWithoutUserNestedInput
    networkMemberships?: NetworkMembershipUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgMemberships?: OrgMembershipUncheckedUpdateManyWithoutUserNestedInput
    networkMemberships?: NetworkMembershipUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrgUpsertWithoutAuditLogsInput = {
    update: XOR<OrgUpdateWithoutAuditLogsInput, OrgUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<OrgCreateWithoutAuditLogsInput, OrgUncheckedCreateWithoutAuditLogsInput>
    where?: OrgWhereInput
  }

  export type OrgUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: OrgWhereInput
    data: XOR<OrgUpdateWithoutAuditLogsInput, OrgUncheckedUpdateWithoutAuditLogsInput>
  }

  export type OrgUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networks?: NetworkUpdateManyWithoutOrgNestedInput
    orgMemberships?: OrgMembershipUpdateManyWithoutOrgNestedInput
  }

  export type OrgUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    networks?: NetworkUncheckedUpdateManyWithoutOrgNestedInput
    orgMemberships?: OrgMembershipUncheckedUpdateManyWithoutOrgNestedInput
  }

  export type NetworkUpsertWithoutAuditLogsInput = {
    update: XOR<NetworkUpdateWithoutAuditLogsInput, NetworkUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<NetworkCreateWithoutAuditLogsInput, NetworkUncheckedCreateWithoutAuditLogsInput>
    where?: NetworkWhereInput
  }

  export type NetworkUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: NetworkWhereInput
    data: XOR<NetworkUpdateWithoutAuditLogsInput, NetworkUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NetworkUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    org?: OrgUpdateOneRequiredWithoutNetworksNestedInput
    currentBundle?: BundleUpdateOneWithoutNetworksAsCurrentNestedInput
    practices?: PracticeUpdateManyWithoutNetworkNestedInput
    bundles?: BundleUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgId?: StringFieldUpdateOperationsInput | string
    currentBundleId?: NullableStringFieldUpdateOperationsInput | string | null
    practices?: PracticeUncheckedUpdateManyWithoutNetworkNestedInput
    bundles?: BundleUncheckedUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUncheckedUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkCreateManyOrgInput = {
    id?: string
    name: string
    createdAt?: Date | string
    currentBundleId?: string | null
  }

  export type OrgMembershipCreateManyOrgInput = {
    userId: string
    role: $Enums.OrgRole
  }

  export type AuditLogCreateManyOrgInput = {
    id?: string
    at?: Date | string
    actorUserId: string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorNetworkId?: string | null
  }

  export type NetworkUpdateWithoutOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentBundle?: BundleUpdateOneWithoutNetworksAsCurrentNestedInput
    practices?: PracticeUpdateManyWithoutNetworkNestedInput
    bundles?: BundleUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateWithoutOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentBundleId?: NullableStringFieldUpdateOperationsInput | string | null
    practices?: PracticeUncheckedUpdateManyWithoutNetworkNestedInput
    bundles?: BundleUncheckedUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUncheckedUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateManyWithoutOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentBundleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrgMembershipUpdateWithoutOrgInput = {
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
    user?: UserUpdateOneRequiredWithoutOrgMembershipsNestedInput
  }

  export type OrgMembershipUncheckedUpdateWithoutOrgInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type OrgMembershipUncheckedUpdateManyWithoutOrgInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type AuditLogUpdateWithoutOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actor?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    network?: NetworkUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    actorUserId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorNetworkId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyWithoutOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    actorUserId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorNetworkId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PracticeCreateManyNetworkInput = {
    id?: string
    name: string
    createdAt?: Date | string
  }

  export type BundleCreateManyNetworkInput = {
    id?: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type NetworkMembershipCreateManyNetworkInput = {
    userId: string
    role: $Enums.NetworkRole
  }

  export type AuditLogCreateManyNetworkInput = {
    id?: string
    at?: Date | string
    actorUserId: string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: string | null
  }

  export type PracticeUpdateWithoutNetworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: PracticeKeyUpdateManyWithoutPracticeNestedInput
    careEpisodes?: CareEpisodeUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateWithoutNetworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: PracticeKeyUncheckedUpdateManyWithoutPracticeNestedInput
    careEpisodes?: CareEpisodeUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateManyWithoutNetworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BundleUpdateWithoutNetworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUpdateManyWithoutBundleNestedInput
    networksAsCurrent?: NetworkUpdateManyWithoutCurrentBundleNestedInput
  }

  export type BundleUncheckedUpdateWithoutNetworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutBundleNestedInput
    networksAsCurrent?: NetworkUncheckedUpdateManyWithoutCurrentBundleNestedInput
  }

  export type BundleUncheckedUpdateManyWithoutNetworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NetworkMembershipUpdateWithoutNetworkInput = {
    role?: EnumNetworkRoleFieldUpdateOperationsInput | $Enums.NetworkRole
    user?: UserUpdateOneRequiredWithoutNetworkMembershipsNestedInput
  }

  export type NetworkMembershipUncheckedUpdateWithoutNetworkInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumNetworkRoleFieldUpdateOperationsInput | $Enums.NetworkRole
  }

  export type NetworkMembershipUncheckedUpdateManyWithoutNetworkInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumNetworkRoleFieldUpdateOperationsInput | $Enums.NetworkRole
  }

  export type AuditLogUpdateWithoutNetworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actor?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    org?: OrgUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutNetworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    actorUserId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyWithoutNetworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    actorUserId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PracticeKeyCreateManyPracticeInput = {
    id?: string
    publicKeyPem: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CareEpisodeCreateManyPracticeInput = {
    id?: string
    patientId: string
    startAt?: Date | string
    endAt?: Date | string | null
  }

  export type PracticeKeyUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKeyPem?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeKeyUncheckedUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKeyPem?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeKeyUncheckedUpdateManyWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKeyPem?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareEpisodeUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutCareEpisodesNestedInput
  }

  export type CareEpisodeUncheckedUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CareEpisodeUncheckedUpdateManyWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubmissionCreateManyPatientInput = {
    id?: string
    bundleId: string
    bundleHash: string
    ciphertext: string
    iv: string
    tag: string
    wrappedDEK: string
    createdAt?: Date | string
  }

  export type CareEpisodeCreateManyPatientInput = {
    id?: string
    practiceId: string
    startAt?: Date | string
    endAt?: Date | string | null
  }

  export type SubmissionUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    bundleHash?: StringFieldUpdateOperationsInput | string
    ciphertext?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    wrappedDEK?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bundle?: BundleUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    bundleId?: StringFieldUpdateOperationsInput | string
    bundleHash?: StringFieldUpdateOperationsInput | string
    ciphertext?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    wrappedDEK?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    bundleId?: StringFieldUpdateOperationsInput | string
    bundleHash?: StringFieldUpdateOperationsInput | string
    ciphertext?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    wrappedDEK?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareEpisodeUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practice?: PracticeUpdateOneRequiredWithoutCareEpisodesNestedInput
  }

  export type CareEpisodeUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CareEpisodeUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubmissionCreateManyBundleInput = {
    id?: string
    patientId: string
    bundleHash: string
    ciphertext: string
    iv: string
    tag: string
    wrappedDEK: string
    createdAt?: Date | string
  }

  export type NetworkCreateManyCurrentBundleInput = {
    id?: string
    name: string
    createdAt?: Date | string
    orgId: string
  }

  export type SubmissionUpdateWithoutBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    bundleHash?: StringFieldUpdateOperationsInput | string
    ciphertext?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    wrappedDEK?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    bundleHash?: StringFieldUpdateOperationsInput | string
    ciphertext?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    wrappedDEK?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    bundleHash?: StringFieldUpdateOperationsInput | string
    ciphertext?: StringFieldUpdateOperationsInput | string
    iv?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    wrappedDEK?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NetworkUpdateWithoutCurrentBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    org?: OrgUpdateOneRequiredWithoutNetworksNestedInput
    practices?: PracticeUpdateManyWithoutNetworkNestedInput
    bundles?: BundleUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateWithoutCurrentBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgId?: StringFieldUpdateOperationsInput | string
    practices?: PracticeUncheckedUpdateManyWithoutNetworkNestedInput
    bundles?: BundleUncheckedUpdateManyWithoutNetworkNestedInput
    networkMemberships?: NetworkMembershipUncheckedUpdateManyWithoutNetworkNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutNetworkNestedInput
  }

  export type NetworkUncheckedUpdateManyWithoutCurrentBundleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orgId?: StringFieldUpdateOperationsInput | string
  }

  export type OrgMembershipCreateManyUserInput = {
    orgId: string
    role: $Enums.OrgRole
  }

  export type NetworkMembershipCreateManyUserInput = {
    networkId: string
    role: $Enums.NetworkRole
  }

  export type AuditLogCreateManyActorInput = {
    id?: string
    at?: Date | string
    action: string
    subjectType: string
    subjectId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: string | null
    actorNetworkId?: string | null
  }

  export type OrgMembershipUpdateWithoutUserInput = {
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
    org?: OrgUpdateOneRequiredWithoutOrgMembershipsNestedInput
  }

  export type OrgMembershipUncheckedUpdateWithoutUserInput = {
    orgId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type OrgMembershipUncheckedUpdateManyWithoutUserInput = {
    orgId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  }

  export type NetworkMembershipUpdateWithoutUserInput = {
    role?: EnumNetworkRoleFieldUpdateOperationsInput | $Enums.NetworkRole
    network?: NetworkUpdateOneRequiredWithoutNetworkMembershipsNestedInput
  }

  export type NetworkMembershipUncheckedUpdateWithoutUserInput = {
    networkId?: StringFieldUpdateOperationsInput | string
    role?: EnumNetworkRoleFieldUpdateOperationsInput | $Enums.NetworkRole
  }

  export type NetworkMembershipUncheckedUpdateManyWithoutUserInput = {
    networkId?: StringFieldUpdateOperationsInput | string
    role?: EnumNetworkRoleFieldUpdateOperationsInput | $Enums.NetworkRole
  }

  export type AuditLogUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    org?: OrgUpdateOneWithoutAuditLogsNestedInput
    network?: NetworkUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    actorNetworkId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    at?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    subjectType?: StringFieldUpdateOperationsInput | string
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    actorOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    actorNetworkId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}